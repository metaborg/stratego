module test90
imports libstratego-lib

signature
  constructors
    FieldDec : a * a * a -> a
    ConstantDec : a * a * a -> a
    ClassDec : a * a -> a
    InterfaceDec : a * a -> a
    ClassBody : a -> a

strategies

  main = 
    try(private-single-field-decs1)
    ; try(private-single-field-decs2)

  /**
   * @todo This simplification is a bit ad-hoc here.
   */
  private-single-field-decs1 =
    let at-bodydecs(s) =
          ClassDec(id, ClassBody(s)) + InterfaceDec(id, s)
          
        do-fielddec = {mods, type:
             ?FieldDec(_, _, [_])

          <+ ?FieldDec(mods, type, <id>)
             ; map(!FieldDec(mods, type, [<id>]))
        }

        do-constantdec = {mods, type:
            ?ConstantDec(_, _, [_])

          <+ ?ConstantDec(mods, type, <id>)
             ; map(!ConstantDec(mods, type, [<id>]))
        }

     in at-bodydecs(
          try(
            map1(do-fielddec <+ do-constantdec)
            ; flatten-list
          )
        )
    end

  private-single-field-decs2 =
    let at-bodydecs(s) =
          ClassDec(id, ClassBody(s)) + InterfaceDec(id, s)
          
        do-fielddec = {mods, type:
             ?FieldDec(_, _, [_])

          <+ ?FieldDec(mods, type, <id>)
             ; map(!FieldDec(mods, type, [<id>]))
        }

        do-constantdec = {mods, type:
            ?ConstantDec(_, _, [_])

          <+ ?ConstantDec(mods, type, <id>)
             ; map(!ConstantDec(mods, type, [<id>]))
        }

     in at-bodydecs(
          try(
            map1(do-fielddec <+ do-constantdec)
            ; flatten-list
            ; map1(do-fielddec <+ do-constantdec)
          )
        )
    end
