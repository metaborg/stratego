module test87
imports libstratego-lib
signature
  constructors
    ExtSDef : String * List(String) * List(String) -> SDef
    ExtSDefInl : String * List(String) * List(String) * String -> SDef
    SDefT : String * List(String) * List(String) * String -> SDef

strategies

  main = 
    test-suite(!"test87",
      test1
      ; test2
      ; test3
      ; test4
      ; test5
      ; test6
      ; test7
    )

  test1 =
    apply-test(!"test1"
	, joindefs
	, ![ExtSDef("a", ["b"], ["c"]), ExtSDef("a", ["d"], ["e"])]
	, ExtSDef("a", ["b"], ["c"])
	)

  test2 =
    apply-test(!"test2"
	, JoinDefsExt1
	, ![ExtSDef("a", ["b"], ["c"]), ExtSDef("a", ["d"], ["e"])]
	, !ExtSDef("a", ["b"], ["c"])
	)

  joindefs = debug(!"joindefs: "); (
    JoinDefs1 <+ JoinDefs2 <+ JoinDefsExt1 <+ JoinDefsExt2
  )

  JoinDefs1 : 
    [sdef] -> sdef
    where debug(!"JoinDefs1: ")

  JoinDefs2 : 
    defs @ [SDefT(f, xs1, xs2, s) | _] -> "foo"

  JoinDefsExt1 = debug(!"JoinDefsExt1: "); 
    where(map(
      ?ExtSDef(f, <length => i>, <length => j>)
    + ?ExtSDefInl(f, <length => i>, <length => j>, s)
    ))
    ; debug(!"JoinDefsExt1 yes: ") 
    ; (fetch-elem(?ExtSDefInl(_,_,_,_)) <+ Hd)

  JoinDefsExt2 = debug(!"JoinDefsExt2: "); 
    fetch(?ExtSDef(f,_,_) + ?ExtSDefInl(f,_,_,_))
    ; fetch(?SDefT(f,_,_,_))
    ; <debug(!"error: redefining external definition: ")> f
    ; giving-up

// ---------------

  test3 =
    apply-test(!"test3"
	, foo3
	, ![("a", ["b"], ["c"]), ("a", ["d"], ["e"])]
	, !("a", ["b"], ["c"])
	)

  foo3 =
    where(map(
      ?(f, <length => i>, <length => j>)
    + ?(f, <length => i>, <length => j>, s)
    ))
    ; Hd

// ---------------

  test4 =
    apply-test(!"test4"
	, foo4
	, ![("a", ["b"]), ("a", ["d"])]
	, !("a", ["b"])
	)

  foo4 =
    where(map(
      ?(f, <length => i>)
    + ?(f, <length => i>, s)
    )) 
    ; Hd

// ---------------

  test5 =
    apply-test(!"test5"
	, foo5
	, ![("a", ["b"]), ("a", ["d"])]
	, !("a", ["b"])
	)

  foo5 =
    where(map(
      ?(f, _)
    + ?(f, _, s)
    ))
    ; Hd

// ---------------

  test6 =
    apply-test(!"test6"
	, foo6
	, ![("a", ["b"]), ("a", ["d"])]
	, !("a", ["b"])
	)

  foo6 =
    where(map(
      {a : ?(f, a); <length> a => i}
    + {a : ?(f, a, s); <length> a => i}
    ))
    ; Hd

// ---------------

  test7 =
    apply-test(!"test7"
	, foo7
	, ![("a", ["b"]), ("a", ["d"])]
	, !("a", ["b"])
	)

  foo7 =
    where(map(
      {a: ?(f, a); <length> a => i}
    ))
    ; Hd
