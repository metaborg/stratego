/**
 * Occurrence analysis for a model of functional language
 * 
 * Authors: Eelco Visser & Jory van Zessen
 */
module occan
imports libstratego-lib

signature
  sorts Exp
  constructors
         : String -> Var
    Var  : Var -> Exp
    Lam  : Var * Exp -> Exp
    App  : Exp * Exp -> Exp
    Case : Exp * List(Alt) -> Exp
    Let  : Var * Exp * Exp -> Exp
    Alt  : Exp -> Exp
    Skip : Exp

signature
  sorts Occ
  constructors
    Dead       : Occ
    Once       : Occ
    OnceInLam  : Occ
    ManyBranch : Occ
    Many       : Occ

strategies

  main = 
    test-suite(!"occan", id
      	; test-dead
	; test-once
      	; test-many
      	; test-once-in-case
      	; test-manyb
        ; test-manyb-once 
        ; test-many-case
  	; test-oncel
  	; test-once-in-lambda
    )

  test-dead =
    apply-test(!"test-dead"
	, occan-exp
	, !Let("a", Skip(), Skip())
	, !Let("a"{Dead()}, Skip(), Skip())
    )
  test-once =
    apply-test(!"test-once"
	, occan-exp
	, !Let("a", Skip(), Var("a"))
	, !Let("a"{Once()}, Skip(), Var("a"))
    )

  test-many =
    apply-test(!"test-many"
	, occan-exp
	, !Let("a", Skip(), App(Var("a"), Var("a")))
	, !Let("a"{Many()}, Skip(), App(Var("a"), Var("a")))
    )


  test-once-in-case =
    apply-test(!"test-once-in-case"
	, occan-exp
	, !Let("a", Skip(), Case(Skip(), [Alt(Var("a"))]))
	, !Let("a"{Once()}, Skip(), Case(Skip(), [Alt(Var("a"))]))
    )

  test-many-case =
    apply-test(!"test-many-case"
	, occan-exp
	, !Let("a", Skip(), App(Case(Skip(), [Alt(Var("a"))]), Var("a")))
	, !Let("a"{Many()}, Skip(), App(Case(Skip(), [Alt(Var("a"))]), Var("a")))
    )

  test-nested-case =
    apply-test(!"test-nested-case"
	, occan-exp
	, !Let("a", Skip(), 
             Case(Skip(), [Alt(Case(Skip(), [Alt(Var("a"))])), Alt(Var("a"))]))
	, !Let("a"{ManyBranch()}, Skip(), 
             Case(Skip(), [Alt(Case(Skip(), [Alt(Var("a"))])), Alt(Var("a"))]))
    )

  test-manyb =
    apply-test(!"test-manyb"
	, occan-exp
	, !Let("a", Skip(), Case(Skip(), [Alt(Var("a")), Alt(Var("a"))]))
	, !Let("a"{ManyBranch()}, Skip(), Case(Skip(), [Alt(Var("a")), Alt(Var("a"))]))
    )

  test-manyb-once =
    apply-test(!"test-manyb-once"
	, occan-exp
	, !Let("a", Skip(),
            Let("b", Skip(),  
               Case(Skip(), [Alt(Var("a")), Alt(App(Var("b"),Var("a")))])))
	, !Let("a"{ManyBranch()}, Skip(),
            Let("b"{Once()}, Skip(),  
               Case(Skip(), [Alt(Var("a")), Alt(App(Var("b"),Var("a")))])))
    )

  test-oncel =
    apply-test(!"test-oncel"
	, occan-exp
	, !Let("a", Skip(), Lam("b", Var("a")))
	, !Let("a"{OnceInLam()}, Skip(), Lam("b"{Dead()}, Var("a")))
    )

  test-once-in-lambda =
    apply-test(!"test1"
	, occan-exp
	, !Lam("a", Var("a"))
	, !Lam("a"{Once()}, Var("a"))
    )

rules

  // the abstract domain for occurrence analysis

  inc-occ : (Dead(),       0) -> Once()
  inc-occ : (Dead(),       i) -> OnceInLam() where <gt>(i, 0)
  inc-occ : (Once(),       _) -> Many()
  inc-occ : (ManyBranch(), _) -> Many()
  inc-occ : (OnceInLam(),  _) -> Many()
  inc-occ : (Many(),       _) -> Many()

  merge-occ : (Dead(), Dead())       -> Dead()
  merge-occ : (Dead(), Once())       -> Once()
  merge-occ : (Dead(), OnceInLam())  -> OnceInLam()
  merge-occ : (Dead(), ManyBranch()) -> ManyBranch()
  merge-occ : (Dead(), Many())       -> Many()

  merge-occ : (Once(), Dead())       -> Once()
  merge-occ : (Once(), Once())       -> ManyBranch()
  merge-occ : (Once(), OnceInLam())  -> Many()
  merge-occ : (Once(), ManyBranch()) -> ManyBranch()
  merge-occ : (Once(), Many())       -> Many()

  merge-occ : (OnceInLam(), Dead())       -> OnceInLam()
  merge-occ : (OnceInLam(), Once())       -> Many()
  merge-occ : (OnceInLam(), OnceInLam())  -> Many()
  merge-occ : (OnceInLam(), ManyBranch()) -> Many()
  merge-occ : (OnceInLam(), Many())       -> Many()

  merge-occ : (ManyBranch(), Dead())       -> ManyBranch()
  merge-occ : (ManyBranch(), Once())       -> ManyBranch()
  merge-occ : (ManyBranch(), OnceInLam())  -> Many()
  merge-occ : (ManyBranch(), Many())       -> Many()
  merge-occ : (ManyBranch(), ManyBranch()) -> ManyBranch()

  merge-occ : (Many(), Dead())       -> Many()
  merge-occ : (Many(), Once())       -> Many()
  merge-occ : (Many(), OnceInLam())  -> Many()
  merge-occ : (Many(), ManyBranch()) -> Many()
  merge-occ : (Many(), Many())       -> Many()

strategies

  occan-exp =
    {| LamLevel
     : rules( LamLevel : () -> 0 )
     ; occan
     |}

  occan = 
    occan-let
    <+ occan-var
    <+ occan-lam
    <+ occan-case
    <+ all(occan)

  occan-lam:
    Lam(x, e1) -> Lam(x{o}, e2)
    where {| Occ, LamLevel
           : <LamLevel> (); inc => l
           ; rules( 
               Occ+x    : x  -> Dead()
               LamLevel : x  -> l
	       LamLevel : () -> l
             )
	   ; <occan> e1 => e2
	   ; <Occ> x => o
	   |}

  occan-let :
    Let(x, e1, e2) -> Let(x{o}, e3, e4)
    where <occan> e1 => e3
	; {| Occ
           : <LamLevel>() => l
	   ; rules( 
               Occ+x    : x -> Dead() 
               LamLevel : x -> l
             )
	   ; <occan> e2 => e4
	   ; <Occ> x => o
	   |}

  occan-var =
    ?Var(x)
    ; where(
        <Occ> x => o1
	; <inc-occ> (o1, <subt>(<LamLevel>(), <LamLevel> x)) => o2
 	; rules( Occ.x : x -> o2 )
      )
  
  occan-case :
    Case(e1, alt1*) -> Case(e2, alt2*)
    where <occan> e1 => e2
	; <occan-alts> alt1* => alt2*

  occan-alts :
    [] -> []

  occan-alts :
    [Alt(e)] -> [Alt(<occan>e)]

  occan-alts = 
    ?[_,_|_]
    ; merge-Occ([Alt(occan) | id], [id | occan-alts])

strategies

  merge-Occ(s1, s2) =
    dr-symbolic-merge(merge-occ, aux-Occ(|(),()), redef-Occ, s1, s2 | "Occ")

  redef-Occ =
    ?(x, o); rules( Occ.x : x -> o )

strategies

  // generic strategies

  dr-symbolic-merge(merge, aux, redef, s1, s2 | R) =
    where( 
      dr-get-rule-set(|R) => rs2 
      ; dr-start-change-set(|R)
    )
    ; s1
    ; where(
        dr-get-rule-set(|R) => rs1
        ; <dr-set-rule-set(|R)> rs2
        ; dr-start-change-set(|R)
      )
    ; s2
    ; dr-symbolic-merge-rulesets(merge, aux, redef | rs1, R)


  dr-symbolic-merge-rulesets(merge, aux, redef | rs, R) =
    where(
      !rs => [ChangeSet(_,_,ht1)|_]
      ; <hashtable-keys> ht1
      ; map(Snd; !(<id>, <merge>(<dr-symbolic-lookup(aux|rs)>, <Occ>)); redef)
      ; dr-commit-change-set(|"Occ")
    )

    // Note: can scope label be derived from the label in the changeset (ht)?

  dr-symbolic-lookup(aux|rs) =
    ?x
    ; <dr-lookup-rule(|x)> rs
    ; ?[<aux>|_]


/* old implementation
strategies 

  merge-Occ(s1, s2) =
    where( 
      dr-get-rule-set(|"Occ") => rs2 
      ; dr-start-change-set(|"Occ")
    )
    ; s1
    ; where(
        dr-get-rule-set(|"Occ") => rs1
        ; <dr-set-rule-set(|"Occ")> rs2
        ; dr-start-change-set(|"Occ")
      )
    ; s2
    ; merge-Occ-rulesets(|rs1)

  merge-Occ-rulesets(|rs) =
    where(
      !rs => [ChangeSet(_,_,ht1)|_]
      ; <hashtable-keys> ht1
      ; map(<redef-occ>(<Fst>, <Snd; !(<id>, <merge-occ>(<occ-lookup(|rs)>, <Occ>))>))
      ; dr-commit-change-set(|"Occ")
    )

  redef-occ =
    ?(ht, (x, o)); rules( Occ.x : x -> o )

    // Note: can scope label be derived from the label in the changeset (ht)?

  occ-lookup(|rs) =
    ?x
    ; <dr-lookup-rule(|x)> rs
    ; ?[<aux-Occ(|(),())>|_]

*/






