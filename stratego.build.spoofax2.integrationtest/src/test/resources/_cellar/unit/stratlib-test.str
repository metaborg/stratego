module stratlib-test
imports libstrc libstratego-lib

strategies

  stratlib-test = 
    test-suite(!"stratlib-test",
	tvars-test1;
//	tvars-test2;
	tsubstitute-test1;
	srename-test1;
	strename-test1
	; svars-arity-test1
    )

  tvars-test1 =
	apply-test(!"tvars-test1", tvars, !Int(1), ![])

//  tvars-test2 =
//	apply-test(!"tvars-test2", tvars, !Real(1.1), ![])

  tsubstitute-test1 =
	apply-test(!"tsubstitute-test1"
                  ,tsubstitute
                  ,!([("x",Var("a")),("y",Op("Add",[Var("y"),Var("z")]))],
                     Op("BinExp",[Var("x"),Str("*"),Var("y")]))
                  ,! Op("BinExp",[Var("a"),Str("*"),Op("Add",[Var("y"),Var("z")])])
                  )

  srename-test1 =
  apply-and-check(!"srename-test1"
        , strename
	, !SDef("downup", [VarDec("s1",DefaultStrat),VarDec("s2",DefaultStrat)],Rec("x",Seq(Call(SVar("s1"),[]),Seq(All(Call(SVar("x"),[])),Call(SVar("s2"),[])))))
	, {?SDef("downup",[VarDec(a_0,DefaultStrat),VarDec(b_0,DefaultStrat)],Rec(c_0,Seq(Call(SVar(a_0),[]),Seq(All(Call(SVar(c_0),[])),Call(SVar(b_0),[])))))}
	)

  strename-test1 =
    apply-and-check(!"strename-test1"
        , strename
	, !|[ split(F, G | ) = {X: ?X; !(<F(|)> X, <G(|)> X)} ]|
	, debug; ?|[ split(f, g | ) = {x: ?x; !(<f(|)> x, <g(|)> x)} ]|
          ; debug; <debug; different; debug>["F", "G", "X", f, g, x]
	)

  different =
    [] + where(!(<Hd>, <Tl>); not(member))
         ; where(Tl; different)

  svars-arity-test1 =
    apply-test(!"svars-arity-test1"
        , svars-arity
	, 
!|[ 
    add-rule(d_59 : ATerm() -> ATerm() | l_14 : ATerm(), m_14 : ATerm(), n_14 : ATerm()) =
      {o_14, p_14, q_14 :
       ?[RuleScope(o_14, p_14)|q_14]
       ; where((!(l_14, o_14)
                ; member(|)
               < (d_59(| o_14, p_14, m_14, n_14)
                  <+ where(!p_14
                           ; hashtable-put(| m_14, n_14)))
               + !q_14
                 ; add-rule(d_59(|) | l_14, m_14, n_14)
               ))}
]|
	, 
![("member",(0,0)),("hashtable-put",(0,2)),("add-rule",(1,3))]
	)
