module untyped-transformation1
signature
  sorts Exp constructors
    Var  : string -> Exp
    Int  : string -> Exp
    Add  : Exp * Exp -> Exp
    Sub  : Exp * Exp -> Exp
    Lt   : Exp * Exp -> Exp
    Min  : Exp -> Exp
    Inc  : Exp -> Exp
    Stat : Stat * Exp -> Exp
  sorts Stat constructors
    Exp    : Exp -> Stat
    Assign : string * Exp -> Stat
    Seq    : Stat * Stat -> Stat
    While  : Exp * Stat -> Stat
    For    : string * Exp * Exp * Stat -> Stat

rules

  desugar :
    Min(e) -> Sub(Int("0"), e)

  desugar :
    For(x, e1, e2, stat) ->
    Seq(Assign(x, e1),
      While(Lt(Var(x), e2),
        Seq(stat, Assign(x, Add(Var(x), Int("1"))))
      ))

  desugar :
    Inc(Var(x)) ->
	Stat(Assign(x, Add(Var(x), Int("1"))), Var(x))

  desugar : // lifting statement expressions
    stat@<is-simple-stat> -> Seq(stat1, stat2)
    where <oncetd-hd((Stat(stat1, e) -> e))> stat
		      => stat2
		      
strategies // type strategies

  is-simple-stat = 
    ?Assign(_,_) <+ ?Exp(_)
	<+ ?While(_,_) <+ ?For(_,_,_,_)

strategies // traversal strategies

  desugar-all = bottomup(try(desugar))

  oncetd-hd(s) =
    While(oncetd(s), id) <+ For(oncetd(s),id,id,id)
    <+ For(id,oncetd(s),id,id) <+ Exp(oncetd(s))
    <+ Assign(id, oncetd(s))

strategies // generic strategies
  try(s)      = s <+ id
  bottomup(s) = all(bottomup(s)); s
  oncetd(s)   = s <+ one(oncetd(s))
  alltd(s)    = s <+ all(alltd(s))

rules // errors that are caught by current compiler

  desugar : 
    Inc(Vaz(x)) -> // unknown constructor
    Stat(Assign(y, // unbound variable 
                Add(Var(x), Int("1")))) // wrong arity
                
  desugar-some = bottom-up(desugar) // unknown strategy
    
rules // errors that are not caught by current compiler

  desugar : // expression replaced with statement
    Add(e1, e2) -> Assign("x", e2) 
    
  desugar : // expression replaced with statement
    Stat(stat, e) -> stat 
    
  desugar : // lifting also applied to expressions
    stat -> Seq(stat1, stat2)
    where <oncetd((Stat(stat1, e) -> e))> stat => stat2
    
  desugar : // terms with type errors
    For(x, e1, e2, stat) -> 
    Seq(Assign(x, e1),
      While(Lt(Var(x), e2), 
        Seq(stat, 
          Assign(
            Var(x),       // Exp instead of string
            Add(x,        // string instead of Exp
                Int(1)))) // int instead of string
      )
    )    
    
