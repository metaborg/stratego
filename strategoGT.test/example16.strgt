module example16

signature
  sorts Exp constructors 
    Var  : string -> Exp
    Int  : string -> Exp
    Add  : Exp * Exp -> Exp
    Sub  : Exp * Exp -> Exp
    Gt   : Exp * Exp -> Exp
    Min  : Exp -> Exp         // sugar
    Inc  : Exp -> Exp         // sugar
    Stat : Stat * Exp -> Exp  // statement expressions
  sorts Stat constructors
    Exp    : Exp -> Stat
    Assign : string * Exp -> Stat
    Seq    : Stat * Stat -> Stat
    While  : Exp * Stat -> Stat
    For    : string * Exp * Exp * Stat -> Stat // sugar

strategies

topdown(TP|) :: TP
//topdown(? -> ?|) :: ? -> ?
topdown(s|) = s; all(topdown(s))
try(TP|) :: TP
try(s|) = s <+ id
oncetd(s) = s <+ one(oncetd(s))
alltd(s) = s <+ all(alltd(s))

//desugar-exp :: Exp -> Exp
desugar-exp : 
  Min(e) -> Sub(Int("0"), e)

//desugar-stat :: Stat -> Stat
desugar-stat:
  For(x, e1, e2, stat) ->
  Seq(
    Assign(x, e1),
    While(Gt(Var(x), e2),
      Seq(stat, Assign(x, Add(Var(x), 1)))
    )
  )

//desugar-inc :: Exp -> Stat
desugar-inc: Inc(Var(x)) -> Assign(x, Add(Var(x), Int("1")))

desugar(|) :: Stat -> Stat
desugar(|) =
  desugar-stat + is-exp; (desugar-inc <+ desugar-exp)

desugar-TP :: TP
desugar-TP(|) = (?Exp(_) <+ ?Assign(_, _)) ; desugar

desugar-all = topdown(try(desugar-TP))

lift-assign:
  stat1 -> Seq(Assign(x, e2), stat2)
  where
    <is-stat> stat
  ; stat2 := <oncetd((Assign(x, e2) -> Var(x)))> stat1

lift-all =
  alltd(lift-assign; lift-all)

is-stat(|) :: TP
is-stat(|) = ?Exp(_) <+ ?Assign(_, _) // etc.
is-exp :: ? -> Exp
is-exp = ?Var(_) <+ ?Int(_) // etc.

example :: Stat -> Stat
example = desugar-all; lift-all