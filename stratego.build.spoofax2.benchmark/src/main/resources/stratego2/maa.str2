module maa

imports libstrategolib

signature

sorts
   Bool Nat Bit Octet OctetSum Half HalfSum Block BlockSum Pair Key Message SegmentedMessage

constructors
   false : Bool 
   true : Bool 
   x0 : Bit 
   x1 : Bit 
   buildOctet : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> Octet 
   buildOctetSum : Bit * Octet -> OctetSum 
   buildHalf : Octet * Octet -> Half 
   buildHalfSum : Bit * Half -> HalfSum 
   buildBlock : Octet * Octet * Octet * Octet -> Block 
   buildBlockSum : Bit * Block -> BlockSum 
   buildPair : Block * Block -> Pair 
   zero : Nat 
   succ : Nat -> Nat 
   buildKey : Block * Block -> Key 
   unitMessage : Block -> Message 
   consMessage : Block * Message -> Message 
   unitSegment : Message -> SegmentedMessage 
   consSegment : Message * SegmentedMessage -> SegmentedMessage 
   notBool : Bool -> Bool 
   andBool : Bool * Bool -> Bool 
   orBool : Bool * Bool -> Bool 
   xorBool : Bool * Bool -> Bool 
   notBit : Bit -> Bit 
   andBit : Bit * Bit -> Bit 
   orBit : Bit * Bit -> Bit 
   xorBit : Bit * Bit -> Bit 
   x00 : Octet 
   x01 : Octet 
   x0000 : Half 
   HalfU : Block -> Half 
   HalfL : Block -> Half 
   eqBit : Bit * Bit -> Bool 
   eqOctet : Octet * Octet -> Bool 
   eqOctetSum : OctetSum * OctetSum -> Bool 
   eqHalf : Half * Half -> Bool 
   eqHalfSum : HalfSum * HalfSum -> Bool 
   eqBlock : Block * Block -> Bool 
   eqBlockSum : BlockSum * BlockSum -> Bool 
   eqPair : Pair * Pair -> Bool 
   addBit : Bit * Bit * Bit -> Bit 
   carBit : Bit * Bit * Bit -> Bit 
   addOctetSum : Octet * Octet * Bit -> OctetSum 
   addOctet8 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> OctetSum 
   addOctet7 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> OctetSum 
   addOctet6 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> OctetSum 
   addOctet5 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> OctetSum 
   addOctet4 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> OctetSum 
   addOctet3 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> OctetSum 
   addOctet2 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> OctetSum 
   addOctet1 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> OctetSum 
   addOctet0 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit -> OctetSum 
   dropCarryOctetSum : OctetSum -> Octet 
   addOctet : Octet * Octet -> Octet 
   addHalfSum : Half * Half -> HalfSum 
   addHalf2 : Octet * Octet * Octet * Octet -> HalfSum 
   addHalf1 : Octet * Octet * OctetSum -> HalfSum 
   addHalf0 : OctetSum * Octet -> HalfSum 
   dropCarryHalfSum : HalfSum -> Half 
   addHalf : Half * Half -> Half 
   addHalfOctet : Octet * Half -> Half 
   addHalfOctets : Octet * Octet -> Half 
   addBlockSum : Block * Block -> BlockSum 
   addBlock4 : Octet * Octet * Octet * Octet * Octet * Octet * Octet * Octet -> BlockSum 
   addBlock3 : Octet * Octet * Octet * Octet * Octet * Octet * OctetSum -> BlockSum 
   addBlock2 : Octet * Octet * Octet * Octet * OctetSum * Octet -> BlockSum 
   addBlock1 : Octet * Octet * OctetSum * Octet * Octet -> BlockSum 
   addBlock0 : OctetSum * Octet * Octet * Octet -> BlockSum 
   dropCarryBlockSum : BlockSum -> Block 
   addBlock : Block * Block -> Block 
   addBlockHalf : Half * Block -> Block 
   addBlockHalves : Half * Half -> Block 
   leftOctet1 : Octet -> Octet 
   leftOctet2 : Octet -> Octet 
   leftOctet3 : Octet -> Octet 
   leftOctet4 : Octet -> Octet 
   leftOctet5 : Octet -> Octet 
   leftOctet6 : Octet -> Octet 
   leftOctet7 : Octet -> Octet 
   rightOctet1 : Octet -> Octet 
   rightOctet2 : Octet -> Octet 
   rightOctet3 : Octet -> Octet 
   rightOctet4 : Octet -> Octet 
   rightOctet5 : Octet -> Octet 
   rightOctet6 : Octet -> Octet 
   rightOctet7 : Octet -> Octet 
   mulOctet : Octet * Octet -> Half 
   mulOctet1 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Bit * Octet * Half -> Half 
   mulOctet2 : Bit * Bit * Bit * Bit * Bit * Bit * Bit * Octet * Half -> Half 
   mulOctet3 : Bit * Bit * Bit * Bit * Bit * Bit * Octet * Half -> Half 
   mulOctet4 : Bit * Bit * Bit * Bit * Bit * Octet * Half -> Half 
   mulOctet5 : Bit * Bit * Bit * Bit * Octet * Half -> Half 
   mulOctet6 : Bit * Bit * Bit * Octet * Half -> Half 
   mulOctet7 : Bit * Bit * Octet * Half -> Half 
   mulOctet8 : Bit * Octet * Half -> Half 
   mulOctetA : Half * Octet * Octet -> Half 
   mulOctetB : Octet * OctetSum -> Half 
   mulHalf : Half * Half -> Block 
   mulHalfA : Half * Half * Half * Half -> Block 
   mulHalf4 : Octet * Octet * Octet * Octet * Octet * Octet * Octet * Octet -> Block 
   mulHalf3 : Octet * Octet * Octet * Octet * Half * Octet -> Block 
   mulHalf2 : Octet * Half * Octet * Octet -> Block 
   mulHalf1 : Half * Octet * Octet * Octet -> Block 
   mulBlock : Block * Block -> Pair 
   mulBlockA : Block * Block * Block * Block -> Pair 
   mulBlock4 : Half * Half * Half * Half * Half * Half * Half * Half -> Pair 
   mulBlock3 : Half * Half * Half * Half * Block * Half -> Pair 
   mulBlock2 : Half * Block * Half * Half -> Pair 
   mulBlock1 : Block * Half * Half * Half -> Pair 
   mulBlockB : Half * Half * Half * Half -> Pair 
   addNat : Nat * Nat -> Nat 
   multNat : Nat * Nat -> Nat 
   eqNat : Nat * Nat -> Bool 
   ltNat : Nat * Nat -> Bool 
   n1 : Nat 
   n2 : Nat 
   n3 : Nat 
   n4 : Nat 
   n5 : Nat 
   n6 : Nat 
   n7 : Nat 
   n8 : Nat 
   n9 : Nat 
   n10 : Nat 
   n11 : Nat 
   n12 : Nat 
   n13 : Nat 
   n14 : Nat 
   n15 : Nat 
   n16 : Nat 
   n17 : Nat 
   n18 : Nat 
   n19 : Nat 
   n20 : Nat 
   n21 : Nat 
   n22 : Nat 
   n254 : Nat 
   n256 : Nat 
   n4100 : Nat 
   andOctet : Octet * Octet -> Octet 
   orOctet : Octet * Octet -> Octet 
   xorOctet : Octet * Octet -> Octet 
   x02 : Octet 
   x03 : Octet 
   x04 : Octet 
   x05 : Octet 
   x06 : Octet 
   x07 : Octet 
   x08 : Octet 
   x09 : Octet 
   x0A : Octet 
   x0B : Octet 
   x0C : Octet 
   x0D : Octet 
   x0E : Octet 
   x0F : Octet 
   x10 : Octet 
   x11 : Octet 
   x12 : Octet 
   x13 : Octet 
   x14 : Octet 
   x15 : Octet 
   x16 : Octet 
   x17 : Octet 
   x18 : Octet 
   x1A : Octet 
   x1B : Octet 
   x1C : Octet 
   x1D : Octet 
   x1E : Octet 
   x1F : Octet 
   x20 : Octet 
   x21 : Octet 
   x23 : Octet 
   x24 : Octet 
   x25 : Octet 
   x26 : Octet 
   x27 : Octet 
   x28 : Octet 
   x29 : Octet 
   x2A : Octet 
   x2B : Octet 
   x2D : Octet 
   x2E : Octet 
   x2F : Octet 
   x30 : Octet 
   x31 : Octet 
   x32 : Octet 
   x33 : Octet 
   x34 : Octet 
   x35 : Octet 
   x36 : Octet 
   x37 : Octet 
   x38 : Octet 
   x39 : Octet 
   x3A : Octet 
   x3B : Octet 
   x3C : Octet 
   x3D : Octet 
   x3F : Octet 
   x40 : Octet 
   x46 : Octet 
   x48 : Octet 
   x49 : Octet 
   x4A : Octet 
   x4B : Octet 
   x4C : Octet 
   x4D : Octet 
   x4E : Octet 
   x4F : Octet 
   x50 : Octet 
   x51 : Octet 
   x53 : Octet 
   x54 : Octet 
   x55 : Octet 
   x58 : Octet 
   x5A : Octet 
   x5B : Octet 
   x5C : Octet 
   x5D : Octet 
   x5E : Octet 
   x5F : Octet 
   x60 : Octet 
   x61 : Octet 
   x62 : Octet 
   x63 : Octet 
   x64 : Octet 
   x65 : Octet 
   x66 : Octet 
   x67 : Octet 
   x69 : Octet 
   x6A : Octet 
   x6B : Octet 
   x6C : Octet 
   x6D : Octet 
   x6E : Octet 
   x6F : Octet 
   x70 : Octet 
   x71 : Octet 
   x72 : Octet 
   x73 : Octet 
   x74 : Octet 
   x75 : Octet 
   x76 : Octet 
   x77 : Octet 
   x78 : Octet 
   x79 : Octet 
   x7A : Octet 
   x7B : Octet 
   x7C : Octet 
   x7D : Octet 
   x7E : Octet 
   x7F : Octet 
   x80 : Octet 
   x81 : Octet 
   x83 : Octet 
   x84 : Octet 
   x85 : Octet 
   x86 : Octet 
   x88 : Octet 
   x89 : Octet 
   x8A : Octet 
   x8C : Octet 
   x8D : Octet 
   x8E : Octet 
   x8F : Octet 
   x90 : Octet 
   x91 : Octet 
   x92 : Octet 
   x93 : Octet 
   x95 : Octet 
   x96 : Octet 
   x97 : Octet 
   x98 : Octet 
   x99 : Octet 
   x9A : Octet 
   x9B : Octet 
   x9C : Octet 
   x9D : Octet 
   x9E : Octet 
   x9F : Octet 
   xA0 : Octet 
   xA1 : Octet 
   xA2 : Octet 
   xA3 : Octet 
   xA4 : Octet 
   xA5 : Octet 
   xA6 : Octet 
   xA7 : Octet 
   xA8 : Octet 
   xA9 : Octet 
   xAA : Octet 
   xAB : Octet 
   xAC : Octet 
   xAE : Octet 
   xAF : Octet 
   xB0 : Octet 
   xB1 : Octet 
   xB2 : Octet 
   xB3 : Octet 
   xB5 : Octet 
   xB6 : Octet 
   xB8 : Octet 
   xB9 : Octet 
   xBA : Octet 
   xBB : Octet 
   xBC : Octet 
   xBE : Octet 
   xBF : Octet 
   xC0 : Octet 
   xC1 : Octet 
   xC2 : Octet 
   xC4 : Octet 
   xC5 : Octet 
   xC6 : Octet 
   xC7 : Octet 
   xC8 : Octet 
   xC9 : Octet 
   xCA : Octet 
   xCB : Octet 
   xCC : Octet 
   xCD : Octet 
   xCE : Octet 
   xD0 : Octet 
   xD1 : Octet 
   xD2 : Octet 
   xD3 : Octet 
   xD4 : Octet 
   xD5 : Octet 
   xD6 : Octet 
   xD7 : Octet 
   xD8 : Octet 
   xD9 : Octet 
   xDB : Octet 
   xDC : Octet 
   xDD : Octet 
   xDE : Octet 
   xDF : Octet 
   xE0 : Octet 
   xE1 : Octet 
   xE3 : Octet 
   xE6 : Octet 
   xE8 : Octet 
   xE9 : Octet 
   xEA : Octet 
   xEB : Octet 
   xEC : Octet 
   xED : Octet 
   xEE : Octet 
   xEF : Octet 
   xF0 : Octet 
   xF1 : Octet 
   xF2 : Octet 
   xF3 : Octet 
   xF4 : Octet 
   xF5 : Octet 
   xF6 : Octet 
   xF7 : Octet 
   xF8 : Octet 
   xF9 : Octet 
   xFA : Octet 
   xFB : Octet 
   xFC : Octet 
   xFD : Octet 
   xFE : Octet 
   xFF : Octet 
   andBlock : Block * Block -> Block 
   orBlock : Block * Block -> Block 
   xorBlock : Block * Block -> Block 
   x0001 : Half 
   x00000000 : Block 
   x00000001 : Block 
   x00000002 : Block 
   x00000003 : Block 
   x00000004 : Block 
   x00000005 : Block 
   x00000006 : Block 
   x00000007 : Block 
   x00000008 : Block 
   x00000009 : Block 
   x0000000A : Block 
   x0000000B : Block 
   x0000000C : Block 
   x0000000D : Block 
   x0000000E : Block 
   x0000000F : Block 
   x00000010 : Block 
   x00000012 : Block 
   x00000014 : Block 
   x00000016 : Block 
   x00000018 : Block 
   x0000001B : Block 
   x0000001D : Block 
   x0000001E : Block 
   x0000001F : Block 
   x00000031 : Block 
   x00000036 : Block 
   x00000060 : Block 
   x00000080 : Block 
   x000000A5 : Block 
   x000000B6 : Block 
   x000000C4 : Block 
   x000000D2 : Block 
   x00000100 : Block 
   x00000129 : Block 
   x0000018C : Block 
   x00004000 : Block 
   x00010000 : Block 
   x00020000 : Block 
   x00030000 : Block 
   x00040000 : Block 
   x00060000 : Block 
   x00804021 : Block 
   x00FF00FF : Block 
   x0103050B : Block 
   x01030703 : Block 
   x01030705 : Block 
   x0103070F : Block 
   x02040801 : Block 
   x0297AF6F : Block 
   x07050301 : Block 
   x077788A2 : Block 
   x07C72EAA : Block 
   x0A202020 : Block 
   x0AD67E20 : Block 
   x10000000 : Block 
   x11A9D254 : Block 
   x11AC46B8 : Block 
   x1277A6D4 : Block 
   x13647149 : Block 
   x160EE9B5 : Block 
   x17065DBB : Block 
   x17A808FD : Block 
   x1D10D8D3 : Block 
   x1D3B7760 : Block 
   x1D9C9655 : Block 
   x1F3F7FFF : Block 
   x204E80A7 : Block 
   x21D869BA : Block 
   x24B66FB5 : Block 
   x270EEDAF : Block 
   x277B4B25 : Block 
   x2829040B : Block 
   x288FC786 : Block 
   x28EAD8B3 : Block 
   x29907CD8 : Block 
   x29C1485F : Block 
   x29EEE96B : Block 
   x2A6091AE : Block 
   x2BF8499A : Block 
   x2E80AC30 : Block 
   x2FD76FFB : Block 
   x30261492 : Block 
   x303FF4AA : Block 
   x33D5A466 : Block 
   x344925FC : Block 
   x34ACF886 : Block 
   x3CD54DEB : Block 
   x3CF3A7D2 : Block 
   x3DD81AC6 : Block 
   x3F6F7248 : Block 
   x48B204D6 : Block 
   x4A645A01 : Block 
   x4C49AAE0 : Block 
   x4CE933E1 : Block 
   x4D53901A : Block 
   x4DA124A1 : Block 
   x4F998E01 : Block 
   x4FB1138A : Block 
   x50DEC930 : Block 
   x51AF3C1D : Block 
   x51EDE9C7 : Block 
   x550D91CE : Block 
   x55555555 : Block 
   x55DD063F : Block 
   x5834A585 : Block 
   x5A35D667 : Block 
   x5BC02502 : Block 
   x5CCA3239 : Block 
   x5EBA06C2 : Block 
   x5F38EEF1 : Block 
   x613F8E2A : Block 
   x63C70DBA : Block 
   x6AD6E8A4 : Block 
   x6AEBACF8 : Block 
   x6D67E884 : Block 
   x7050EC5E : Block 
   x717153D5 : Block 
   x7201F4DC : Block 
   x7397C9AE : Block 
   x74B39176 : Block 
   x76232E5F : Block 
   x7783C51D : Block 
   x7792F9D4 : Block 
   x7BC180AB : Block 
   x7DB2D9F4 : Block 
   x7DFEFBFF : Block 
   x7F76A3B0 : Block 
   x7F839576 : Block 
   x7FFFFFF0 : Block 
   x7FFFFFF1 : Block 
   x7FFFFFFC : Block 
   x7FFFFFFD : Block 
   x80000000 : Block 
   x80000002 : Block 
   x800000C2 : Block 
   x80018000 : Block 
   x80018001 : Block 
   x80397302 : Block 
   x81D10CA3 : Block 
   x89D635D7 : Block 
   x8CE37709 : Block 
   x8DC8BBDE : Block 
   x9115A558 : Block 
   x91896CFA : Block 
   x9372CDC6 : Block 
   x98D1CC75 : Block 
   x9D15C437 : Block 
   x9DB15CF6 : Block 
   x9E2E7B36 : Block 
   xA018C83B : Block 
   xA0B87B77 : Block 
   xA44AAAC0 : Block 
   xA511987A : Block 
   xA70FC148 : Block 
   xA93BD410 : Block 
   xAAAAAAAA : Block 
   xAB00FFCD : Block 
   xAB01FCCD : Block 
   xAB6EED4A : Block 
   xABEEED6B : Block 
   xACBC13DD : Block 
   xB1CC1CC5 : Block 
   xB8142629 : Block 
   xB99A62DE : Block 
   xBA92DB12 : Block 
   xBBA57835 : Block 
   xBE9F0917 : Block 
   xBF2D7D85 : Block 
   xBFEF7FDF : Block 
   xC1ED90DD : Block 
   xC21A1846 : Block 
   xC4EB1AEB : Block 
   xC6B1317E : Block 
   xCBC865BA : Block 
   xCD959B46 : Block 
   xD0482465 : Block 
   xD636250D : Block 
   xD7843FDC : Block 
   xD78634BC : Block 
   xD8804CA5 : Block 
   xDB79FBDC : Block 
   xDB9102B0 : Block 
   xE0C08000 : Block 
   xE6A12F07 : Block 
   xEB35B97F : Block 
   xF0239DD5 : Block 
   xF14D6E28 : Block 
   xF2EF3501 : Block 
   xF6A09667 : Block 
   xFD297DA4 : Block 
   xFDC1A8BA : Block 
   xFE4E5BDD : Block 
   xFEA1D334 : Block 
   xFECCAA6E : Block 
   xFEFC07F0 : Block 
   xFF2D7DA5 : Block 
   xFFEF0001 : Block 
   xFFFF00FF : Block 
   xFFFFFF2D : Block 
   xFFFFFF3A : Block 
   xFFFFFFF0 : Block 
   xFFFFFFF1 : Block 
   xFFFFFFF4 : Block 
   xFFFFFFF5 : Block 
   xFFFFFFF7 : Block 
   xFFFFFFF9 : Block 
   xFFFFFFFA : Block 
   xFFFFFFFB : Block 
   xFFFFFFFC : Block 
   xFFFFFFFD : Block 
   xFFFFFFFE : Block 
   xFFFFFFFF : Block 
   appendMessage : Message * Block -> Message 
   reverseMessage : Message -> Message 
   makeMessage : Nat * Block * Block -> Message 
   splitSegment : Message -> SegmentedMessage 
   cutSegment : Message * Message * Nat -> SegmentedMessage 
   ADD : Block * Block -> Block 
   AND : Block * Block -> Block 
   MUL : Block * Block -> Pair 
   OR : Block * Block -> Block 
   XOR : Block * Block -> Block 
   XOR_prime : Pair -> Block 
   CYC : Block -> Block 
   nCYC : Nat * Block -> Block 
   FIX1 : Block -> Block 
   FIX2 : Block -> Block 
   needAdjust : Octet -> Bool 
   adjustCode : Octet -> Bit 
   adjust : Octet * Octet -> Octet 
   PAT : Block * Block -> Octet 
   BYT : Block * Block -> Pair 
   BYT_prime : Octet * Octet * Octet * Octet * Octet * Octet * Octet * Octet * Octet -> Pair 
   ADDC : Block * Block -> Pair 
   ADDC_prime : BlockSum -> Pair 
   MUL1 : Block * Block -> Block 
   MUL1XY : Pair -> Block 
   MUL1UL : Block * Block -> Block 
   MUL1SC : Pair -> Block 
   MUL2 : Block * Block -> Block 
   MUL2XY : Pair -> Block 
   MUL2UL : Block * Block -> Block 
   MUL2DEL : Pair * Block -> Block 
   MUL2FL : Block * Block -> Block 
   MUL2SC : Pair -> Block 
   MUL2A : Block * Block -> Block 
   MUL2AXY : Pair -> Block 
   MUL2AUL : Block * Block -> Block 
   MUL2ADL : Block * Block -> Block 
   MUL2ASC : Pair -> Block 
   squareHalf : Half -> Block 
   Q : Octet -> Block 
   H4 : Block -> Block 
   H6 : Block -> Block 
   H8 : Block -> Block 
   H0 : Block -> Block 
   H5 : Block * Octet -> Block 
   H7 : Block -> Block 
   H9 : Block -> Block 
   J1_2 : Block -> Block 
   J1_4 : Block -> Block 
   J1_6 : Block -> Block 
   J1_8 : Block -> Block 
   J2_2 : Block -> Block 
   J2_4 : Block -> Block 
   J2_6 : Block -> Block 
   J2_8 : Block -> Block 
   K1_2 : Block -> Block 
   K1_4 : Block -> Block 
   K1_5 : Block -> Block 
   K1_7 : Block -> Block 
   K1_9 : Block -> Block 
   K2_2 : Block -> Block 
   K2_4 : Block -> Block 
   K2_5 : Block -> Block 
   K2_7 : Block -> Block 
   K2_9 : Block -> Block 
   preludeXY : Block * Block -> Pair 
   preludeVW : Block * Block -> Pair 
   preludeST : Block * Block -> Pair 
   preludeXY_prime : Pair * Octet -> Pair 
   preludeVW_prime : Pair -> Pair 
   preludeST_prime : Pair -> Pair 
   computeXY : Pair * Pair * Block -> Pair 
   computeXY_prime : Pair * Block * Block -> Pair 
   computeVW : Pair -> Pair 
   loop1 : Pair * Pair * Message -> Pair 
   loop2 : Pair * Pair * Message -> Pair 
   coda : Pair * Pair * Pair -> Block 
   MAA : Key * Message -> Block 
   MAA_prime : Pair * Pair * Pair * Message -> Block 
   MAC : Key * Message -> Block 
   MACfirst : Key * SegmentedMessage -> Block 
   MACnext : Key * Block * SegmentedMessage -> Block 

rules
   REC_E: notBool (false()) -> true()
   REC_E: notBool (true()) -> false()
   REC_E: andBool (false(), L) -> false()
   REC_E: andBool (true(), L) -> L
   REC_E: orBool (false(), L) -> L
   REC_E: orBool (true(), L) -> true()
   REC_E: xorBool (false(), L) -> L
   REC_E: xorBool (true(), L) -> notBool (L)
   REC_E: notBit (x0()) -> x1()
   REC_E: notBit (x1()) -> x0()
   REC_E: andBit (B, x0()) -> x0()
   REC_E: andBit (B, x1()) -> B
   REC_E: orBit (B, x0()) -> B
   REC_E: orBit (B, x1()) -> x1()
   REC_E: xorBit (B, x0()) -> B
   REC_E: xorBit (B, x1()) -> notBit (B)
   REC_E: x00() -> buildOctet (x0(), x0(), x0(), x0(), x0(), x0(), x0(), x0())
   REC_E: x01() -> buildOctet (x0(), x0(), x0(), x0(), x0(), x0(), x0(), x1())
   REC_E: x0000() -> buildHalf (x00(), x00())
   REC_E: HalfU (buildBlock (O1, O2, O3, O4)) -> buildHalf (O1, O2)
   REC_E: HalfL (buildBlock (O1, O2, O3, O4)) -> buildHalf (O3, O4)
   REC_E: eqBit (x0(), x0()) -> true()
   REC_E: eqBit (x0(), x1()) -> false()
   REC_E: eqBit (x1(), x0()) -> false()
   REC_E: eqBit (x1(), x1()) -> true()
   REC_E: eqOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) -> andBool (eqBit (B1, B_prime1), andBool (eqBit (B2, B_prime2), andBool (eqBit (B3, B_prime3), andBool (eqBit (B4, B_prime4), andBool (eqBit (B5, B_prime5), andBool (eqBit (B6, B_prime6), andBool (eqBit (B7, B_prime7), eqBit (B8, B_prime8))))))))
   REC_E: eqOctetSum (buildOctetSum (B, O), buildOctetSum (B_prime, O_prime)) -> andBool (eqBit (B, B_prime), eqOctet (O, O_prime))
   REC_E: eqHalf (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) -> andBool (eqOctet (O1, O_prime1), eqOctet (O2, O_prime2))
   REC_E: eqHalfSum (buildHalfSum (B, H), buildHalfSum (B_prime, H_prime)) -> andBool (eqBit (B, B_prime), eqHalf (H, H_prime))
   REC_E: eqBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> andBool (andBool (eqOctet (O1, O_prime1), eqOctet (O2, O_prime2)), andBool (eqOctet (O3, O_prime3), eqOctet (O4, O_prime4)))
   REC_E: eqBlockSum (buildBlockSum (B, W), buildBlockSum (B_prime, W_prime)) -> andBool (eqBit (B, B_prime), eqBlock (W, W_prime))
   REC_E: eqPair (buildPair (W1, W2), buildPair (W_prime1, W_prime2)) -> andBool (eqBlock (W1, W_prime1), eqBlock (W2, W_prime2))
   REC_E: addBit (B, B_prime, Bcarry) -> xorBit (xorBit (B, B_prime), Bcarry)
   REC_E: carBit (B, B_prime, Bcarry) -> orBit (andBit (andBit (B, B_prime), notBit (Bcarry)), andBit (orBit (B, B_prime), Bcarry))
   REC_E: addOctetSum (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8), Bcarry) -> addOctet8 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, B8, B_prime8, Bcarry)
   REC_E: addOctet8 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, B8, B_prime8, Bcarry) -> addOctet7 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, carBit (B8, B_prime8, Bcarry), addBit (B8, B_prime8, Bcarry))
   REC_E: addOctet7 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, Bcarry, B_second8) -> addOctet6 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, carBit (B7, B_prime7, Bcarry), addBit (B7, B_prime7, Bcarry), B_second8)
   REC_E: addOctet6 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, Bcarry, B_second7, B_second8) -> addOctet5 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, carBit (B6, B_prime6, Bcarry), addBit (B6, B_prime6, Bcarry), B_second7, B_second8)
   REC_E: addOctet5 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, Bcarry, B_second6, B_second7, B_second8) -> addOctet4 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, carBit (B5, B_prime5, Bcarry), addBit (B5, B_prime5, Bcarry), B_second6, B_second7, B_second8)
   REC_E: addOctet4 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, Bcarry, B_second5, B_second6, B_second7, B_second8) -> addOctet3 (B1, B_prime1, B2, B_prime2, B3, B_prime3, carBit (B4, B_prime4, Bcarry), addBit (B4, B_prime4, Bcarry), B_second5, B_second6, B_second7, B_second8)
   REC_E: addOctet3 (B1, B_prime1, B2, B_prime2, B3, B_prime3, Bcarry, B_second4, B_second5, B_second6, B_second7, B_second8) -> addOctet2 (B1, B_prime1, B2, B_prime2, carBit (B3, B_prime3, Bcarry), addBit (B3, B_prime3, Bcarry), B_second4, B_second5, B_second6, B_second7, B_second8)
   REC_E: addOctet2 (B1, B_prime1, B2, B_prime2, Bcarry, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) -> addOctet1 (B1, B_prime1, carBit (B2, B_prime2, Bcarry), addBit (B2, B_prime2, Bcarry), B_second3, B_second4, B_second5, B_second6, B_second7, B_second8)
   REC_E: addOctet1 (B1, B_prime1, Bcarry, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) -> addOctet0 (carBit (B1, B_prime1, Bcarry), addBit (B1, B_prime1, Bcarry), B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8)
   REC_E: addOctet0 (Bcarry, B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) -> buildOctetSum (Bcarry, buildOctet (B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8))
   REC_E: dropCarryOctetSum (buildOctetSum (Bcarry, O)) -> O
   REC_E: addOctet (O, O_prime) -> dropCarryOctetSum (addOctetSum (O, O_prime, x0()))
   REC_E: addHalfSum (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) -> addHalf2 (O1, O_prime1, O2, O_prime2)
   REC_E: addHalf2 (O1, O_prime1, O2, O_prime2) -> addHalf1 (O1, O_prime1, addOctetSum (O2, O_prime2, x0()))
   REC_E: addHalf1 (O1, O_prime1, buildOctetSum (B, O_second2)) -> addHalf0 (addOctetSum (O1, O_prime1, B), O_second2)
   REC_E: addHalf0 (buildOctetSum (B, O_second1), O_second2) -> buildHalfSum (B, buildHalf (O_second1, O_second2))
   REC_E: dropCarryHalfSum (buildHalfSum (B, H)) -> H
   REC_E: addHalf (H, H_prime) -> dropCarryHalfSum (addHalfSum (H, H_prime))
   REC_E: addHalfOctet (O, H) -> addHalf (buildHalf (x00(), O), H)
   REC_E: addHalfOctets (O, O_prime) -> addHalf (buildHalf (x00(), O), buildHalf (x00(), O_prime))
   REC_E: addBlockSum (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> addBlock4 (O1, O_prime1, O2, O_prime2, O3, O_prime3, O4, O_prime4)
   REC_E: addBlock4 (O1, O_prime1, O2, O_prime2, O3, O_prime3, O4, O_prime4) -> addBlock3 (O1, O_prime1, O2, O_prime2, O3, O_prime3, addOctetSum (O4, O_prime4, x0()))
   REC_E: addBlock3 (O1, O_prime1, O2, O_prime2, O3, O_prime3, buildOctetSum (Bcarry, O_second4)) -> addBlock2 (O1, O_prime1, O2, O_prime2, addOctetSum (O3, O_prime3, Bcarry), O_second4)
   REC_E: addBlock2 (O1, O_prime1, O2, O_prime2, buildOctetSum (Bcarry, O_second3), O_second4) -> addBlock1 (O1, O_prime1, addOctetSum (O2, O_prime2, Bcarry), O_second3, O_second4)
   REC_E: addBlock1 (O1, O_prime1, buildOctetSum (Bcarry, O_second2), O_second3, O_second4) -> addBlock0 (addOctetSum (O1, O_prime1, Bcarry), O_second2, O_second3, O_second4)
   REC_E: addBlock0 (buildOctetSum (Bcarry, O_second1), O_second2, O_second3, O_second4) -> buildBlockSum (Bcarry, buildBlock (O_second1, O_second2, O_second3, O_second4))
   REC_E: dropCarryBlockSum (buildBlockSum (Bcarry, W)) -> W
   REC_E: addBlock (W, W_prime) -> dropCarryBlockSum (addBlockSum (W, W_prime))
   REC_E: addBlockHalf (buildHalf (O1, O2), W) -> addBlock (buildBlock (x00(), x00(), O1, O2), W)
   REC_E: addBlockHalves (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) -> addBlock (buildBlock (x00(), x00(), O1, O2), buildBlock (x00(), x00(), O_prime1, O_prime2))
   REC_E: leftOctet1 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B2, B3, B4, B5, B6, B7, B8, x0())
   REC_E: leftOctet2 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B3, B4, B5, B6, B7, B8, x0(), x0())
   REC_E: leftOctet3 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B4, B5, B6, B7, B8, x0(), x0(), x0())
   REC_E: leftOctet4 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B5, B6, B7, B8, x0(), x0(), x0(), x0())
   REC_E: leftOctet5 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B6, B7, B8, x0(), x0(), x0(), x0(), x0())
   REC_E: leftOctet6 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B7, B8, x0(), x0(), x0(), x0(), x0(), x0())
   REC_E: leftOctet7 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B8, x0(), x0(), x0(), x0(), x0(), x0(), x0())
   REC_E: rightOctet1 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0(), B1, B2, B3, B4, B5, B6, B7)
   REC_E: rightOctet2 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0(), x0(), B1, B2, B3, B4, B5, B6)
   REC_E: rightOctet3 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0(), x0(), x0(), B1, B2, B3, B4, B5)
   REC_E: rightOctet4 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0(), x0(), x0(), x0(), B1, B2, B3, B4)
   REC_E: rightOctet5 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0(), x0(), x0(), x0(), x0(), B1, B2, B3)
   REC_E: rightOctet6 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0(), x0(), x0(), x0(), x0(), x0(), B1, B2)
   REC_E: rightOctet7 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0(), x0(), x0(), x0(), x0(), x0(), x0(), B1)
   REC_E: mulOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), O_prime) -> mulOctet1 (B1, B2, B3, B4, B5, B6, B7, B8, O_prime, x0000())
   REC_E: mulOctet1 (x0(), B2, B3, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O_prime, H)
   REC_E: mulOctet1 (x1(), B2, B3, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet1 (O_prime), leftOctet7 (O_prime)))
   REC_E: mulOctet2 (x0(), B3, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet3 (B3, B4, B5, B6, B7, B8, O_prime, H)
   REC_E: mulOctet2 (x1(), B3, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet3 (B3, B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet2 (O_prime), leftOctet6 (O_prime)))
   REC_E: mulOctet3 (x0(), B4, B5, B6, B7, B8, O_prime, H) -> mulOctet4 (B4, B5, B6, B7, B8, O_prime, H)
   REC_E: mulOctet3 (x1(), B4, B5, B6, B7, B8, O_prime, H) -> mulOctet4 (B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet3 (O_prime), leftOctet5 (O_prime)))
   REC_E: mulOctet4 (x0(), B5, B6, B7, B8, O_prime, H) -> mulOctet5 (B5, B6, B7, B8, O_prime, H)
   REC_E: mulOctet4 (x1(), B5, B6, B7, B8, O_prime, H) -> mulOctet5 (B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet4 (O_prime), leftOctet4 (O_prime)))
   REC_E: mulOctet5 (x0(), B6, B7, B8, O_prime, H) -> mulOctet6 (B6, B7, B8, O_prime, H)
   REC_E: mulOctet5 (x1(), B6, B7, B8, O_prime, H) -> mulOctet6 (B6, B7, B8, O_prime, mulOctetA (H, rightOctet5 (O_prime), leftOctet3 (O_prime)))
   REC_E: mulOctet6 (x0(), B7, B8, O_prime, H) -> mulOctet7 (B7, B8, O_prime, H)
   REC_E: mulOctet6 (x1(), B7, B8, O_prime, H) -> mulOctet7 (B7, B8, O_prime, mulOctetA (H, rightOctet6 (O_prime), leftOctet2 (O_prime)))
   REC_E: mulOctet7 (x0(), B8, O_prime, H) -> mulOctet8 (B8, O_prime, H)
   REC_E: mulOctet7 (x1(), B8, O_prime, H) -> mulOctet8 (B8, O_prime, mulOctetA (H, rightOctet7 (O_prime), leftOctet1 (O_prime)))
   REC_E: mulOctet8 (x0(), O_prime, H) -> H
   REC_E: mulOctet8 (x1(), O_prime, H) -> mulOctetA (H, x00(), O_prime)
   REC_E: mulOctetA (buildHalf (O1, O2), O_prime1, O_prime2) -> mulOctetB (addOctet (O1, O_prime1), addOctetSum (O2, O_prime2, x0()))
   REC_E: mulOctetB (O1, buildOctetSum (x0(), O2)) -> buildHalf (O1, O2)
   REC_E: mulOctetB (O1, buildOctetSum (x1(), O2)) -> buildHalf (addOctet (O1, x01()), O2)
   REC_E: mulHalf (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) -> mulHalfA (mulOctet (O1, O_prime1), mulOctet (O1, O_prime2), mulOctet (O2, O_prime1), mulOctet (O2, O_prime2))
   REC_E: mulHalfA (buildHalf (O11U, O11L), buildHalf (O12U, O12L), buildHalf (O21U, O21L), buildHalf (O22U, O22L)) -> mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L, O22U, O22L)
   REC_E: mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L, O22U, O_second4) -> mulHalf3 (O11U, O11L, O12U, O21U, addHalfOctet (O12L, addHalfOctets (O21L, O22U)), O_second4)
   REC_E: mulHalf3 (O11U, O11L, O12U, O21U, buildHalf (Ocarry, O_second3), O_second4) -> mulHalf2 (O11U, addHalfOctet (Ocarry, addHalfOctet (O11L, addHalfOctets (O12U, O21U))), O_second3, O_second4)
   REC_E: mulHalf2 (O11U, buildHalf (Ocarry, O_second2), O_second3, O_second4) -> mulHalf1 (addHalfOctets (Ocarry, O11U), O_second2, O_second3, O_second4)
   REC_E: mulHalf1 (buildHalf (Ocarry, O_second1), O_second2, O_second3, O_second4) -> buildBlock (O_second1, O_second2, O_second3, O_second4)
   REC_E: mulBlock (W1, W2) -> mulBlockA (mulHalf (HalfU (W1), HalfU (W2)), mulHalf (HalfU (W1), HalfL (W2)), mulHalf (HalfL (W1), HalfU (W2)), mulHalf (HalfL (W1), HalfL (W2)))
   REC_E: mulBlockA (W11, W12, W21, W22) -> mulBlock4 (HalfU (W11), HalfL (W11), HalfU (W12), HalfL (W12), HalfU (W21), HalfL (W21), HalfU (W22), HalfL (W22))
   REC_E: mulBlock4 (H11U, H11L, H12U, H12L, H21U, H21L, H22U, H_second4) -> mulBlock3 (H11U, H11L, H12U, H21U, addBlockHalf (H12L, addBlockHalves (H21L, H22U)), H_second4)
   REC_E: mulBlock3 (H11U, H11L, H12U, H21U, W, H_second4) -> mulBlock2 (H11U, addBlockHalf (HalfU (W), addBlockHalf (H11L, addBlockHalves (H12U, H21U))), HalfL (W), H_second4)
   REC_E: mulBlock2 (H11U, W, H_second3, H_second4) -> mulBlock1 (addBlockHalves (HalfU (W), H11U), HalfL (W), H_second3, H_second4)
   REC_E: mulBlock1 (W, H_second2, H_second3, H_second4) -> mulBlockB (HalfL (W), H_second2, H_second3, H_second4)
   REC_E: mulBlockB (buildHalf (O1U, O1L), buildHalf (O2U, O2L), buildHalf (O3U, O3L), buildHalf (O4U, O4L)) -> buildPair (buildBlock (O1U, O1L, O2U, O2L), buildBlock (O3U, O3L, O4U, O4L))
   REC_E: addNat (N, zero()) -> N
   REC_E: addNat (N, succ (N_prime)) -> addNat (succ (N), N_prime)
   REC_E: multNat (N, zero()) -> zero()
   REC_E: multNat (N, succ (N_prime)) -> addNat (N, multNat (N, N_prime))
   REC_E: eqNat (zero(), zero()) -> true()
   REC_E: eqNat (zero(), succ (N_prime)) -> false()
   REC_E: eqNat (succ (N), zero()) -> false()
   REC_E: eqNat (succ (N), succ (N_prime)) -> eqNat (N, N_prime)
   REC_E: ltNat (zero(), zero()) -> false()
   REC_E: ltNat (zero(), succ (N_prime)) -> true()
   REC_E: ltNat (succ (N_prime), zero()) -> false()
   REC_E: ltNat (succ (N), succ (N_prime)) -> ltNat (N, N_prime)
   REC_E: n1() -> succ (zero())
   REC_E: n2() -> succ (n1())
   REC_E: n3() -> succ (n2())
   REC_E: n4() -> succ (n3())
   REC_E: n5() -> succ (n4())
   REC_E: n6() -> succ (n5())
   REC_E: n7() -> succ (n6())
   REC_E: n8() -> succ (n7())
   REC_E: n9() -> succ (n8())
   REC_E: n10() -> succ (n9())
   REC_E: n11() -> succ (n10())
   REC_E: n12() -> succ (n11())
   REC_E: n13() -> succ (n12())
   REC_E: n14() -> succ (n13())
   REC_E: n15() -> succ (n14())
   REC_E: n16() -> succ (n15())
   REC_E: n17() -> succ (n16())
   REC_E: n18() -> succ (n17())
   REC_E: n19() -> succ (n18())
   REC_E: n20() -> succ (n19())
   REC_E: n21() -> succ (n20())
   REC_E: n22() -> succ (n21())
   REC_E: n254() -> addNat (n12(), multNat (n11(), n22()))
   REC_E: n256() -> multNat (n16(), n16())
   REC_E: n4100() -> addNat (n4(), multNat (n16(), n256()))
   REC_E: andOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) -> buildOctet (andBit (B1, B_prime1), andBit (B2, B_prime2), andBit (B3, B_prime3), andBit (B4, B_prime4), andBit (B5, B_prime5), andBit (B6, B_prime6), andBit (B7, B_prime7), andBit (B8, B_prime8))
   REC_E: orOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) -> buildOctet (orBit (B1, B_prime1), orBit (B2, B_prime2), orBit (B3, B_prime3), orBit (B4, B_prime4), orBit (B5, B_prime5), orBit (B6, B_prime6), orBit (B7, B_prime7), orBit (B8, B_prime8))
   REC_E: xorOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) -> buildOctet (xorBit (B1, B_prime1), xorBit (B2, B_prime2), xorBit (B3, B_prime3), xorBit (B4, B_prime4), xorBit (B5, B_prime5), xorBit (B6, B_prime6), xorBit (B7, B_prime7), xorBit (B8, B_prime8))
   REC_E: x02() -> buildOctet (x0(), x0(), x0(), x0(), x0(), x0(), x1(), x0())
   REC_E: x03() -> buildOctet (x0(), x0(), x0(), x0(), x0(), x0(), x1(), x1())
   REC_E: x04() -> buildOctet (x0(), x0(), x0(), x0(), x0(), x1(), x0(), x0())
   REC_E: x05() -> buildOctet (x0(), x0(), x0(), x0(), x0(), x1(), x0(), x1())
   REC_E: x06() -> buildOctet (x0(), x0(), x0(), x0(), x0(), x1(), x1(), x0())
   REC_E: x07() -> buildOctet (x0(), x0(), x0(), x0(), x0(), x1(), x1(), x1())
   REC_E: x08() -> buildOctet (x0(), x0(), x0(), x0(), x1(), x0(), x0(), x0())
   REC_E: x09() -> buildOctet (x0(), x0(), x0(), x0(), x1(), x0(), x0(), x1())
   REC_E: x0A() -> buildOctet (x0(), x0(), x0(), x0(), x1(), x0(), x1(), x0())
   REC_E: x0B() -> buildOctet (x0(), x0(), x0(), x0(), x1(), x0(), x1(), x1())
   REC_E: x0C() -> buildOctet (x0(), x0(), x0(), x0(), x1(), x1(), x0(), x0())
   REC_E: x0D() -> buildOctet (x0(), x0(), x0(), x0(), x1(), x1(), x0(), x1())
   REC_E: x0E() -> buildOctet (x0(), x0(), x0(), x0(), x1(), x1(), x1(), x0())
   REC_E: x0F() -> buildOctet (x0(), x0(), x0(), x0(), x1(), x1(), x1(), x1())
   REC_E: x10() -> buildOctet (x0(), x0(), x0(), x1(), x0(), x0(), x0(), x0())
   REC_E: x11() -> buildOctet (x0(), x0(), x0(), x1(), x0(), x0(), x0(), x1())
   REC_E: x12() -> buildOctet (x0(), x0(), x0(), x1(), x0(), x0(), x1(), x0())
   REC_E: x13() -> buildOctet (x0(), x0(), x0(), x1(), x0(), x0(), x1(), x1())
   REC_E: x14() -> buildOctet (x0(), x0(), x0(), x1(), x0(), x1(), x0(), x0())
   REC_E: x15() -> buildOctet (x0(), x0(), x0(), x1(), x0(), x1(), x0(), x1())
   REC_E: x16() -> buildOctet (x0(), x0(), x0(), x1(), x0(), x1(), x1(), x0())
   REC_E: x17() -> buildOctet (x0(), x0(), x0(), x1(), x0(), x1(), x1(), x1())
   REC_E: x18() -> buildOctet (x0(), x0(), x0(), x1(), x1(), x0(), x0(), x0())
   REC_E: x1A() -> buildOctet (x0(), x0(), x0(), x1(), x1(), x0(), x1(), x0())
   REC_E: x1B() -> buildOctet (x0(), x0(), x0(), x1(), x1(), x0(), x1(), x1())
   REC_E: x1C() -> buildOctet (x0(), x0(), x0(), x1(), x1(), x1(), x0(), x0())
   REC_E: x1D() -> buildOctet (x0(), x0(), x0(), x1(), x1(), x1(), x0(), x1())
   REC_E: x1E() -> buildOctet (x0(), x0(), x0(), x1(), x1(), x1(), x1(), x0())
   REC_E: x1F() -> buildOctet (x0(), x0(), x0(), x1(), x1(), x1(), x1(), x1())
   REC_E: x20() -> buildOctet (x0(), x0(), x1(), x0(), x0(), x0(), x0(), x0())
   REC_E: x21() -> buildOctet (x0(), x0(), x1(), x0(), x0(), x0(), x0(), x1())
   REC_E: x23() -> buildOctet (x0(), x0(), x1(), x0(), x0(), x0(), x1(), x1())
   REC_E: x24() -> buildOctet (x0(), x0(), x1(), x0(), x0(), x1(), x0(), x0())
   REC_E: x25() -> buildOctet (x0(), x0(), x1(), x0(), x0(), x1(), x0(), x1())
   REC_E: x26() -> buildOctet (x0(), x0(), x1(), x0(), x0(), x1(), x1(), x0())
   REC_E: x27() -> buildOctet (x0(), x0(), x1(), x0(), x0(), x1(), x1(), x1())
   REC_E: x28() -> buildOctet (x0(), x0(), x1(), x0(), x1(), x0(), x0(), x0())
   REC_E: x29() -> buildOctet (x0(), x0(), x1(), x0(), x1(), x0(), x0(), x1())
   REC_E: x2A() -> buildOctet (x0(), x0(), x1(), x0(), x1(), x0(), x1(), x0())
   REC_E: x2B() -> buildOctet (x0(), x0(), x1(), x0(), x1(), x0(), x1(), x1())
   REC_E: x2D() -> buildOctet (x0(), x0(), x1(), x0(), x1(), x1(), x0(), x1())
   REC_E: x2E() -> buildOctet (x0(), x0(), x1(), x0(), x1(), x1(), x1(), x0())
   REC_E: x2F() -> buildOctet (x0(), x0(), x1(), x0(), x1(), x1(), x1(), x1())
   REC_E: x30() -> buildOctet (x0(), x0(), x1(), x1(), x0(), x0(), x0(), x0())
   REC_E: x31() -> buildOctet (x0(), x0(), x1(), x1(), x0(), x0(), x0(), x1())
   REC_E: x32() -> buildOctet (x0(), x0(), x1(), x1(), x0(), x0(), x1(), x0())
   REC_E: x33() -> buildOctet (x0(), x0(), x1(), x1(), x0(), x0(), x1(), x1())
   REC_E: x34() -> buildOctet (x0(), x0(), x1(), x1(), x0(), x1(), x0(), x0())
   REC_E: x35() -> buildOctet (x0(), x0(), x1(), x1(), x0(), x1(), x0(), x1())
   REC_E: x36() -> buildOctet (x0(), x0(), x1(), x1(), x0(), x1(), x1(), x0())
   REC_E: x37() -> buildOctet (x0(), x0(), x1(), x1(), x0(), x1(), x1(), x1())
   REC_E: x38() -> buildOctet (x0(), x0(), x1(), x1(), x1(), x0(), x0(), x0())
   REC_E: x39() -> buildOctet (x0(), x0(), x1(), x1(), x1(), x0(), x0(), x1())
   REC_E: x3A() -> buildOctet (x0(), x0(), x1(), x1(), x1(), x0(), x1(), x0())
   REC_E: x3B() -> buildOctet (x0(), x0(), x1(), x1(), x1(), x0(), x1(), x1())
   REC_E: x3D() -> buildOctet (x0(), x0(), x1(), x1(), x1(), x1(), x0(), x1())
   REC_E: x3C() -> buildOctet (x0(), x0(), x1(), x1(), x1(), x1(), x0(), x0())
   REC_E: x3F() -> buildOctet (x0(), x0(), x1(), x1(), x1(), x1(), x1(), x1())
   REC_E: x40() -> buildOctet (x0(), x1(), x0(), x0(), x0(), x0(), x0(), x0())
   REC_E: x46() -> buildOctet (x0(), x1(), x0(), x0(), x0(), x1(), x1(), x0())
   REC_E: x48() -> buildOctet (x0(), x1(), x0(), x0(), x1(), x0(), x0(), x0())
   REC_E: x49() -> buildOctet (x0(), x1(), x0(), x0(), x1(), x0(), x0(), x1())
   REC_E: x4A() -> buildOctet (x0(), x1(), x0(), x0(), x1(), x0(), x1(), x0())
   REC_E: x4B() -> buildOctet (x0(), x1(), x0(), x0(), x1(), x0(), x1(), x1())
   REC_E: x4C() -> buildOctet (x0(), x1(), x0(), x0(), x1(), x1(), x0(), x0())
   REC_E: x4D() -> buildOctet (x0(), x1(), x0(), x0(), x1(), x1(), x0(), x1())
   REC_E: x4E() -> buildOctet (x0(), x1(), x0(), x0(), x1(), x1(), x1(), x0())
   REC_E: x4F() -> buildOctet (x0(), x1(), x0(), x0(), x1(), x1(), x1(), x1())
   REC_E: x50() -> buildOctet (x0(), x1(), x0(), x1(), x0(), x0(), x0(), x0())
   REC_E: x51() -> buildOctet (x0(), x1(), x0(), x1(), x0(), x0(), x0(), x1())
   REC_E: x53() -> buildOctet (x0(), x1(), x0(), x1(), x0(), x0(), x1(), x1())
   REC_E: x54() -> buildOctet (x0(), x1(), x0(), x1(), x0(), x1(), x0(), x0())
   REC_E: x55() -> buildOctet (x0(), x1(), x0(), x1(), x0(), x1(), x0(), x1())
   REC_E: x58() -> buildOctet (x0(), x1(), x0(), x1(), x1(), x0(), x0(), x0())
   REC_E: x5A() -> buildOctet (x0(), x1(), x0(), x1(), x1(), x0(), x1(), x0())
   REC_E: x5B() -> buildOctet (x0(), x1(), x0(), x1(), x1(), x0(), x1(), x1())
   REC_E: x5C() -> buildOctet (x0(), x1(), x0(), x1(), x1(), x1(), x0(), x0())
   REC_E: x5D() -> buildOctet (x0(), x1(), x0(), x1(), x1(), x1(), x0(), x1())
   REC_E: x5E() -> buildOctet (x0(), x1(), x0(), x1(), x1(), x1(), x1(), x0())
   REC_E: x5F() -> buildOctet (x0(), x1(), x0(), x1(), x1(), x1(), x1(), x1())
   REC_E: x60() -> buildOctet (x0(), x1(), x1(), x0(), x0(), x0(), x0(), x0())
   REC_E: x61() -> buildOctet (x0(), x1(), x1(), x0(), x0(), x0(), x0(), x1())
   REC_E: x62() -> buildOctet (x0(), x1(), x1(), x0(), x0(), x0(), x1(), x0())
   REC_E: x63() -> buildOctet (x0(), x1(), x1(), x0(), x0(), x0(), x1(), x1())
   REC_E: x64() -> buildOctet (x0(), x1(), x1(), x0(), x0(), x1(), x0(), x0())
   REC_E: x65() -> buildOctet (x0(), x1(), x1(), x0(), x0(), x1(), x0(), x1())
   REC_E: x66() -> buildOctet (x0(), x1(), x1(), x0(), x0(), x1(), x1(), x0())
   REC_E: x67() -> buildOctet (x0(), x1(), x1(), x0(), x0(), x1(), x1(), x1())
   REC_E: x69() -> buildOctet (x0(), x1(), x1(), x0(), x1(), x0(), x0(), x1())
   REC_E: x6A() -> buildOctet (x0(), x1(), x1(), x0(), x1(), x0(), x1(), x0())
   REC_E: x6B() -> buildOctet (x0(), x1(), x1(), x0(), x1(), x0(), x1(), x1())
   REC_E: x6C() -> buildOctet (x0(), x1(), x1(), x0(), x1(), x1(), x0(), x0())
   REC_E: x6D() -> buildOctet (x0(), x1(), x1(), x0(), x1(), x1(), x0(), x1())
   REC_E: x6E() -> buildOctet (x0(), x1(), x1(), x0(), x1(), x1(), x1(), x0())
   REC_E: x6F() -> buildOctet (x0(), x1(), x1(), x0(), x1(), x1(), x1(), x1())
   REC_E: x70() -> buildOctet (x0(), x1(), x1(), x1(), x0(), x0(), x0(), x0())
   REC_E: x71() -> buildOctet (x0(), x1(), x1(), x1(), x0(), x0(), x0(), x1())
   REC_E: x72() -> buildOctet (x0(), x1(), x1(), x1(), x0(), x0(), x1(), x0())
   REC_E: x73() -> buildOctet (x0(), x1(), x1(), x1(), x0(), x0(), x1(), x1())
   REC_E: x74() -> buildOctet (x0(), x1(), x1(), x1(), x0(), x1(), x0(), x0())
   REC_E: x75() -> buildOctet (x0(), x1(), x1(), x1(), x0(), x1(), x0(), x1())
   REC_E: x76() -> buildOctet (x0(), x1(), x1(), x1(), x0(), x1(), x1(), x0())
   REC_E: x77() -> buildOctet (x0(), x1(), x1(), x1(), x0(), x1(), x1(), x1())
   REC_E: x78() -> buildOctet (x0(), x1(), x1(), x1(), x1(), x0(), x0(), x0())
   REC_E: x79() -> buildOctet (x0(), x1(), x1(), x1(), x1(), x0(), x0(), x1())
   REC_E: x7A() -> buildOctet (x0(), x1(), x1(), x1(), x1(), x0(), x1(), x0())
   REC_E: x7B() -> buildOctet (x0(), x1(), x1(), x1(), x1(), x0(), x1(), x1())
   REC_E: x7C() -> buildOctet (x0(), x1(), x1(), x1(), x1(), x1(), x0(), x0())
   REC_E: x7D() -> buildOctet (x0(), x1(), x1(), x1(), x1(), x1(), x0(), x1())
   REC_E: x7E() -> buildOctet (x0(), x1(), x1(), x1(), x1(), x1(), x1(), x0())
   REC_E: x7F() -> buildOctet (x0(), x1(), x1(), x1(), x1(), x1(), x1(), x1())
   REC_E: x80() -> buildOctet (x1(), x0(), x0(), x0(), x0(), x0(), x0(), x0())
   REC_E: x81() -> buildOctet (x1(), x0(), x0(), x0(), x0(), x0(), x0(), x1())
   REC_E: x83() -> buildOctet (x1(), x0(), x0(), x0(), x0(), x0(), x1(), x1())
   REC_E: x84() -> buildOctet (x1(), x0(), x0(), x0(), x0(), x1(), x0(), x0())
   REC_E: x85() -> buildOctet (x1(), x0(), x0(), x0(), x0(), x1(), x0(), x1())
   REC_E: x86() -> buildOctet (x1(), x0(), x0(), x0(), x0(), x1(), x1(), x0())
   REC_E: x88() -> buildOctet (x1(), x0(), x0(), x0(), x1(), x0(), x0(), x0())
   REC_E: x89() -> buildOctet (x1(), x0(), x0(), x0(), x1(), x0(), x0(), x1())
   REC_E: x8A() -> buildOctet (x1(), x0(), x0(), x0(), x1(), x0(), x1(), x0())
   REC_E: x8C() -> buildOctet (x1(), x0(), x0(), x0(), x1(), x1(), x0(), x0())
   REC_E: x8D() -> buildOctet (x1(), x0(), x0(), x0(), x1(), x1(), x0(), x1())
   REC_E: x8E() -> buildOctet (x1(), x0(), x0(), x0(), x1(), x1(), x1(), x0())
   REC_E: x8F() -> buildOctet (x1(), x0(), x0(), x0(), x1(), x1(), x1(), x1())
   REC_E: x90() -> buildOctet (x1(), x0(), x0(), x1(), x0(), x0(), x0(), x0())
   REC_E: x91() -> buildOctet (x1(), x0(), x0(), x1(), x0(), x0(), x0(), x1())
   REC_E: x92() -> buildOctet (x1(), x0(), x0(), x1(), x0(), x0(), x1(), x0())
   REC_E: x93() -> buildOctet (x1(), x0(), x0(), x1(), x0(), x0(), x1(), x1())
   REC_E: x95() -> buildOctet (x1(), x0(), x0(), x1(), x0(), x1(), x0(), x1())
   REC_E: x96() -> buildOctet (x1(), x0(), x0(), x1(), x0(), x1(), x1(), x0())
   REC_E: x97() -> buildOctet (x1(), x0(), x0(), x1(), x0(), x1(), x1(), x1())
   REC_E: x98() -> buildOctet (x1(), x0(), x0(), x1(), x1(), x0(), x0(), x0())
   REC_E: x99() -> buildOctet (x1(), x0(), x0(), x1(), x1(), x0(), x0(), x1())
   REC_E: x9A() -> buildOctet (x1(), x0(), x0(), x1(), x1(), x0(), x1(), x0())
   REC_E: x9B() -> buildOctet (x1(), x0(), x0(), x1(), x1(), x0(), x1(), x1())
   REC_E: x9C() -> buildOctet (x1(), x0(), x0(), x1(), x1(), x1(), x0(), x0())
   REC_E: x9D() -> buildOctet (x1(), x0(), x0(), x1(), x1(), x1(), x0(), x1())
   REC_E: x9E() -> buildOctet (x1(), x0(), x0(), x1(), x1(), x1(), x1(), x0())
   REC_E: x9F() -> buildOctet (x1(), x0(), x0(), x1(), x1(), x1(), x1(), x1())
   REC_E: xA1() -> buildOctet (x1(), x0(), x1(), x0(), x0(), x0(), x0(), x1())
   REC_E: xA0() -> buildOctet (x1(), x0(), x1(), x0(), x0(), x0(), x0(), x0())
   REC_E: xA2() -> buildOctet (x1(), x0(), x1(), x0(), x0(), x0(), x1(), x0())
   REC_E: xA3() -> buildOctet (x1(), x0(), x1(), x0(), x0(), x0(), x1(), x1())
   REC_E: xA4() -> buildOctet (x1(), x0(), x1(), x0(), x0(), x1(), x0(), x0())
   REC_E: xA5() -> buildOctet (x1(), x0(), x1(), x0(), x0(), x1(), x0(), x1())
   REC_E: xA6() -> buildOctet (x1(), x0(), x1(), x0(), x0(), x1(), x1(), x0())
   REC_E: xA7() -> buildOctet (x1(), x0(), x1(), x0(), x0(), x1(), x1(), x1())
   REC_E: xA8() -> buildOctet (x1(), x0(), x1(), x0(), x1(), x0(), x0(), x0())
   REC_E: xA9() -> buildOctet (x1(), x0(), x1(), x0(), x1(), x0(), x0(), x1())
   REC_E: xAA() -> buildOctet (x1(), x0(), x1(), x0(), x1(), x0(), x1(), x0())
   REC_E: xAB() -> buildOctet (x1(), x0(), x1(), x0(), x1(), x0(), x1(), x1())
   REC_E: xAC() -> buildOctet (x1(), x0(), x1(), x0(), x1(), x1(), x0(), x0())
   REC_E: xAE() -> buildOctet (x1(), x0(), x1(), x0(), x1(), x1(), x1(), x0())
   REC_E: xAF() -> buildOctet (x1(), x0(), x1(), x0(), x1(), x1(), x1(), x1())
   REC_E: xB0() -> buildOctet (x1(), x0(), x1(), x1(), x0(), x0(), x0(), x0())
   REC_E: xB1() -> buildOctet (x1(), x0(), x1(), x1(), x0(), x0(), x0(), x1())
   REC_E: xB2() -> buildOctet (x1(), x0(), x1(), x1(), x0(), x0(), x1(), x0())
   REC_E: xB3() -> buildOctet (x1(), x0(), x1(), x1(), x0(), x0(), x1(), x1())
   REC_E: xB5() -> buildOctet (x1(), x0(), x1(), x1(), x0(), x1(), x0(), x1())
   REC_E: xB6() -> buildOctet (x1(), x0(), x1(), x1(), x0(), x1(), x1(), x0())
   REC_E: xB8() -> buildOctet (x1(), x0(), x1(), x1(), x1(), x0(), x0(), x0())
   REC_E: xB9() -> buildOctet (x1(), x0(), x1(), x1(), x1(), x0(), x0(), x1())
   REC_E: xBA() -> buildOctet (x1(), x0(), x1(), x1(), x1(), x0(), x1(), x0())
   REC_E: xBB() -> buildOctet (x1(), x0(), x1(), x1(), x1(), x0(), x1(), x1())
   REC_E: xBC() -> buildOctet (x1(), x0(), x1(), x1(), x1(), x1(), x0(), x0())
   REC_E: xBE() -> buildOctet (x1(), x0(), x1(), x1(), x1(), x1(), x1(), x0())
   REC_E: xBF() -> buildOctet (x1(), x0(), x1(), x1(), x1(), x1(), x1(), x1())
   REC_E: xC0() -> buildOctet (x1(), x1(), x0(), x0(), x0(), x0(), x0(), x0())
   REC_E: xC1() -> buildOctet (x1(), x1(), x0(), x0(), x0(), x0(), x0(), x1())
   REC_E: xC2() -> buildOctet (x1(), x1(), x0(), x0(), x0(), x0(), x1(), x0())
   REC_E: xC4() -> buildOctet (x1(), x1(), x0(), x0(), x0(), x1(), x0(), x0())
   REC_E: xC5() -> buildOctet (x1(), x1(), x0(), x0(), x0(), x1(), x0(), x1())
   REC_E: xC6() -> buildOctet (x1(), x1(), x0(), x0(), x0(), x1(), x1(), x0())
   REC_E: xC7() -> buildOctet (x1(), x1(), x0(), x0(), x0(), x1(), x1(), x1())
   REC_E: xC8() -> buildOctet (x1(), x1(), x0(), x0(), x1(), x0(), x0(), x0())
   REC_E: xC9() -> buildOctet (x1(), x1(), x0(), x0(), x1(), x0(), x0(), x1())
   REC_E: xCA() -> buildOctet (x1(), x1(), x0(), x0(), x1(), x0(), x1(), x0())
   REC_E: xCB() -> buildOctet (x1(), x1(), x0(), x0(), x1(), x0(), x1(), x1())
   REC_E: xCC() -> buildOctet (x1(), x1(), x0(), x0(), x1(), x1(), x0(), x0())
   REC_E: xCD() -> buildOctet (x1(), x1(), x0(), x0(), x1(), x1(), x0(), x1())
   REC_E: xCE() -> buildOctet (x1(), x1(), x0(), x0(), x1(), x1(), x1(), x0())
   REC_E: xD0() -> buildOctet (x1(), x1(), x0(), x1(), x0(), x0(), x0(), x0())
   REC_E: xD1() -> buildOctet (x1(), x1(), x0(), x1(), x0(), x0(), x0(), x1())
   REC_E: xD2() -> buildOctet (x1(), x1(), x0(), x1(), x0(), x0(), x1(), x0())
   REC_E: xD3() -> buildOctet (x1(), x1(), x0(), x1(), x0(), x0(), x1(), x1())
   REC_E: xD4() -> buildOctet (x1(), x1(), x0(), x1(), x0(), x1(), x0(), x0())
   REC_E: xD5() -> buildOctet (x1(), x1(), x0(), x1(), x0(), x1(), x0(), x1())
   REC_E: xD6() -> buildOctet (x1(), x1(), x0(), x1(), x0(), x1(), x1(), x0())
   REC_E: xD7() -> buildOctet (x1(), x1(), x0(), x1(), x0(), x1(), x1(), x1())
   REC_E: xD8() -> buildOctet (x1(), x1(), x0(), x1(), x1(), x0(), x0(), x0())
   REC_E: xD9() -> buildOctet (x1(), x1(), x0(), x1(), x1(), x0(), x0(), x1())
   REC_E: xDB() -> buildOctet (x1(), x1(), x0(), x1(), x1(), x0(), x1(), x1())
   REC_E: xDC() -> buildOctet (x1(), x1(), x0(), x1(), x1(), x1(), x0(), x0())
   REC_E: xDD() -> buildOctet (x1(), x1(), x0(), x1(), x1(), x1(), x0(), x1())
   REC_E: xDE() -> buildOctet (x1(), x1(), x0(), x1(), x1(), x1(), x1(), x0())
   REC_E: xDF() -> buildOctet (x1(), x1(), x0(), x1(), x1(), x1(), x1(), x1())
   REC_E: xE0() -> buildOctet (x1(), x1(), x1(), x0(), x0(), x0(), x0(), x0())
   REC_E: xE1() -> buildOctet (x1(), x1(), x1(), x0(), x0(), x0(), x0(), x1())
   REC_E: xE3() -> buildOctet (x1(), x1(), x1(), x0(), x0(), x0(), x1(), x1())
   REC_E: xE6() -> buildOctet (x1(), x1(), x1(), x0(), x0(), x1(), x1(), x0())
   REC_E: xE8() -> buildOctet (x1(), x1(), x1(), x0(), x1(), x0(), x0(), x0())
   REC_E: xE9() -> buildOctet (x1(), x1(), x1(), x0(), x1(), x0(), x0(), x1())
   REC_E: xEA() -> buildOctet (x1(), x1(), x1(), x0(), x1(), x0(), x1(), x0())
   REC_E: xEB() -> buildOctet (x1(), x1(), x1(), x0(), x1(), x0(), x1(), x1())
   REC_E: xEC() -> buildOctet (x1(), x1(), x1(), x0(), x1(), x1(), x0(), x0())
   REC_E: xED() -> buildOctet (x1(), x1(), x1(), x0(), x1(), x1(), x0(), x1())
   REC_E: xEE() -> buildOctet (x1(), x1(), x1(), x0(), x1(), x1(), x1(), x0())
   REC_E: xEF() -> buildOctet (x1(), x1(), x1(), x0(), x1(), x1(), x1(), x1())
   REC_E: xF0() -> buildOctet (x1(), x1(), x1(), x1(), x0(), x0(), x0(), x0())
   REC_E: xF1() -> buildOctet (x1(), x1(), x1(), x1(), x0(), x0(), x0(), x1())
   REC_E: xF2() -> buildOctet (x1(), x1(), x1(), x1(), x0(), x0(), x1(), x0())
   REC_E: xF3() -> buildOctet (x1(), x1(), x1(), x1(), x0(), x0(), x1(), x1())
   REC_E: xF4() -> buildOctet (x1(), x1(), x1(), x1(), x0(), x1(), x0(), x0())
   REC_E: xF5() -> buildOctet (x1(), x1(), x1(), x1(), x0(), x1(), x0(), x1())
   REC_E: xF6() -> buildOctet (x1(), x1(), x1(), x1(), x0(), x1(), x1(), x0())
   REC_E: xF7() -> buildOctet (x1(), x1(), x1(), x1(), x0(), x1(), x1(), x1())
   REC_E: xF8() -> buildOctet (x1(), x1(), x1(), x1(), x1(), x0(), x0(), x0())
   REC_E: xF9() -> buildOctet (x1(), x1(), x1(), x1(), x1(), x0(), x0(), x1())
   REC_E: xFA() -> buildOctet (x1(), x1(), x1(), x1(), x1(), x0(), x1(), x0())
   REC_E: xFB() -> buildOctet (x1(), x1(), x1(), x1(), x1(), x0(), x1(), x1())
   REC_E: xFC() -> buildOctet (x1(), x1(), x1(), x1(), x1(), x1(), x0(), x0())
   REC_E: xFD() -> buildOctet (x1(), x1(), x1(), x1(), x1(), x1(), x0(), x1())
   REC_E: xFE() -> buildOctet (x1(), x1(), x1(), x1(), x1(), x1(), x1(), x0())
   REC_E: xFF() -> buildOctet (x1(), x1(), x1(), x1(), x1(), x1(), x1(), x1())
   REC_E: andBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> buildBlock (andOctet (O1, O_prime1), andOctet (O2, O_prime2), andOctet (O3, O_prime3), andOctet (O4, O_prime4))
   REC_E: orBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> buildBlock (orOctet (O1, O_prime1), orOctet (O2, O_prime2), orOctet (O3, O_prime3), orOctet (O4, O_prime4))
   REC_E: xorBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> buildBlock (xorOctet (O1, O_prime1), xorOctet (O2, O_prime2), xorOctet (O3, O_prime3), xorOctet (O4, O_prime4))
   REC_E: x0001() -> buildHalf (x00(), x01())
   REC_E: x00000000() -> buildBlock (x00(), x00(), x00(), x00())
   REC_E: x00000001() -> buildBlock (x00(), x00(), x00(), x01())
   REC_E: x00000002() -> buildBlock (x00(), x00(), x00(), x02())
   REC_E: x00000003() -> buildBlock (x00(), x00(), x00(), x03())
   REC_E: x00000004() -> buildBlock (x00(), x00(), x00(), x04())
   REC_E: x00000005() -> buildBlock (x00(), x00(), x00(), x05())
   REC_E: x00000006() -> buildBlock (x00(), x00(), x00(), x06())
   REC_E: x00000007() -> buildBlock (x00(), x00(), x00(), x07())
   REC_E: x00000008() -> buildBlock (x00(), x00(), x00(), x08())
   REC_E: x00000009() -> buildBlock (x00(), x00(), x00(), x09())
   REC_E: x0000000A() -> buildBlock (x00(), x00(), x00(), x0A())
   REC_E: x0000000B() -> buildBlock (x00(), x00(), x00(), x0B())
   REC_E: x0000000C() -> buildBlock (x00(), x00(), x00(), x0C())
   REC_E: x0000000D() -> buildBlock (x00(), x00(), x00(), x0D())
   REC_E: x0000000E() -> buildBlock (x00(), x00(), x00(), x0E())
   REC_E: x0000000F() -> buildBlock (x00(), x00(), x00(), x0F())
   REC_E: x00000010() -> buildBlock (x00(), x00(), x00(), x10())
   REC_E: x00000012() -> buildBlock (x00(), x00(), x00(), x12())
   REC_E: x00000014() -> buildBlock (x00(), x00(), x00(), x14())
   REC_E: x00000016() -> buildBlock (x00(), x00(), x00(), x16())
   REC_E: x00000018() -> buildBlock (x00(), x00(), x00(), x18())
   REC_E: x0000001B() -> buildBlock (x00(), x00(), x00(), x1B())
   REC_E: x0000001D() -> buildBlock (x00(), x00(), x00(), x1D())
   REC_E: x0000001E() -> buildBlock (x00(), x00(), x00(), x1E())
   REC_E: x0000001F() -> buildBlock (x00(), x00(), x00(), x1F())
   REC_E: x00000031() -> buildBlock (x00(), x00(), x00(), x31())
   REC_E: x00000036() -> buildBlock (x00(), x00(), x00(), x36())
   REC_E: x00000060() -> buildBlock (x00(), x00(), x00(), x60())
   REC_E: x00000080() -> buildBlock (x00(), x00(), x00(), x80())
   REC_E: x000000A5() -> buildBlock (x00(), x00(), x00(), xA5())
   REC_E: x000000B6() -> buildBlock (x00(), x00(), x00(), xB6())
   REC_E: x000000C4() -> buildBlock (x00(), x00(), x00(), xC4())
   REC_E: x000000D2() -> buildBlock (x00(), x00(), x00(), xD2())
   REC_E: x00000100() -> buildBlock (x00(), x00(), x01(), x00())
   REC_E: x00000129() -> buildBlock (x00(), x00(), x01(), x29())
   REC_E: x0000018C() -> buildBlock (x00(), x00(), x01(), x8C())
   REC_E: x00004000() -> buildBlock (x00(), x00(), x40(), x00())
   REC_E: x00010000() -> buildBlock (x00(), x01(), x00(), x00())
   REC_E: x00020000() -> buildBlock (x00(), x02(), x00(), x00())
   REC_E: x00030000() -> buildBlock (x00(), x03(), x00(), x00())
   REC_E: x00040000() -> buildBlock (x00(), x04(), x00(), x00())
   REC_E: x00060000() -> buildBlock (x00(), x06(), x00(), x00())
   REC_E: x00804021() -> buildBlock (x00(), x80(), x40(), x21())
   REC_E: x00FF00FF() -> buildBlock (x00(), xFF(), x00(), xFF())
   REC_E: x0103050B() -> buildBlock (x01(), x03(), x05(), x0B())
   REC_E: x01030703() -> buildBlock (x01(), x03(), x07(), x03())
   REC_E: x01030705() -> buildBlock (x01(), x03(), x07(), x05())
   REC_E: x0103070F() -> buildBlock (x01(), x03(), x07(), x0F())
   REC_E: x02040801() -> buildBlock (x02(), x04(), x08(), x01())
   REC_E: x0297AF6F() -> buildBlock (x02(), x97(), xAF(), x6F())
   REC_E: x07050301() -> buildBlock (x07(), x05(), x03(), x01())
   REC_E: x077788A2() -> buildBlock (x07(), x77(), x88(), xA2())
   REC_E: x07C72EAA() -> buildBlock (x07(), xC7(), x2E(), xAA())
   REC_E: x0A202020() -> buildBlock (x0A(), x20(), x20(), x20())
   REC_E: x0AD67E20() -> buildBlock (x0A(), xD6(), x7E(), x20())
   REC_E: x10000000() -> buildBlock (x10(), x00(), x00(), x00())
   REC_E: x11A9D254() -> buildBlock (x11(), xA9(), xD2(), x54())
   REC_E: x11AC46B8() -> buildBlock (x11(), xAC(), x46(), xB8())
   REC_E: x1277A6D4() -> buildBlock (x12(), x77(), xA6(), xD4())
   REC_E: x13647149() -> buildBlock (x13(), x64(), x71(), x49())
   REC_E: x160EE9B5() -> buildBlock (x16(), x0E(), xE9(), xB5())
   REC_E: x17065DBB() -> buildBlock (x17(), x06(), x5D(), xBB())
   REC_E: x17A808FD() -> buildBlock (x17(), xA8(), x08(), xFD())
   REC_E: x1D10D8D3() -> buildBlock (x1D(), x10(), xD8(), xD3())
   REC_E: x1D3B7760() -> buildBlock (x1D(), x3B(), x77(), x60())
   REC_E: x1D9C9655() -> buildBlock (x1D(), x9C(), x96(), x55())
   REC_E: x1F3F7FFF() -> buildBlock (x1F(), x3F(), x7F(), xFF())
   REC_E: x204E80A7() -> buildBlock (x20(), x4E(), x80(), xA7())
   REC_E: x21D869BA() -> buildBlock (x21(), xD8(), x69(), xBA())
   REC_E: x24B66FB5() -> buildBlock (x24(), xB6(), x6F(), xB5())
   REC_E: x270EEDAF() -> buildBlock (x27(), x0E(), xED(), xAF())
   REC_E: x277B4B25() -> buildBlock (x27(), x7B(), x4B(), x25())
   REC_E: x2829040B() -> buildBlock (x28(), x29(), x04(), x0B())
   REC_E: x288FC786() -> buildBlock (x28(), x8F(), xC7(), x86())
   REC_E: x28EAD8B3() -> buildBlock (x28(), xEA(), xD8(), xB3())
   REC_E: x29907CD8() -> buildBlock (x29(), x90(), x7C(), xD8())
   REC_E: x29C1485F() -> buildBlock (x29(), xC1(), x48(), x5F())
   REC_E: x29EEE96B() -> buildBlock (x29(), xEE(), xE9(), x6B())
   REC_E: x2A6091AE() -> buildBlock (x2A(), x60(), x91(), xAE())
   REC_E: x2BF8499A() -> buildBlock (x2B(), xF8(), x49(), x9A())
   REC_E: x2E80AC30() -> buildBlock (x2E(), x80(), xAC(), x30())
   REC_E: x2FD76FFB() -> buildBlock (x2F(), xD7(), x6F(), xFB())
   REC_E: x30261492() -> buildBlock (x30(), x26(), x14(), x92())
   REC_E: x303FF4AA() -> buildBlock (x30(), x3F(), xF4(), xAA())
   REC_E: x33D5A466() -> buildBlock (x33(), xD5(), xA4(), x66())
   REC_E: x344925FC() -> buildBlock (x34(), x49(), x25(), xFC())
   REC_E: x34ACF886() -> buildBlock (x34(), xAC(), xF8(), x86())
   REC_E: x3CD54DEB() -> buildBlock (x3C(), xD5(), x4D(), xEB())
   REC_E: x3CF3A7D2() -> buildBlock (x3C(), xF3(), xA7(), xD2())
   REC_E: x3DD81AC6() -> buildBlock (x3D(), xD8(), x1A(), xC6())
   REC_E: x3F6F7248() -> buildBlock (x3F(), x6F(), x72(), x48())
   REC_E: x48B204D6() -> buildBlock (x48(), xB2(), x04(), xD6())
   REC_E: x4A645A01() -> buildBlock (x4A(), x64(), x5A(), x01())
   REC_E: x4C49AAE0() -> buildBlock (x4C(), x49(), xAA(), xE0())
   REC_E: x4CE933E1() -> buildBlock (x4C(), xE9(), x33(), xE1())
   REC_E: x4D53901A() -> buildBlock (x4D(), x53(), x90(), x1A())
   REC_E: x4DA124A1() -> buildBlock (x4D(), xA1(), x24(), xA1())
   REC_E: x4F998E01() -> buildBlock (x4F(), x99(), x8E(), x01())
   REC_E: x4FB1138A() -> buildBlock (x4F(), xB1(), x13(), x8A())
   REC_E: x50DEC930() -> buildBlock (x50(), xDE(), xC9(), x30())
   REC_E: x51AF3C1D() -> buildBlock (x51(), xAF(), x3C(), x1D())
   REC_E: x51EDE9C7() -> buildBlock (x51(), xED(), xE9(), xC7())
   REC_E: x550D91CE() -> buildBlock (x55(), x0D(), x91(), xCE())
   REC_E: x55555555() -> buildBlock (x55(), x55(), x55(), x55())
   REC_E: x55DD063F() -> buildBlock (x55(), xDD(), x06(), x3F())
   REC_E: x5834A585() -> buildBlock (x58(), x34(), xA5(), x85())
   REC_E: x5A35D667() -> buildBlock (x5A(), x35(), xD6(), x67())
   REC_E: x5BC02502() -> buildBlock (x5B(), xC0(), x25(), x02())
   REC_E: x5CCA3239() -> buildBlock (x5C(), xCA(), x32(), x39())
   REC_E: x5EBA06C2() -> buildBlock (x5E(), xBA(), x06(), xC2())
   REC_E: x5F38EEF1() -> buildBlock (x5F(), x38(), xEE(), xF1())
   REC_E: x613F8E2A() -> buildBlock (x61(), x3F(), x8E(), x2A())
   REC_E: x63C70DBA() -> buildBlock (x63(), xC7(), x0D(), xBA())
   REC_E: x6AD6E8A4() -> buildBlock (x6A(), xD6(), xE8(), xA4())
   REC_E: x6AEBACF8() -> buildBlock (x6A(), xEB(), xAC(), xF8())
   REC_E: x6D67E884() -> buildBlock (x6D(), x67(), xE8(), x84())
   REC_E: x7050EC5E() -> buildBlock (x70(), x50(), xEC(), x5E())
   REC_E: x717153D5() -> buildBlock (x71(), x71(), x53(), xD5())
   REC_E: x7201F4DC() -> buildBlock (x72(), x01(), xF4(), xDC())
   REC_E: x7397C9AE() -> buildBlock (x73(), x97(), xC9(), xAE())
   REC_E: x74B39176() -> buildBlock (x74(), xB3(), x91(), x76())
   REC_E: x76232E5F() -> buildBlock (x76(), x23(), x2E(), x5F())
   REC_E: x7783C51D() -> buildBlock (x77(), x83(), xC5(), x1D())
   REC_E: x7792F9D4() -> buildBlock (x77(), x92(), xF9(), xD4())
   REC_E: x7BC180AB() -> buildBlock (x7B(), xC1(), x80(), xAB())
   REC_E: x7DB2D9F4() -> buildBlock (x7D(), xB2(), xD9(), xF4())
   REC_E: x7DFEFBFF() -> buildBlock (x7D(), xFE(), xFB(), xFF())
   REC_E: x7F76A3B0() -> buildBlock (x7F(), x76(), xA3(), xB0())
   REC_E: x7F839576() -> buildBlock (x7F(), x83(), x95(), x76())
   REC_E: x7FFFFFF0() -> buildBlock (x7F(), xFF(), xFF(), xF0())
   REC_E: x7FFFFFF1() -> buildBlock (x7F(), xFF(), xFF(), xF1())
   REC_E: x7FFFFFFC() -> buildBlock (x7F(), xFF(), xFF(), xFC())
   REC_E: x7FFFFFFD() -> buildBlock (x7F(), xFF(), xFF(), xFD())
   REC_E: x80000000() -> buildBlock (x80(), x00(), x00(), x00())
   REC_E: x80000002() -> buildBlock (x80(), x00(), x00(), x02())
   REC_E: x800000C2() -> buildBlock (x80(), x00(), x00(), xC2())
   REC_E: x80018000() -> buildBlock (x80(), x01(), x80(), x00())
   REC_E: x80018001() -> buildBlock (x80(), x01(), x80(), x01())
   REC_E: x80397302() -> buildBlock (x80(), x39(), x73(), x02())
   REC_E: x81D10CA3() -> buildBlock (x81(), xD1(), x0C(), xA3())
   REC_E: x89D635D7() -> buildBlock (x89(), xD6(), x35(), xD7())
   REC_E: x8CE37709() -> buildBlock (x8C(), xE3(), x77(), x09())
   REC_E: x8DC8BBDE() -> buildBlock (x8D(), xC8(), xBB(), xDE())
   REC_E: x9115A558() -> buildBlock (x91(), x15(), xA5(), x58())
   REC_E: x91896CFA() -> buildBlock (x91(), x89(), x6C(), xFA())
   REC_E: x9372CDC6() -> buildBlock (x93(), x72(), xCD(), xC6())
   REC_E: x98D1CC75() -> buildBlock (x98(), xD1(), xCC(), x75())
   REC_E: x9D15C437() -> buildBlock (x9D(), x15(), xC4(), x37())
   REC_E: x9DB15CF6() -> buildBlock (x9D(), xB1(), x5C(), xF6())
   REC_E: x9E2E7B36() -> buildBlock (x9E(), x2E(), x7B(), x36())
   REC_E: xA018C83B() -> buildBlock (xA0(), x18(), xC8(), x3B())
   REC_E: xA0B87B77() -> buildBlock (xA0(), xB8(), x7B(), x77())
   REC_E: xA44AAAC0() -> buildBlock (xA4(), x4A(), xAA(), xC0())
   REC_E: xA511987A() -> buildBlock (xA5(), x11(), x98(), x7A())
   REC_E: xA70FC148() -> buildBlock (xA7(), x0F(), xC1(), x48())
   REC_E: xA93BD410() -> buildBlock (xA9(), x3B(), xD4(), x10())
   REC_E: xAAAAAAAA() -> buildBlock (xAA(), xAA(), xAA(), xAA())
   REC_E: xAB00FFCD() -> buildBlock (xAB(), x00(), xFF(), xCD())
   REC_E: xAB01FCCD() -> buildBlock (xAB(), x01(), xFC(), xCD())
   REC_E: xAB6EED4A() -> buildBlock (xAB(), x6E(), xED(), x4A())
   REC_E: xABEEED6B() -> buildBlock (xAB(), xEE(), xED(), x6B())
   REC_E: xACBC13DD() -> buildBlock (xAC(), xBC(), x13(), xDD())
   REC_E: xB1CC1CC5() -> buildBlock (xB1(), xCC(), x1C(), xC5())
   REC_E: xB8142629() -> buildBlock (xB8(), x14(), x26(), x29())
   REC_E: xB99A62DE() -> buildBlock (xB9(), x9A(), x62(), xDE())
   REC_E: xBA92DB12() -> buildBlock (xBA(), x92(), xDB(), x12())
   REC_E: xBBA57835() -> buildBlock (xBB(), xA5(), x78(), x35())
   REC_E: xBE9F0917() -> buildBlock (xBE(), x9F(), x09(), x17())
   REC_E: xBF2D7D85() -> buildBlock (xBF(), x2D(), x7D(), x85())
   REC_E: xBFEF7FDF() -> buildBlock (xBF(), xEF(), x7F(), xDF())
   REC_E: xC1ED90DD() -> buildBlock (xC1(), xED(), x90(), xDD())
   REC_E: xC21A1846() -> buildBlock (xC2(), x1A(), x18(), x46())
   REC_E: xC4EB1AEB() -> buildBlock (xC4(), xEB(), x1A(), xEB())
   REC_E: xC6B1317E() -> buildBlock (xC6(), xB1(), x31(), x7E())
   REC_E: xCBC865BA() -> buildBlock (xCB(), xC8(), x65(), xBA())
   REC_E: xCD959B46() -> buildBlock (xCD(), x95(), x9B(), x46())
   REC_E: xD0482465() -> buildBlock (xD0(), x48(), x24(), x65())
   REC_E: xD636250D() -> buildBlock (xD6(), x36(), x25(), x0D())
   REC_E: xD7843FDC() -> buildBlock (xD7(), x84(), x3F(), xDC())
   REC_E: xD78634BC() -> buildBlock (xD7(), x86(), x34(), xBC())
   REC_E: xD8804CA5() -> buildBlock (xD8(), x80(), x4C(), xA5())
   REC_E: xDB79FBDC() -> buildBlock (xDB(), x79(), xFB(), xDC())
   REC_E: xDB9102B0() -> buildBlock (xDB(), x91(), x02(), xB0())
   REC_E: xE0C08000() -> buildBlock (xE0(), xC0(), x80(), x00())
   REC_E: xE6A12F07() -> buildBlock (xE6(), xA1(), x2F(), x07())
   REC_E: xEB35B97F() -> buildBlock (xEB(), x35(), xB9(), x7F())
   REC_E: xF0239DD5() -> buildBlock (xF0(), x23(), x9D(), xD5())
   REC_E: xF14D6E28() -> buildBlock (xF1(), x4D(), x6E(), x28())
   REC_E: xF2EF3501() -> buildBlock (xF2(), xEF(), x35(), x01())
   REC_E: xF6A09667() -> buildBlock (xF6(), xA0(), x96(), x67())
   REC_E: xFD297DA4() -> buildBlock (xFD(), x29(), x7D(), xA4())
   REC_E: xFDC1A8BA() -> buildBlock (xFD(), xC1(), xA8(), xBA())
   REC_E: xFE4E5BDD() -> buildBlock (xFE(), x4E(), x5B(), xDD())
   REC_E: xFEA1D334() -> buildBlock (xFE(), xA1(), xD3(), x34())
   REC_E: xFECCAA6E() -> buildBlock (xFE(), xCC(), xAA(), x6E())
   REC_E: xFEFC07F0() -> buildBlock (xFE(), xFC(), x07(), xF0())
   REC_E: xFF2D7DA5() -> buildBlock (xFF(), x2D(), x7D(), xA5())
   REC_E: xFFEF0001() -> buildBlock (xFF(), xEF(), x00(), x01())
   REC_E: xFFFF00FF() -> buildBlock (xFF(), xFF(), x00(), xFF())
   REC_E: xFFFFFF2D() -> buildBlock (xFF(), xFF(), xFF(), x2D())
   REC_E: xFFFFFF3A() -> buildBlock (xFF(), xFF(), xFF(), x3A())
   REC_E: xFFFFFFF0() -> buildBlock (xFF(), xFF(), xFF(), xF0())
   REC_E: xFFFFFFF1() -> buildBlock (xFF(), xFF(), xFF(), xF1())
   REC_E: xFFFFFFF4() -> buildBlock (xFF(), xFF(), xFF(), xF4())
   REC_E: xFFFFFFF5() -> buildBlock (xFF(), xFF(), xFF(), xF5())
   REC_E: xFFFFFFF7() -> buildBlock (xFF(), xFF(), xFF(), xF7())
   REC_E: xFFFFFFF9() -> buildBlock (xFF(), xFF(), xFF(), xF9())
   REC_E: xFFFFFFFA() -> buildBlock (xFF(), xFF(), xFF(), xFA())
   REC_E: xFFFFFFFB() -> buildBlock (xFF(), xFF(), xFF(), xFB())
   REC_E: xFFFFFFFC() -> buildBlock (xFF(), xFF(), xFF(), xFC())
   REC_E: xFFFFFFFD() -> buildBlock (xFF(), xFF(), xFF(), xFD())
   REC_E: xFFFFFFFE() -> buildBlock (xFF(), xFF(), xFF(), xFE())
   REC_E: xFFFFFFFF() -> buildBlock (xFF(), xFF(), xFF(), xFF())
   REC_E: appendMessage (unitMessage (W), W_prime) -> consMessage (W, unitMessage (W_prime))
   REC_E: appendMessage (consMessage (W, M), W_prime) -> consMessage (W, appendMessage (M, W_prime))
   REC_E: reverseMessage (unitMessage (W)) -> unitMessage (W)
   REC_E: reverseMessage (consMessage (W, M)) -> appendMessage (reverseMessage (M), W)
   REC_E: makeMessage (succ (N), W, W_prime) -> unitMessage (W) where equal-after-eval (|eqNat (N, zero()), true())
   REC_E: makeMessage (succ (N), W, W_prime) -> consMessage (W, makeMessage (N, ADD (W, W_prime), W_prime)) where equal-after-eval (|eqNat (N, zero()), false())
   REC_E: ADD (W, W_prime) -> addBlock (W, W_prime)
   REC_E: AND (W, W_prime) -> andBlock (W, W_prime)
   REC_E: MUL (W, W_prime) -> mulBlock (W, W_prime)
   REC_E: OR (W, W_prime) -> orBlock (W, W_prime)
   REC_E: XOR (W, W_prime) -> xorBlock (W, W_prime)
   REC_E: XOR_prime (buildPair (W, W_prime)) -> XOR (W, W_prime)
   REC_E: CYC (buildBlock (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B9, B10, B11, B12, B13, B14, B15, B16), buildOctet (B17, B18, B19, B20, B21, B22, B23, B24), buildOctet (B25, B26, B27, B28, B29, B30, B31, B32))) -> buildBlock (buildOctet (B2, B3, B4, B5, B6, B7, B8, B9), buildOctet (B10, B11, B12, B13, B14, B15, B16, B17), buildOctet (B18, B19, B20, B21, B22, B23, B24, B25), buildOctet (B26, B27, B28, B29, B30, B31, B32, B1))
   REC_E: nCYC (zero(), W) -> W
   REC_E: nCYC (succ (N), W) -> CYC (nCYC (N, W))
   REC_E: FIX1 (W) -> AND (OR (W, x02040801()), xBFEF7FDF())
   REC_E: FIX2 (W) -> AND (OR (W, x00804021()), x7DFEFBFF())
   REC_E: needAdjust (O) -> orBool (eqOctet (O, x00()), eqOctet (O, xFF()))
   REC_E: adjustCode (O) -> x1() where equal-after-eval (|needAdjust (O), true())
   REC_E: adjustCode (O) -> x0() where equal-after-eval (|needAdjust (O), false())
   REC_E: adjust (O, O_prime) -> xorOctet (O, O_prime) where equal-after-eval (|needAdjust (O), true())
   REC_E: adjust (O, O_prime) -> O where equal-after-eval (|needAdjust (O), false())
   REC_E: PAT (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> buildOctet (adjustCode (O1), adjustCode (O2), adjustCode (O3), adjustCode (O4), adjustCode (O_prime1), adjustCode (O_prime2), adjustCode (O_prime3), adjustCode (O_prime4))
   REC_E: BYT (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> BYT_prime (O1, O2, O3, O4, O_prime1, O_prime2, O_prime3, O_prime4, PAT (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)))
   REC_E: BYT_prime (O1, O2, O3, O4, O_prime1, O_prime2, O_prime3, O_prime4, Opat) -> buildPair (buildBlock (adjust (O1, rightOctet7 (Opat)), adjust (O2, rightOctet6 (Opat)), adjust (O3, rightOctet5 (Opat)), adjust (O4, rightOctet4 (Opat))), buildBlock (adjust (O_prime1, rightOctet3 (Opat)), adjust (O_prime2, rightOctet2 (Opat)), adjust (O_prime3, rightOctet1 (Opat)), adjust (O_prime4, Opat)))
   REC_E: ADDC (W, W_prime) -> ADDC_prime (addBlockSum (W, W_prime))
   REC_E: ADDC_prime (buildBlockSum (x0(), W)) -> buildPair (x00000000(), W)
   REC_E: ADDC_prime (buildBlockSum (x1(), W)) -> buildPair (x00000001(), W)
   REC_E: MUL1 (W, W_prime) -> MUL1XY (MUL (W, W_prime))
   REC_E: MUL1XY (buildPair (W, W_prime)) -> MUL1UL (W, W_prime)
   REC_E: MUL1UL (W, W_prime) -> MUL1SC (ADDC (W, W_prime))
   REC_E: MUL1SC (buildPair (Wcarry, W)) -> ADD (W, Wcarry)
   REC_E: MUL2 (W, W_prime) -> MUL2XY (MUL (W, W_prime))
   REC_E: MUL2XY (buildPair (W, W_prime)) -> MUL2UL (W, W_prime)
   REC_E: MUL2UL (W, W_prime) -> MUL2DEL (ADDC (W, W), W_prime)
   REC_E: MUL2DEL (buildPair (Wcarry, W), W_prime) -> MUL2FL (ADD (W, ADD (Wcarry, Wcarry)), W_prime)
   REC_E: MUL2FL (W, W_prime) -> MUL2SC (ADDC (W, W_prime))
   REC_E: MUL2SC (buildPair (Wcarry, W)) -> ADD (W, ADD (Wcarry, Wcarry))
   REC_E: MUL2A (W, W_prime) -> MUL2AXY (MUL (W, W_prime))
   REC_E: MUL2AXY (buildPair (W, W_prime)) -> MUL2AUL (W, W_prime)
   REC_E: MUL2AUL (W, W_prime) -> MUL2ADL (ADD (W, W), W_prime)
   REC_E: MUL2ADL (W, W_prime) -> MUL2ASC (ADDC (W, W_prime))
   REC_E: MUL2ASC (buildPair (Wcarry, W)) -> ADD (W, ADD (Wcarry, Wcarry))
   REC_E: squareHalf (H) -> mulHalf (H, H)
   REC_E: Q (O) -> squareHalf (addHalf (buildHalf (x00(), O), x0001()))
   REC_E: J1_2 (W) -> MUL1 (W, W)
   REC_E: J1_4 (W) -> MUL1 (J1_2 (W), J1_2 (W))
   REC_E: J1_6 (W) -> MUL1 (J1_2 (W), J1_4 (W))
   REC_E: J1_8 (W) -> MUL1 (J1_2 (W), J1_6 (W))
   REC_E: J2_2 (W) -> MUL2 (W, W)
   REC_E: J2_4 (W) -> MUL2 (J2_2 (W), J2_2 (W))
   REC_E: J2_6 (W) -> MUL2 (J2_2 (W), J2_4 (W))
   REC_E: J2_8 (W) -> MUL2 (J2_2 (W), J2_6 (W))
   REC_E: K1_2 (W) -> MUL1 (W, W)
   REC_E: K1_4 (W) -> MUL1 (K1_2 (W), K1_2 (W))
   REC_E: K1_5 (W) -> MUL1 (W, K1_4 (W))
   REC_E: K1_7 (W) -> MUL1 (K1_2 (W), K1_5 (W))
   REC_E: K1_9 (W) -> MUL1 (K1_2 (W), K1_7 (W))
   REC_E: K2_2 (W) -> MUL2 (W, W)
   REC_E: K2_4 (W) -> MUL2 (K2_2 (W), K2_2 (W))
   REC_E: K2_5 (W) -> MUL2 (W, K2_4 (W))
   REC_E: K2_7 (W) -> MUL2 (K2_2 (W), K2_5 (W))
   REC_E: K2_9 (W) -> MUL2 (K2_2 (W), K2_7 (W))
   REC_E: H4 (W) -> XOR (J1_4 (W), J2_4 (W))
   REC_E: H6 (W) -> XOR (J1_6 (W), J2_6 (W))
   REC_E: H8 (W) -> XOR (J1_8 (W), J2_8 (W))
   REC_E: H0 (W) -> XOR (K1_5 (W), K2_5 (W))
   REC_E: H5 (W, O) -> MUL2 (H0 (W), Q (O))
   REC_E: H7 (W) -> XOR (K1_7 (W), K2_7 (W))
   REC_E: H9 (W) -> XOR (K1_9 (W), K2_9 (W))
   REC_E: splitSegment (unitMessage (W)) -> unitSegment (unitMessage (W))
   REC_E: splitSegment (consMessage (W, M)) -> cutSegment (M, unitMessage (W), n254())
   REC_E: cutSegment (unitMessage (W), M_prime, N) -> unitSegment (reverseMessage (consMessage (W, M_prime)))
   REC_E: cutSegment (consMessage (W, M), M_prime, zero()) -> consSegment (reverseMessage (consMessage (W, M_prime)), splitSegment (M))
   REC_E: cutSegment (consMessage (W, M), M_prime, succ (N)) -> cutSegment (M, consMessage (W, M_prime), N)
   REC_E: preludeXY (W1, W2) -> preludeXY_prime (BYT (W1, W2), PAT (W1, W2))
   REC_E: preludeVW (W1, W2) -> preludeVW_prime (BYT (W1, W2))
   REC_E: preludeST (W1, W2) -> preludeST_prime (BYT (W1, W2))
   REC_E: preludeXY_prime (buildPair (W, W_prime), O) -> BYT (H4 (W), H5 (W_prime, O))
   REC_E: preludeVW_prime (buildPair (W, W_prime)) -> BYT (H6 (W), H7 (W_prime))
   REC_E: preludeST_prime (buildPair (W, W_prime)) -> BYT (H8 (W), H9 (W_prime))
   REC_E: computeXY (P, P_prime, W) -> computeXY_prime (P, W, XOR_prime (computeVW (P_prime)))
   REC_E: computeXY_prime (buildPair (W1, W2), W, W_prime) -> buildPair (MUL1 (XOR (W1, W), FIX1 (ADD (XOR (W2, W), W_prime))), MUL2A (XOR (W2, W), FIX2 (ADD (XOR (W1, W), W_prime))))
   REC_E: computeVW (buildPair (W1, W2)) -> buildPair (CYC (W1), W2)
   REC_E: loop1 (P, P_prime, unitMessage (W)) -> computeXY (P, P_prime, W)
   REC_E: loop1 (P, P_prime, consMessage (W, M)) -> loop1 (computeXY (P, P_prime, W), computeVW (P_prime), M)
   REC_E: loop2 (P, P_prime, unitMessage (W)) -> computeVW (P_prime)
   REC_E: loop2 (P, P_prime, consMessage (W, M)) -> loop2 (computeXY (P, P_prime, W), computeVW (P_prime), M)
   REC_E: coda (P, P_prime, buildPair (W, W_prime)) -> XOR_prime (computeXY (computeXY (P, P_prime, W), computeVW (P_prime), W_prime))
   REC_E: MAA (buildKey (W1, W2), M) -> MAA_prime (preludeXY (W1, W2), preludeVW (W1, W2), preludeST (W1, W2), M)
   REC_E: MAA_prime (P1, P2, P3, M) -> coda (loop1 (P1, P2, M), loop2 (P1, P2, M), P3)
   REC_E: MAC (K, M) -> MACfirst (K, splitSegment (M))
   REC_E: MACfirst (K, unitSegment (M)) -> MAA (K, M)
   REC_E: MACfirst (K, consSegment (M, S)) -> MACnext (K, MAA (K, M), S)
   REC_E: MACnext (K, W, unitSegment (M)) -> MAA (K, consMessage (W, M))
   REC_E: MACnext (K, W, consSegment (M, S)) -> MACnext (K, MAA (K, consMessage (W, M)), S)

strategies
   eval = memo (innermost (REC_E))
   equal-after-eval (|m1, m2) = equal (|<eval> m1, <eval> m2)
   eval-and-print = eval ; debug (!"result = ")
   main = 
      (<eval-and-print> eqBlock (MUL1 (x0000000F(), x0000000E()), x000000D2())) ;
      (<eval-and-print> eqBlock (MUL1 (xFFFFFFF0(), x0000000E()), xFFFFFF2D())) ;
      (<eval-and-print> eqBlock (MUL1 (xFFFFFFF0(), xFFFFFFF1()), x000000D2())) ;
      (<eval-and-print> eqBlock (MUL2 (x0000000F(), x0000000E()), x000000D2())) ;
      (<eval-and-print> eqBlock (MUL2 (xFFFFFFF0(), x0000000E()), xFFFFFF3A())) ;
      (<eval-and-print> eqBlock (MUL2 (xFFFFFFF0(), xFFFFFFF1()), x000000B6())) ;
      (<eval-and-print> eqBlock (MUL2A (x0000000F(), x0000000E()), x000000D2())) ;
      (<eval-and-print> eqBlock (MUL2A (xFFFFFFF0(), x0000000E()), xFFFFFF3A())) ;
      (<eval-and-print> eqBlock (MUL2A (x7FFFFFF0(), xFFFFFFF1()), x800000C2())) ;
      (<eval-and-print> eqBlock (MUL2A (xFFFFFFF0(), x7FFFFFF1()), x000000C4())) ;
      (<eval-and-print> eqPair (BYT (x00000000(), x00000000()), buildPair (x0103070F(), x1F3F7FFF()))) ;
      (<eval-and-print> eqPair (BYT (xFFFF00FF(), xFFFFFFFF()), buildPair (xFEFC07F0(), xE0C08000()))) ;
      (<eval-and-print> eqPair (BYT (xAB00FFCD(), xFFEF0001()), buildPair (xAB01FCCD(), xF2EF3501()))) ;
      (<eval-and-print> eqOctet (PAT (x00000000(), x00000000()), xFF())) ;
      (<eval-and-print> eqOctet (PAT (xFFFF00FF(), xFFFFFFFF()), xFF())) ;
      (<eval-and-print> eqOctet (PAT (xAB00FFCD(), xFFEF0001()), x6A())) ;
      (<eval-and-print> eqBlock (J1_2 (x00000100()), x00010000())) ;
      (<eval-and-print> eqBlock (J1_4 (x00000100()), x00000001())) ;
      (<eval-and-print> eqBlock (J1_6 (x00000100()), x00010000())) ;
      (<eval-and-print> eqBlock (J1_8 (x00000100()), x00000001())) ;
      (<eval-and-print> eqBlock (J2_2 (x00000100()), x00010000())) ;
      (<eval-and-print> eqBlock (J2_4 (x00000100()), x00000002())) ;
      (<eval-and-print> eqBlock (J2_6 (x00000100()), x00020000())) ;
      (<eval-and-print> eqBlock (J2_8 (x00000100()), x00000004())) ;
      (<eval-and-print> eqBlock (H4 (x00000100()), x00000003())) ;
      (<eval-and-print> eqBlock (H6 (x00000100()), x00030000())) ;
      (<eval-and-print> eqBlock (H8 (x00000100()), x00000005())) ;
      (<eval-and-print> eqBlock (K1_2 (x00000080()), x00004000())) ;
      (<eval-and-print> eqBlock (K1_4 (x00000080()), x10000000())) ;
      (<eval-and-print> eqBlock (K1_5 (x00000080()), x00000008())) ;
      (<eval-and-print> eqBlock (K1_7 (x00000080()), x00020000())) ;
      (<eval-and-print> eqBlock (K1_9 (x00000080()), x80000000())) ;
      (<eval-and-print> eqBlock (K2_2 (x00000080()), x00004000())) ;
      (<eval-and-print> eqBlock (K2_4 (x00000080()), x10000000())) ;
      (<eval-and-print> eqBlock (K2_5 (x00000080()), x00000010())) ;
      (<eval-and-print> eqBlock (K2_7 (x00000080()), x00040000())) ;
      (<eval-and-print> eqBlock (K2_9 (x00000080()), x00000002())) ;
      (<eval-and-print> eqBlock (H0 (x00000080()), x00000018())) ;
      (<eval-and-print> eqBlock (Q (x01()), x00000004())) ;
      (<eval-and-print> eqBlock (H5 (x00000080(), x01()), x00000060())) ;
      (<eval-and-print> eqBlock (H7 (x00000080()), x00060000())) ;
      (<eval-and-print> eqBlock (H9 (x00000080()), x80000002())) ;
      (<eval-and-print> eqOctet (PAT (x00000003(), x00000060()), xEE())) ;
      (<eval-and-print> eqOctet (PAT (x00030000(), x00060000()), xBB())) ;
      (<eval-and-print> eqOctet (PAT (x00000005(), x80000002()), xE6())) ;
      (<eval-and-print> eqPair (BYT (x00000003(), x00000060()), buildPair (x01030703(), x1D3B7760()))) ;
      (<eval-and-print> eqPair (BYT (x00030000(), x00060000()), buildPair (x0103050B(), x17065DBB()))) ;
      (<eval-and-print> eqPair (BYT (x00000005(), x80000002()), buildPair (x01030705(), x80397302()))) ;
      (<eval-and-print> eqBlock (CYC (x00000003()), x00000006())) ;
      (<eval-and-print> eqBlock (XOR (x00000006(), x00000003()), x00000005())) ;
      (<eval-and-print> eqBlock (XOR (x00000002(), x00000005()), x00000007())) ;
      (<eval-and-print> eqBlock (XOR (x00000003(), x00000005()), x00000006())) ;
      (<eval-and-print> eqBlock (ADD (x00000005(), x00000006()), x0000000B())) ;
      (<eval-and-print> eqBlock (ADD (x00000005(), x00000007()), x0000000C())) ;
      (<eval-and-print> eqBlock (OR (x0000000B(), x00000004()), x0000000F())) ;
      (<eval-and-print> eqBlock (OR (x0000000C(), x00000001()), x0000000D())) ;
      (<eval-and-print> eqBlock (AND (x0000000F(), xFFFFFFF7()), x00000007())) ;
      (<eval-and-print> eqBlock (AND (x0000000D(), xFFFFFFFB()), x00000009())) ;
      (<eval-and-print> eqBlock (MUL1 (x00000007(), x00000007()), x00000031())) ;
      (<eval-and-print> eqBlock (MUL2A (x00000006(), x00000009()), x00000036())) ;
      (<eval-and-print> eqBlock (XOR (x00000031(), x00000036()), x00000007())) ;
      (<eval-and-print> eqBlock (CYC (x00000003()), x00000006())) ;
      (<eval-and-print> eqBlock (XOR (x00000006(), x00000003()), x00000005())) ;
      (<eval-and-print> eqBlock (XOR (xFFFFFFFD(), x00000001()), xFFFFFFFC())) ;
      (<eval-and-print> eqBlock (XOR (xFFFFFFFC(), x00000001()), xFFFFFFFD())) ;
      (<eval-and-print> eqBlock (ADD (x00000005(), xFFFFFFFD()), x00000002())) ;
      (<eval-and-print> eqBlock (ADD (x00000005(), xFFFFFFFC()), x00000001())) ;
      (<eval-and-print> eqBlock (OR (x00000002(), x00000001()), x00000003())) ;
      (<eval-and-print> eqBlock (OR (x00000001(), x00000004()), x00000005())) ;
      (<eval-and-print> eqBlock (AND (x00000003(), xFFFFFFF9()), x00000001())) ;
      (<eval-and-print> eqBlock (AND (x00000005(), xFFFFFFFC()), x00000004())) ;
      (<eval-and-print> eqBlock (MUL1 (xFFFFFFFC(), x00000001()), xFFFFFFFC())) ;
      (<eval-and-print> eqBlock (MUL2A (xFFFFFFFD(), x00000004()), xFFFFFFFA())) ;
      (<eval-and-print> eqBlock (XOR (xFFFFFFFC(), xFFFFFFFA()), x00000006())) ;
      (<eval-and-print> eqBlock (CYC (x00000007()), x0000000E())) ;
      (<eval-and-print> eqBlock (XOR (x0000000E(), x00000007()), x00000009())) ;
      (<eval-and-print> eqBlock (XOR (xFFFFFFFD(), x00000008()), xFFFFFFF5())) ;
      (<eval-and-print> eqBlock (XOR (xFFFFFFFC(), x00000008()), xFFFFFFF4())) ;
      (<eval-and-print> eqBlock (ADD (x00000009(), xFFFFFFF4()), xFFFFFFFD())) ;
      (<eval-and-print> eqBlock (ADD (x00000009(), xFFFFFFF5()), xFFFFFFFE())) ;
      (<eval-and-print> eqBlock (OR (xFFFFFFFD(), x00000001()), xFFFFFFFD())) ;
      (<eval-and-print> eqBlock (OR (xFFFFFFFE(), x00000002()), xFFFFFFFE())) ;
      (<eval-and-print> eqBlock (AND (xFFFFFFFD(), xFFFFFFFE()), xFFFFFFFC())) ;
      (<eval-and-print> eqBlock (AND (xFFFFFFFE(), x7FFFFFFD()), x7FFFFFFC())) ;
      (<eval-and-print> eqBlock (MUL1 (xFFFFFFF5(), xFFFFFFFC()), x0000001E())) ;
      (<eval-and-print> eqBlock (MUL2A (xFFFFFFF4(), x7FFFFFFC()), x0000001E())) ;
      (<eval-and-print> eqBlock (XOR (x0000001E(), x0000001E()), x00000000())) ;
      (<eval-and-print> eqBlock (CYC (x00000001()), x00000002())) ;
      (<eval-and-print> eqBlock (XOR (x00000002(), x00000001()), x00000003())) ;
      (<eval-and-print> eqBlock (XOR (x00000001(), x00000000()), x00000001())) ;
      (<eval-and-print> eqBlock (XOR (x00000002(), x00000000()), x00000002())) ;
      (<eval-and-print> eqBlock (ADD (x00000003(), x00000002()), x00000005())) ;
      (<eval-and-print> eqBlock (ADD (x00000003(), x00000001()), x00000004())) ;
      (<eval-and-print> eqBlock (OR (x00000005(), x00000002()), x00000007())) ;
      (<eval-and-print> eqBlock (OR (x00000004(), x00000001()), x00000005())) ;
      (<eval-and-print> eqBlock (AND (x00000007(), xFFFFFFFB()), x00000003())) ;
      (<eval-and-print> eqBlock (AND (x00000005(), xFFFFFFFB()), x00000001())) ;
      (<eval-and-print> eqBlock (MUL1 (x00000001(), x00000003()), x00000003())) ;
      (<eval-and-print> eqBlock (MUL2A (x00000002(), x00000001()), x00000002())) ;
      (<eval-and-print> eqBlock (XOR (x00000003(), x00000002()), x00000001())) ;
      (<eval-and-print> eqBlock (CYC (x00000002()), x00000004())) ;
      (<eval-and-print> eqBlock (XOR (x00000004(), x00000001()), x00000005())) ;
      (<eval-and-print> eqBlock (XOR (x00000003(), x00000001()), x00000002())) ;
      (<eval-and-print> eqBlock (XOR (x00000002(), x00000001()), x00000003())) ;
      (<eval-and-print> eqBlock (ADD (x00000005(), x00000003()), x00000008())) ;
      (<eval-and-print> eqBlock (ADD (x00000005(), x00000002()), x00000007())) ;
      (<eval-and-print> eqBlock (OR (x00000008(), x00000002()), x0000000A())) ;
      (<eval-and-print> eqBlock (OR (x00000007(), x00000001()), x00000007())) ;
      (<eval-and-print> eqBlock (AND (x0000000A(), xFFFFFFFB()), x0000000A())) ;
      (<eval-and-print> eqBlock (AND (x00000007(), xFFFFFFFB()), x00000003())) ;
      (<eval-and-print> eqBlock (MUL1 (x00000002(), x0000000A()), x00000014())) ;
      (<eval-and-print> eqBlock (MUL2A (x00000003(), x00000003()), x00000009())) ;
      (<eval-and-print> eqBlock (XOR (x00000014(), x00000009()), x0000001D())) ;
      (<eval-and-print> eqBlock (CYC (x00000004()), x00000008())) ;
      (<eval-and-print> eqBlock (XOR (x00000008(), x00000001()), x00000009())) ;
      (<eval-and-print> eqBlock (XOR (x00000014(), x00000002()), x00000016())) ;
      (<eval-and-print> eqBlock (XOR (x00000009(), x00000002()), x0000000B())) ;
      (<eval-and-print> eqBlock (ADD (x00000009(), x0000000B()), x00000014())) ;
      (<eval-and-print> eqBlock (ADD (x00000009(), x00000016()), x0000001F())) ;
      (<eval-and-print> eqBlock (OR (x00000014(), x00000002()), x00000016())) ;
      (<eval-and-print> eqBlock (OR (x0000001F(), x00000001()), x0000001F())) ;
      (<eval-and-print> eqBlock (AND (x00000016(), xFFFFFFFB()), x00000012())) ;
      (<eval-and-print> eqBlock (AND (x0000001F(), xFFFFFFFB()), x0000001B())) ;
      (<eval-and-print> eqBlock (MUL1 (x00000016(), x00000012()), x0000018C())) ;
      (<eval-and-print> eqBlock (MUL2A (x0000000B(), x0000001B()), x00000129())) ;
      (<eval-and-print> eqBlock (XOR (x0000018C(), x00000129()), x000000A5())) ;
      (<eval-and-print> eqBlock (CYC (xC4EB1AEB()), x89D635D7())) ;
      (<eval-and-print> eqBlock (XOR (x89D635D7(), xF6A09667()), x7F76A3B0())) ;
      (<eval-and-print> eqBlock (XOR (x21D869BA(), x0A202020()), x2BF8499A())) ;
      (<eval-and-print> eqBlock (XOR (x7792F9D4(), x0A202020()), x7DB2D9F4())) ;
      (<eval-and-print> eqBlock (ADD (x7F76A3B0(), x7DB2D9F4()), xFD297DA4())) ;
      (<eval-and-print> eqBlock (ADD (x7F76A3B0(), x2BF8499A()), xAB6EED4A())) ;
      (<eval-and-print> eqBlock (OR (xFD297DA4(), x02040801()), xFF2D7DA5())) ;
      (<eval-and-print> eqBlock (OR (xAB6EED4A(), x00804021()), xABEEED6B())) ;
      (<eval-and-print> eqBlock (AND (xFF2D7DA5(), xBFEF7FDF()), xBF2D7D85())) ;
      (<eval-and-print> eqBlock (AND (xABEEED6B(), x7DFEFBFF()), x29EEE96B())) ;
      (<eval-and-print> eqBlock (MUL1 (x2BF8499A(), xBF2D7D85()), x0AD67E20())) ;
      (<eval-and-print> eqBlock (MUL2A (x7DB2D9F4(), x29EEE96B()), x30261492())) ;
      (<eval-and-print> eqOctet (PAT (x00FF00FF(), x00000000()), xFF())) ;
      (<eval-and-print> eqPair (preludeXY (x00FF00FF(), x00000000()), buildPair (x4A645A01(), x50DEC930()))) ;
      (<eval-and-print> eqPair (preludeVW (x00FF00FF(), x00000000()), buildPair (x5CCA3239(), xFECCAA6E()))) ;
      (<eval-and-print> eqPair (preludeST (x00FF00FF(), x00000000()), buildPair (x51EDE9C7(), x24B66FB5()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x4A645A01(), x50DEC930()), x55555555(), XOR (nCYC (n1(), x5CCA3239()), xFECCAA6E())), buildPair (x48B204D6(), x5834A585()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x48B204D6(), x5834A585()), xAAAAAAAA(), XOR (nCYC (n2(), x5CCA3239()), xFECCAA6E())), buildPair (x4F998E01(), xBE9F0917()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x4F998E01(), xBE9F0917()), x51EDE9C7(), XOR (nCYC (n3(), x5CCA3239()), xFECCAA6E())), buildPair (x344925FC(), xDB9102B0()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x344925FC(), xDB9102B0()), x24B66FB5(), XOR (nCYC (n4(), x5CCA3239()), xFECCAA6E())), buildPair (x277B4B25(), xD636250D()))) ;
      (<eval-and-print> eqBlock (XOR (x277B4B25(), xD636250D()), xF14D6E28())) ;
      (<eval-and-print> eqOctet (PAT (x00FF00FF(), x00000000()), xFF())) ;
      (<eval-and-print> eqPair (preludeXY (x00FF00FF(), x00000000()), buildPair (x4A645A01(), x50DEC930()))) ;
      (<eval-and-print> eqPair (preludeVW (x00FF00FF(), x00000000()), buildPair (x5CCA3239(), xFECCAA6E()))) ;
      (<eval-and-print> eqPair (preludeST (x00FF00FF(), x00000000()), buildPair (x51EDE9C7(), x24B66FB5()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x4A645A01(), x50DEC930()), xAAAAAAAA(), XOR (nCYC (n1(), x5CCA3239()), xFECCAA6E())), buildPair (x6AEBACF8(), x9DB15CF6()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x6AEBACF8(), x9DB15CF6()), x55555555(), XOR (nCYC (n2(), x5CCA3239()), xFECCAA6E())), buildPair (x270EEDAF(), xB8142629()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x270EEDAF(), xB8142629()), x51EDE9C7(), XOR (nCYC (n3(), x5CCA3239()), xFECCAA6E())), buildPair (x29907CD8(), xBA92DB12()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x29907CD8(), xBA92DB12()), x24B66FB5(), XOR (nCYC (n4(), x5CCA3239()), xFECCAA6E())), buildPair (x28EAD8B3(), x81D10CA3()))) ;
      (<eval-and-print> eqBlock (XOR (x28EAD8B3(), x81D10CA3()), xA93BD410())) ;
      (<eval-and-print> eqOctet (PAT (x55555555(), x5A35D667()), x00())) ;
      (<eval-and-print> eqPair (preludeXY (x55555555(), x5A35D667()), buildPair (x34ACF886(), x7397C9AE()))) ;
      (<eval-and-print> eqPair (preludeVW (x55555555(), x5A35D667()), buildPair (x7201F4DC(), x2829040B()))) ;
      (<eval-and-print> eqPair (preludeST (x55555555(), x5A35D667()), buildPair (x9E2E7B36(), x13647149()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x34ACF886(), x7397C9AE()), x00000000(), XOR (nCYC (n1(), x7201F4DC()), x2829040B())), buildPair (x2FD76FFB(), x550D91CE()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x2FD76FFB(), x550D91CE()), xFFFFFFFF(), XOR (nCYC (n2(), x7201F4DC()), x2829040B())), buildPair (xA70FC148(), x1D10D8D3()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xA70FC148(), x1D10D8D3()), x9E2E7B36(), XOR (nCYC (n3(), x7201F4DC()), x2829040B())), buildPair (xB1CC1CC5(), x29C1485F()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xB1CC1CC5(), x29C1485F()), x13647149(), XOR (nCYC (n4(), x7201F4DC()), x2829040B())), buildPair (x288FC786(), x9115A558()))) ;
      (<eval-and-print> eqBlock (XOR (x288FC786(), x9115A558()), xB99A62DE())) ;
      (<eval-and-print> eqOctet (PAT (x55555555(), x5A35D667()), x00())) ;
      (<eval-and-print> eqPair (preludeXY (x55555555(), x5A35D667()), buildPair (x34ACF886(), x7397C9AE()))) ;
      (<eval-and-print> eqPair (preludeVW (x55555555(), x5A35D667()), buildPair (x7201F4DC(), x2829040B()))) ;
      (<eval-and-print> eqPair (preludeST (x55555555(), x5A35D667()), buildPair (x9E2E7B36(), x13647149()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x34ACF886(), x7397C9AE()), xFFFFFFFF(), XOR (nCYC (n1(), x7201F4DC()), x2829040B())), buildPair (x8DC8BBDE(), xFE4E5BDD()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x8DC8BBDE(), xFE4E5BDD()), x00000000(), XOR (nCYC (n2(), x7201F4DC()), x2829040B())), buildPair (xCBC865BA(), x0297AF6F()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xCBC865BA(), x0297AF6F()), x9E2E7B36(), XOR (nCYC (n3(), x7201F4DC()), x2829040B())), buildPair (x3CF3A7D2(), x160EE9B5()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x3CF3A7D2(), x160EE9B5()), x13647149(), XOR (nCYC (n4(), x7201F4DC()), x2829040B())), buildPair (xD0482465(), x7050EC5E()))) ;
      (<eval-and-print> eqBlock (XOR (xD0482465(), x7050EC5E()), xA018C83B())) ;
      (<eval-and-print> eqPair (preludeXY (xE6A12F07(), x9D15C437()), buildPair (x21D869BA(), x7792F9D4()))) ;
      (<eval-and-print> eqPair (preludeVW (xE6A12F07(), x9D15C437()), buildPair (xC4EB1AEB(), xF6A09667()))) ;
      (<eval-and-print> eqPair (preludeST (xE6A12F07(), x9D15C437()), buildPair (x6D67E884(), xA511987A()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x204E80A7(), x077788A2()), x00000000(), XOR (nCYC (n1(), x17A808FD()), xFEA1D334())), buildPair (x303FF4AA(), x1277A6D4()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x303FF4AA(), x1277A6D4()), x00000000(), XOR (nCYC (n2(), x17A808FD()), xFEA1D334())), buildPair (x55DD063F(), x4C49AAE0()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x55DD063F(), x4C49AAE0()), x00000000(), XOR (nCYC (n3(), x17A808FD()), xFEA1D334())), buildPair (x51AF3C1D(), x5BC02502()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x51AF3C1D(), x5BC02502()), x00000000(), XOR (nCYC (n4(), x17A808FD()), xFEA1D334())), buildPair (xA44AAAC0(), x63C70DBA()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xA44AAAC0(), x63C70DBA()), x00000000(), XOR (nCYC (n5(), x17A808FD()), xFEA1D334())), buildPair (x4D53901A(), x2E80AC30()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x4D53901A(), x2E80AC30()), x00000000(), XOR (nCYC (n6(), x17A808FD()), xFEA1D334())), buildPair (x5F38EEF1(), x2A6091AE()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x5F38EEF1(), x2A6091AE()), x00000000(), XOR (nCYC (n7(), x17A808FD()), xFEA1D334())), buildPair (xF0239DD5(), x3DD81AC6()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xF0239DD5(), x3DD81AC6()), x00000000(), XOR (nCYC (n8(), x17A808FD()), xFEA1D334())), buildPair (xEB35B97F(), x9372CDC6()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xEB35B97F(), x9372CDC6()), x00000000(), XOR (nCYC (n9(), x17A808FD()), xFEA1D334())), buildPair (x4DA124A1(), xC6B1317E()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x4DA124A1(), xC6B1317E()), x00000000(), XOR (nCYC (n10(), x17A808FD()), xFEA1D334())), buildPair (x7F839576(), x74B39176()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x7F839576(), x74B39176()), x00000000(), XOR (nCYC (n11(), x17A808FD()), xFEA1D334())), buildPair (x11A9D254(), xD78634BC()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x11A9D254(), xD78634BC()), x00000000(), XOR (nCYC (n12(), x17A808FD()), xFEA1D334())), buildPair (xD8804CA5(), xFDC1A8BA()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xD8804CA5(), xFDC1A8BA()), x00000000(), XOR (nCYC (n13(), x17A808FD()), xFEA1D334())), buildPair (x3F6F7248(), x11AC46B8()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x3F6F7248(), x11AC46B8()), x00000000(), XOR (nCYC (n14(), x17A808FD()), xFEA1D334())), buildPair (xACBC13DD(), x33D5A466()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xACBC13DD(), x33D5A466()), x00000000(), XOR (nCYC (n15(), x17A808FD()), xFEA1D334())), buildPair (x4CE933E1(), xC21A1846()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x4CE933E1(), xC21A1846()), x00000000(), XOR (nCYC (n16(), x17A808FD()), xFEA1D334())), buildPair (xC1ED90DD(), xCD959B46()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xC1ED90DD(), xCD959B46()), x00000000(), XOR (nCYC (n17(), x17A808FD()), xFEA1D334())), buildPair (x3CD54DEB(), x613F8E2A()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x3CD54DEB(), x613F8E2A()), x00000000(), XOR (nCYC (n18(), x17A808FD()), xFEA1D334())), buildPair (xBBA57835(), x07C72EAA()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xBBA57835(), x07C72EAA()), x00000000(), XOR (nCYC (n19(), x17A808FD()), xFEA1D334())), buildPair (xD7843FDC(), x6AD6E8A4()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (xD7843FDC(), x6AD6E8A4()), x00000000(), XOR (nCYC (n20(), x17A808FD()), xFEA1D334())), buildPair (x5EBA06C2(), x91896CFA()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x5EBA06C2(), x91896CFA()), x76232E5F(), XOR (nCYC (n21(), x17A808FD()), xFEA1D334())), buildPair (x1D9C9655(), x98D1CC75()))) ;
      (<eval-and-print> eqPair (computeXY_prime (buildPair (x1D9C9655(), x98D1CC75()), x4FB1138A(), XOR (nCYC (n22(), x17A808FD()), xFEA1D334())), buildPair (x7BC180AB(), xA0B87B77()))) ;
      (<eval-and-print> eqBlock (MAC (buildKey (x80018001(), x80018000()), makeMessage (n20(), x00000000(), x00000000())), xDB79FBDC())) ;
      (<eval-and-print> eqBlock (MAC (buildKey (x80018001(), x80018000()), makeMessage (n16(), x00000000(), x07050301())), x8CE37709())) ;
      (<eval-and-print> eqBlock (MAC (buildKey (x80018001(), x80018000()), makeMessage (n256(), x00000000(), x07050301())), x717153D5())) ;
      (<eval-and-print> eqBlock (MAC (buildKey (x80018001(), x80018000()), makeMessage (n4100(), x00000000(), x07050301())), x7783C51D())) ;
      <exit> 0
