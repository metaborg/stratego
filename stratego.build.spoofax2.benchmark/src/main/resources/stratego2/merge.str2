module merge

imports libstrategolib

signature

sorts
   Bool Strg List

constructors
   true : Bool 
   false : Bool 
   a : Strg 
   b : Strg 
   c : Strg * Strg -> Strg 
   nil : List 
   l : Strg * List -> List 
   gte : Strg * Strg -> Bool 
   merge : List * List -> List 
   sort : List -> List 
   odd : List -> List 
   even : List -> List 

rules
   REC_E: gte (b(), a()) -> true()
   REC_E: gte (a(), b()) -> false()
   REC_E: gte (a(), a()) -> true()
   REC_E: gte (b(), b()) -> true()
   REC_E: gte (c (E, S), E2) -> gte (E, E2)
   REC_E: gte (E, c (E2, S2)) -> false() where equal-after-eval (|E, E2)
   REC_E: gte (E, c (E2, S2)) -> gte (E, E2) where not (equal-after-eval (|E, E2))
   REC_E: merge (nil(), L1) -> L1
   REC_E: merge (L1, nil()) -> L1
   REC_E: merge (l (S, L1), l (S2, L2)) -> l (S2, merge (l (S, L1), L2)) where equal-after-eval (|gte (S, S2), true())
   REC_E: merge (l (S, L1), l (S2, L2)) -> l (S, merge (L1, l (S2, L2))) where equal-after-eval (|gte (S, S2), false())
   REC_E: odd (nil()) -> nil()
   REC_E: odd (l (S, nil())) -> l (S, nil())
   REC_E: odd (l (S, l (S2, L1))) -> l (S, odd (L1))
   REC_E: even (nil()) -> nil()
   REC_E: even (l (S, nil())) -> nil()
   REC_E: even (l (S, l (S2, L1))) -> l (S2, even (L1))
   REC_E: sort (nil()) -> nil()
   REC_E: sort (l (S, nil())) -> l (S, nil())
   REC_E: sort (l (S, l (S2, L1))) -> merge (sort (odd (l (S, l (S2, L1)))), sort (even (l (S, l (S2, L1)))))

strategies
   eval = memo (innermost (REC_E))
   equal-after-eval (|m1, m2) = equal (|<eval> m1, <eval> m2)
   eval-and-print = eval ; debug (!"result = ")
   main = 
      (<eval-and-print> sort (l (c (a(), c (b(), c (a(), b()))), l (c (b(), c (a(), c (b(), b()))), l (c (a(), c (b(), c (a(), a()))), l (c (b(), c (b(), c (b(), b()))), l (c (b(), c (b(), c (b(), a()))),l (c (a(), c (a(), c (a(), b()))), l (c (b(), c (b(), c (a(), a()))), l (c (a(), c (a(), c (a(), a()))), l (c (a(), c (a(), c (b(), b()))), l (c (b(), c (a(), c (b(), a()))),l (c (a(), c (b(), c (a(), b()))), l (c (b(), c (a(), c (b(), b()))), l (c (a(), c (b(), c (a(), a()))), l (c (b(), c (b(), c (b(), b()))), l (c (b(), c (b(), c (b(), a()))),l (c (a(), c (a(), c (a(), b()))), l (c (b(), c (b(), c (a(), a()))), l (c (a(), c (a(), c (a(), a()))), l (c (a(), c (a(), c (b(), b()))), l (c (b(), c (a(), c (b(), a()))),l (c (a(), c (b(), c (a(), b()))), l (c (b(), c (a(), c (b(), b()))), l (c (a(), c (b(), c (a(), a()))), l (c (b(), c (b(), c (b(), b()))), l (c (b(), c (b(), c (b(), a()))),l (c (a(), c (a(), c (a(), b()))), l (c (b(), c (b(), c (a(), a()))), l (c (a(), c (a(), c (a(), a()))), l (c (a(), c (a(), c (b(), b()))), l (c (b(), c (a(), c (b(), a()))),l (c (a(), c (b(), c (a(), b()))), l (c (b(), c (a(), c (b(), b()))), l (c (a(), c (b(), c (a(), a()))), l (c (b(), c (b(), c (b(), b()))), l (c (b(), c (b(), c (b(), a()))),l (c (a(), c (a(), c (a(), b()))), l (c (b(), c (b(), c (a(), a()))), l (c (a(), c (a(), c (a(), a()))), l (c (a(), c (a(), c (b(), b()))), l (c (b(), c (a(), c (b(), a()))), l (c (a(), c (b(), c (a(), b()))), l (c (b(), c (a(), c (b(), b()))), l (c (a(), c (b(), c (a(), a()))), l (c (b(), c (b(), c (b(), b()))), l (c (b(), c (b(), c (b(), a()))), l (c (a(), c (a(), c (a(), b()))), l (c (b(), c (b(), c (a(), a()))), l (c (a(), c (a(), c (a(), a()))), l (c (a(), c (a(), c (b(), b()))), l (c (b(), c (a(), c (b(), a()))),nil())))))))))))))))))))))))))))))))))))))))))))))))))))) ;
      <exit> 0
