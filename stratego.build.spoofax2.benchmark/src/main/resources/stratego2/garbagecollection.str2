module garbagecollection

imports strategolib

signature

sorts
   Nat

constructors
   d0 : Nat 
   s : Nat -> Nat 
   p : Nat 
   n : Nat 
   d1 : Nat 
   f : Nat * Nat * Nat * Nat * Nat -> Nat 
   c : Nat * Nat -> Nat 

rules
   REC_E: d1() -> s (d0())
   REC_E: c (d0(), Y) -> Y
   REC_E: c (s (X), Y) -> s (c (X,Y))
   REC_E: f (X, Y, s (Z), T, U) -> f (X, Y, Z, c (T, T), U)
   REC_E: f (X, s (Y), d0(), T, U) -> f (X, Y, p(), T, T)
   REC_E: f (s (X), d0(), d0(), T, U) -> f (X, n(), p(), d1(), d0())
   REC_E: f (d0(), d0(), d0(), T, U) -> T
   REC_E: f (X, s (Y), p(), T, U) -> f (X, Y, p(), T, s (U))
   REC_E: f (X, d0(), p(), T, U) -> f (X, n(), p(), s (T), U)
   REC_E: f (s (X), n(), p(), T, U) -> f (X, n(), p(), T, U)
   REC_E: f (d0(), n(), p(), T, U) -> U

strategies
   eval = memo (innermost (REC_E))
   eval-and-print = eval ; debug (!"result = ")
   main = 
      (<eval-and-print> f (s (s (s (s (s (s (d0())))))), s (s (s (s (s (d0()))))), s (s (d0())), d0(), d1())) ;
      (<eval-and-print> f (s (s (s (s (d0())))), s (s (s (d0()))), s (s (s (s (s (d0()))))), d0(), d1())) ;
      <exit> 0
