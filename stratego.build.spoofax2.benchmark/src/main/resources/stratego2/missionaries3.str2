module missionaries3

imports libstrategolib

signature

sorts
   Bool Int Bank Text Position Move MoveList TextList PosList

constructors
   true : Bool 
   false : Bool 
   d0 : Int 
   s : Int -> Int 
   p : Int -> Int 
   west : Bank 
   east : Bank 
   missionary_rows_east : Text 
   two_missionaries_row_east : Text 
   missionary_and_cannibal_row_east : Text 
   cannibal_rows_east : Text 
   two_cannibals_row_east : Text 
   missionary_rows_west : Text 
   two_missionaries_row_west : Text 
   missionary_and_cannibal_row_west : Text 
   cannibal_rows_west : Text 
   two_cannibals_row_west : Text 
   pos : Bank * Int * Int * Int * Int -> Position 
   mov : Text * Int * Int * Int * Int * Bank -> Move 
   nil_ml : MoveList 
   cm : Move * MoveList -> MoveList 
   nil_pl : PosList 
   cp : Position * PosList -> PosList 
   nil_tl : TextList 
   Xfail : TextList 
   ct : Text * TextList -> TextList 
   d1 : Int 
   d2 : Int 
   d3 : Int 
   m1 : Int 
   m2 : Int 
   and : Bool * Bool -> Bool 
   or : Bool * Bool -> Bool 
   plus : Int * Int -> Int 
   gte : Int * Int -> Bool 
   equal : Int * Int -> Bool 
   moves : MoveList 
   member : Position * PosList -> Bool 
   gte_tl : TextList * TextList -> Bool 
   solve : Position * Position * PosList -> TextList 
   try : MoveList * Position * Position * PosList -> TextList 
   apply : Move * Position * Position * PosList -> TextList 
   check : Text * Position * Position * PosList -> TextList 
   valid : Position -> Bool 
   evalct : Text * TextList -> TextList 
   best : TextList * TextList -> TextList 

rules
   REC_E: and (L, true()) -> L
   REC_E: and (L, false()) -> false()
   REC_E: or (L, true()) -> true()
   REC_E: or (L, false()) -> L
   REC_E: plus (X, d0()) -> X
   REC_E: plus (d0(), Y) -> Y
   REC_E: plus (s (X), s (Y)) -> s (s (plus (X, Y)))
   REC_E: plus (p (X), p (Y)) -> p (p (plus (X, Y)))
   REC_E: plus (s (X), p (Y)) -> plus (X, Y)
   REC_E: plus (p (X), s (Y)) -> plus (X, Y)
   REC_E: gte (d0(), d0()) -> true()
   REC_E: gte (d0(), s (Y)) -> false()
   REC_E: gte (d0(), p (Y)) -> true()
   REC_E: gte (s (X), d0()) -> true()
   REC_E: gte (s (X), s (Y)) -> gte (X, Y)
   REC_E: gte (s (X), p (Y)) -> true()
   REC_E: gte (p (X), d0()) -> false()
   REC_E: gte (p (X), s (Y)) -> false()
   REC_E: gte (p (X), p (Y)) -> gte (X, Y)
   REC_E: equal (X, Y) -> and (gte (X, Y), gte (Y, X))
   REC_E: d1() -> s (d0())
   REC_E: d2() -> s (s (d0()))
   REC_E: d3() -> s (s (s (d0())))
   REC_E: m1() -> p (d0())
   REC_E: m2() -> p (p (d0()))
   REC_E: moves() -> cm (mov (missionary_rows_east(), m1(), d0(), d1(), d0(), east()),cm (mov (two_missionaries_row_east(), m2(), d0(), d2(), d0(), east()),cm (mov (missionary_and_cannibal_row_east(), m1(), m1(), d1(), d1(), east()),cm (mov (cannibal_rows_east(), d0(), m1(), d0(), d1(), east()),cm (mov (two_cannibals_row_east(), d0(), m2(), d0(), d2(), east()),cm (mov (missionary_rows_west(), d1(), d0(), m1(), d0(), west()),cm (mov (two_missionaries_row_west(), d2(), d0(), m2(), d0(), west()),cm (mov (missionary_and_cannibal_row_west(), d1(), d1(), m1(), m1(), west()),cm (mov (cannibal_rows_west(), d0(), d1(), d0(), m1(), west()),cm (mov (two_cannibals_row_west(), d0(), d2(), d0(), m2(), west()), nil_ml()))))))))))
   REC_E: member (NP, nil_pl()) -> false()
   REC_E: member (NP, cp (Posi, Prev)) -> true() where equal-after-eval (|NP, Posi)
   REC_E: member (NP, cp (Posi, Prev)) -> member (NP, Prev) where not (equal-after-eval (|NP, Posi))
   REC_E: evalct (T, Xfail()) -> Xfail()
   REC_E: evalct (T, TL) -> ct (T,TL) where not (equal-after-eval (|TL, Xfail()))
   REC_E: gte_tl (TL, nil_tl()) -> true()
   REC_E: gte_tl (nil_tl(), ct (T, TL)) -> false()
   REC_E: gte_tl (ct (T, TL), ct (T2, TL2)) -> gte_tl (TL, TL2)
   REC_E: best (Xfail(), TL) -> TL
   REC_E: best (TL, Xfail()) -> TL
   REC_E: best (TL, TL2) -> TL2 where equal-after-eval (|gte_tl (TL, TL2), true()) ; not (equal-after-eval (|TL, Xfail())) ; not (equal-after-eval (|TL2, Xfail()))
   REC_E: best (TL, TL2) -> TL where equal-after-eval (|gte_tl (TL, TL2), false()) ; not (equal-after-eval (|TL, Xfail())) ; not (equal-after-eval (|TL2, Xfail()))
   REC_E: solve (Posi, Final, Prev) -> nil_tl() where equal-after-eval (|Posi, Final)
   REC_E: solve (Posi, Final, Prev) -> try (moves(), Posi, Final, Prev) where not (equal-after-eval (|Posi, Final))
   REC_E: try (nil_ml(), Posi, Final, Prev) -> Xfail()
   REC_E: try (cm (M, ML), Posi, Final, Prev) -> best (apply (M, Posi, Final, Prev), try (ML, Posi, Final, Prev))
   REC_E: apply (mov (T, DMW, DCW, DME, DCE, D), pos (B, MW, CW, ME, CE), Final, Prev) -> check (T, pos (D, plus (MW, DMW), plus (CW, DCW), plus (ME, DME), plus (CE, DCE)), Final, Prev) where not (equal-after-eval (|D, B))
   REC_E: apply (mov (T, DMW, DCW, DME, DCE, D), pos (B, MW, CW, ME, CE), Final, Prev) -> Xfail() where equal-after-eval (|D, B)
   REC_E: check (T, NP, Final, Prev) -> evalct (T, solve (NP, Final, cp (NP, Prev))) where equal-after-eval (|member (NP, Prev), false()) ; equal-after-eval (|valid (NP), true())
   REC_E: check (T, NP, Final, Prev) -> Xfail() where equal-after-eval (|member (NP, Prev), true())
   REC_E: check (T, NP, Final, Prev) -> Xfail() where equal-after-eval (|valid (NP), false())
   REC_E: valid (pos (B, MW, CW, ME, CE)) -> and (gte (MW, d0()), and (gte (CW, d0()), and (gte (ME, d0()), and (gte (CE, d0()), and (or (equal (MW, d0()), gte (MW, CW)), or (equal (ME, d0()), gte (ME, CE)))))))

strategies
   eval = memo (innermost (REC_E))
   equal-after-eval (|m1, m2) = equal (|<eval> m1, <eval> m2)
   eval-and-print = eval ; debug (!"result = ")
   main = 
      (<eval-and-print> solve (pos (west(), d3(), d3(), d0(), d0()), pos (east(), d0(), d0(), d3(), d3()), nil_pl())) ;
      <exit> 0
