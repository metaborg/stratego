module fib32

imports strategolib

signature

sorts
   Bool Pos Int Nat

constructors
   T : Bool 
   F : Bool 
   d1 : Pos 
   cDub : Bool * Pos -> Pos 
   cInt : Nat -> Int 
   cNeg : Pos -> Int 
   d0 : Nat 
   cNat : Pos -> Nat 
   Xnot : Bool -> Bool 
   eqPos : Pos * Pos -> Bool 
   lePos : Pos * Pos -> Bool 
   ltPos : Pos * Pos -> Bool 
   s : Pos -> Pos 
   addc : Bool * Pos * Pos -> Pos 
   Int2Nat : Int -> Nat 
   minus : Nat -> Int 
   minus2 : Nat * Nat -> Int 
   eq : Nat * Nat -> Bool 
   Pos2Nat : Pos -> Nat 
   Nat2Pos : Nat -> Pos 
   le : Nat * Nat -> Bool 
   lt : Nat * Nat -> Bool 
   ge : Nat * Nat -> Bool 
   gt : Nat * Nat -> Bool 
   pre : Pos -> Nat 
   dub : Bool * Nat -> Nat 
   plus : Nat * Nat -> Nat 
   gtesubtPos : Pos * Pos -> Nat 
   gtesubt : Nat * Nat -> Nat 
   gtesubtb : Bool * Pos * Pos -> Nat 
   fib : Nat -> Nat 
   eqBool : Bool * Bool -> Bool 
   and : Bool * Bool -> Bool 

rules
   REC_E: eqBool (T(),b) -> b
   REC_E: eqBool (F(),T()) -> F()
   REC_E: eqBool (F(),F()) -> T()
   REC_E: and (T(),b) -> b
   REC_E: and (F(),b) -> F()
   REC_E: Xnot (T()) -> F()
   REC_E: Xnot (F()) -> T()
   REC_E: eqPos (d1(),d1()) -> T()
   REC_E: eqPos (d1(),cDub (b,p)) -> F()
   REC_E: eqPos (cDub (b,p),d1()) -> F()
   REC_E: eqPos (cDub (b,p),cDub (c,q)) -> and (eqBool (b,c),eqPos (p,q))
   REC_E: lePos (d1(),p) -> T()
   REC_E: lePos (cDub (b,p),d1()) -> F()
   REC_E: lePos (cDub (b,p),cDub (c,q)) -> lePos (p,q) where equal-after-eval (|b, c)
   REC_E: lePos (cDub (b,p),cDub (c,q)) -> lePos (p,q) where not (equal-after-eval (|b, c)) ; equal-after-eval (|b, F())
   REC_E: lePos (cDub (b,p),cDub (c,q)) -> ltPos (p,q) where not (equal-after-eval (|b, c)) ; equal-after-eval (|b, T())
   REC_E: ltPos (p,d1()) -> F()
   REC_E: ltPos (d1(),cDub (b,p)) -> T()
   REC_E: ltPos (cDub (b,p),cDub (c,q)) -> ltPos (p,q) where equal-after-eval (|b, c)
   REC_E: ltPos (cDub (b,p),cDub (c,q)) -> lePos (p,q) where not (equal-after-eval (|b, c)) ; equal-after-eval (|b, F())
   REC_E: ltPos (cDub (b,p),cDub (c,q)) -> ltPos (p,q) where not (equal-after-eval (|b, c)) ; equal-after-eval (|b, T())
   REC_E: s (d1()) -> cDub (F(),d1())
   REC_E: s (cDub (F(),p)) -> cDub (T(),p)
   REC_E: s (cDub (T(),p)) -> cDub (F(),s (p))
   REC_E: addc (F(),d1(),p) -> s (p)
   REC_E: addc (T(),d1(),p) -> s (s (p))
   REC_E: addc (F(),p,d1()) -> s (p)
   REC_E: addc (T(),p,d1()) -> s (s (p))
   REC_E: addc (b,cDub (c,p),cDub (d,q)) -> cDub (b,addc (c,p,q)) where equal-after-eval (|c, d)
   REC_E: addc (b,cDub (c,p),cDub (d,q)) -> cDub (Xnot (b),addc (c,p,q)) where not (equal-after-eval (|c, d))
   REC_E: Int2Nat (cInt (n)) -> n
   REC_E: minus (d0()) -> cInt (d0())
   REC_E: minus (cNat (p)) -> cNeg (p)
   REC_E: minus2 (m,n) -> cInt (gtesubt (m,n)) where equal-after-eval (|ge (m,n), T())
   REC_E: minus2 (m,n) -> minus (gtesubt (n,m)) where equal-after-eval (|ge (m,n), F())
   REC_E: Pos2Nat (p) -> cNat (p)
   REC_E: Nat2Pos (cNat (p)) -> p
   REC_E: eq (d0(),d0()) -> T()
   REC_E: eq (d0(),cNat (p)) -> F()
   REC_E: eq (cNat (p),d0()) -> F()
   REC_E: eq (cNat (p),cNat (q)) -> eqPos (p,q)
   REC_E: le (d0(),n) -> T()
   REC_E: le (cNat (p),d0()) -> F()
   REC_E: le (cNat (p),cNat (q)) -> lePos (p,q)
   REC_E: lt (n,d0()) -> F()
   REC_E: lt (d0(),cNat (p)) -> T()
   REC_E: lt (cNat (p),cNat (q)) -> ltPos (p,q)
   REC_E: ge (m,n) -> le (n,m)
   REC_E: gt (m,n) -> lt (n,m)
   REC_E: pre (d1()) -> d0()
   REC_E: pre (cDub (T(),p)) -> cNat (cDub (F(),p))
   REC_E: pre (cDub (F(),p)) -> dub (T(),pre (p))
   REC_E: dub (F(),d0()) -> d0()
   REC_E: dub (T(),d0()) -> cNat (d1())
   REC_E: dub (b,cNat (p)) -> cNat (cDub (b,p))
   REC_E: plus (d0(),n) -> n
   REC_E: plus (n,d0()) -> n
   REC_E: plus (cNat (p),cNat (q)) -> cNat (addc (F(),p,q))
   REC_E: gtesubtPos (p,q) -> gtesubtb (F(),p,q)
   REC_E: gtesubt (n,d0()) -> n
   REC_E: gtesubt (cNat (p),cNat (q)) -> gtesubtPos (p,q)
   REC_E: gtesubtb (F(),p,d1()) -> pre (p)
   REC_E: gtesubtb (T(),p,d1()) -> pre (Nat2Pos (pre (p)))
   REC_E: gtesubtb (b,cDub (c,p),cDub (d,q)) -> dub (b,gtesubtb (b,p,q)) where equal-after-eval (|c, d)
   REC_E: gtesubtb (b,cDub (c,p),cDub (d,q)) -> dub (Xnot (b),gtesubtb (T(),p,q)) where not (equal-after-eval (|c, d)) ; equal-after-eval (|c, F())
   REC_E: gtesubtb (b,cDub (c,p),cDub (d,q)) -> dub (Xnot (b),gtesubtb (d,p,q)) where not (equal-after-eval (|c, d)) ; equal-after-eval (|c, T())
   REC_E: fib (d0()) -> d0()
   REC_E: fib (cNat (d1())) -> cNat (d1())
   REC_E: fib (cNat (cDub (b,p))) -> plus (fib (Int2Nat (minus2 (cNat (cDub (b,p)),Pos2Nat (d1())))),fib (Int2Nat (minus2 (cNat (cDub (b,p)),Pos2Nat (cDub (F(),d1()))))))

strategies
   eval = memo (innermost (REC_E))
   equal-after-eval (|m1, m2) = equal (|<eval> m1, <eval> m2)
   eval-and-print = eval ; debug (!"result = ")
   main = 
      (<eval-and-print> fib (Pos2Nat (cDub (F(),cDub (F(),cDub (F(),cDub (F(),cDub (F(),d1())))))))) ;
      <exit> 0
