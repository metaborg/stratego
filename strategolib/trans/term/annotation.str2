/**
 * Primitives for getting and setting term annotations.
 *
 * The preferred way to access annotations, however,
 * is through the term syntax t1{t2}, which allows matching and
 * building terms with annotations.
 */
module term/annotation

imports
  strategy/traversal/simple
  collection/list/cons
  collection/tuple/cons

signature
  sorts
    Anno
  constructors
    Anno : ? * ? -> Anno

strategies

  /**
   * Alias of get-annotations.
   *
   * @inc test-get-annos
   */
  get-annos :: ? -> List(?)
  get-annos =
    get-annotations

  /**
   * Returns the list of annotations of the current term.
   */
  get-annotations :: ? -> List(?)
  get-annotations :
    t{t*} -> t*

  /**
   * Alias of set-annotations.
   *
   * @inc test-set-annos
   */
  set-annos :: a * List(?) -> a
  set-annos =
    set-annotations

  /**
   * Sets the annotations of the given term t to the annotations a.
   */
  set-annotations :: a * List(?) -> a
  set-annotations :
    (t, t*) -> t{t*}

  set-anno :: a * ? -> a
  set-anno :
    (t1, t2) -> t1{t2}

  rm-annotations :: a -> a
  rm-annotations = ?t; !t{}

  /**
   * Succeeds if a term has annotations.
   *
   * @inc test-has-annos
   */
  has-annos :: a -> a
  has-annos =
    ?_{t,t*}

  has-annotation :: a -> a
  has-annotation =
    has-annos

  if-annotation(a -> b, a -> b) :: a -> b
  if-annotation(s1, s2) =
    has-annotation < s1 + s2

  strip-annos :: a -> a
  strip-annos =
    bottomup(rm-annotations)

  catch-annos :: ? -> ?
  catch-annos =
    rec x(has-annotation < !Anno(<rm-annotations; all(x)>, <get-annotations>) + all(x))

  /**
   * Alias of preserve-annos
   */
  preserve-annotation(a -> b) :: a -> b
  preserve-annotation(s) =
    preserve-annos(s)

  preserve-annos(a -> b) :: a -> b
  preserve-annos(s):
    t{a*} -> r{a*}
      where <s> t => r
