/**
 * Some primitives for the manipulation of terms.
 */
module term/common
imports
  strategy/traversal/simple
  collection/list/cons
  collection/list/common
  collection/list/set
  collection/tuple/cons
  term/integer
  term/string

strategies

 /**
  * Build a term given a constructor name and a list of terms.
  *
  * Note that this primitive strategy has been turned into a language construct.
  *
  * The pattern f#(xs) denotes the decomposition of a term into its function symbol
  * f and its list of arguments xs. This pattern can be used in matching ?f#(xs)
  * and building !f#(xs) terms (so also in left- and right-hand sides of rules) and
  * also as a congruence s1#(s2).
  *
  * E.g. <mkterm> (f, [t1,...,tn])  builds the constructor application f(t1,...,tn).
  */
  mkterm :: ? * List(?) -> ?
  mkterm = ?(<id>,ts); internal-mkterm(|ts)

  external internal-mkterm :: (|List(?)) ? -> ?

 /**
  * Decompose a term into a constructor name and a list of terms.
  *
  * Note that this primitive strategy has been turned into a language construct.
  *
  * The pattern f#(xs) denotes the decomposition of a term into its function symbol
  * f and its list of arguments xs. This pattern can be used in matching ?f#(xs)
  * and building !f#(xs) terms (so also in left- and right-hand sides of rules) and
  * also as a congruence s1#(s2).
  *
  * E.g. <explode-term> f(t1,...,tn) is the inverse of mkterm and produces (f, [t1,...,tn]).
  *
  * Note that explode-term is equivalent to !(<get-constructor>, <get-arguments>).
  */
  external explode-term :: (|) ? -> ? * List(?)

 /**
  * Get the constructor of a term.
  *
  * Note that explode-term is equivalent to !(<get-constructor>, <get-arguments>).
  */
  external get-constructor :: (|) ? -> ?

 /**
  * Get the arguments of a term.
  *
  * Note that explode-term is equivalent to !(<get-constructor>, <get-arguments>).
  */
  external get-arguments :: (|) ? -> List(?)

  /**
   * Get the arguments of a term application.
   */
  get-appl-arguments :: ? -> List(?)
  get-appl-arguments =
    get-appl-arguments(id)

  /**
   * Get the arguments of a term application, applying s to the individual arguments.
   *
   * @param a -> b
   * @type f(a1 ... an) -> [b1 ... bn]
   */
  external get-appl-arguments :: (? -> a|) ? -> List(a)

 /**
  * Compare the address of two terms and succeeds if the address of the first is
  * smaller than the address of the second.
  *
  * This predicate induces a total ordering on terms and can be used to sort terms.
  * Note that this relation is valid in one session (but what happens after
  * rehashing), but not necessarily between two sessions.
  */
  // Overridden to not use term-address-lt but checksum comparison since the original
  //   implementation was on maximally shared terms.
  address-lt :: a * b -> a * b
  address-lt =
    where((checksum, checksum) ; string-lt)

  /**
   * Compare the address of two terms and succeeds if the address of the current
   * term is smaller than the address of the argument.
   */
  // Overridden to not use term-address-lt but checksum comparison since the original
  //   implementation was on maximally shared terms.
  term-address-lt(|b) :: a -> a
  term-address-lt(|t2) =
    where(?t1 ; <address-lt> (t1,t2))

 /**
  * Give the address of a term.
  *
  * <address> t replaces t with its address (represented as a string).
  * This can be used to obtain a unique symbolic reference to a term.
  */
  external address :: (|) ? -> string

 /**
  * Give checksum of a term. Similar to atsum from aterm package.
  */
  external checksum :: (|) ? -> string

strategies

  crush(List(c) -> b, ? * b -> b) :: ? -> b
  crush(nul, sum) :
    _#(xs) -> <foldr(nul,sum)> xs

  crush(List(d) -> b, c * b -> b, ? -> c) :: ? -> b
  crush(nul, sum, s) :
    _#(xs) -> <foldr(nul,sum, s)> xs

strategies

  node-size :: ? -> int
  node-size =
    crush(!0, addi, !1)

  term-size :: ? -> int
  term-size =
    crush(!1, addi, term-size)

strategies

//  at-depth(Tuple() -> int, TP) :: TP
  at-depth(Tuple() -> int, ? -> ?) :: ? -> ?
  at-depth(depth, s) =
      !(<depth> (), <id>)
    ; topdown(
        {d :
           ?(0, <s> )
        <+ ?(d, <id>); all(!(<dec> d, <id>))
        }
      )

/**
 * Occurence Counting.
 */
strategies

  om-occurrences(? -> ?) :: ? -> int
  om-occurrences(s) =
    if s then !1 else crush(!0, addi, om-occurrences(s)) end

  occurrences(? -> ?) :: ? -> int
  occurrences(s) =
    <addi> (<if s then !1 else !0 end>, <crush(!0, addi, occurrences(s))>)

