/**
 * sunit: Unit Testing Framework.
 */
module util/sunit
imports
  system/io/file
  system/io/dir
  system/io/char
  system/io/term
  term/string
  term/integer
  collection/tuple/cons

strategies
  test-suite(a -> ?, int * int -> int * int) :: a -> int * int
  test-suite(name, tests) =
    name
    ; debug(!"test suite: ")
    ; init-record
    ; tests
    ; report-test
    ; check-for-failures

  apply-test(? -> ?, ? -> ?, ? -> ?, ? -> ?) :: int * int -> int * int
  apply-test(name, s, in-term, out) =
    do-test(name,
            (sunit-create-input(in-term); s <+ <print-failure> "  strategy failed"; fail) => tmp;
          sunit-create-output(out) => tmp';
        ((!tmp' => tmp)
               <+ (<print-failure(|"  result not equal : ")> tmp;
                   <print-failure(|"  expected         : ")> tmp'); fail))

  apply-test(? -> ?, ? -> ?, ? -> ?) :: int * int -> int * int
  apply-test(name, s, in-term) =
    do-test(name,
      (sunit-create-input(in-term); s <+ <print-failure> "  strategy failed"; fail)
    )

  apply-and-check(? -> ?, ? -> ?, ? -> ?, ? -> ?) :: int * int -> int * int
  apply-and-check(name, s, in-term, check) =
    do-test(name,
      (sunit-create-input(in-term); s  <+ <print-failure> "  application failed"; fail)
      ; (check <+ (print-failure(|"  check failed: "); fail))
    )

  apply-and-fail(? -> ?, ? -> ?, ? -> ?) :: int * int -> int * int
  apply-and-fail(name, s, in-term) =
    apply-and-fail(name, s, in-term, !())

  apply-and-fail(? -> ?, ? -> ?, ? -> ?, ? -> ?) :: int * int -> int * int
  apply-and-fail(name, s, in-term, out) =
    do-test(name,
        ((sunit-create-input(in-term); not(s))
             <+ <print-failure> "  succeeded (should fail)"; fail))

  apply-and-show(? -> ?, ? -> ?, ? -> ?) :: int * int -> int * int
  apply-and-show(name, s, in-term) =
    do-test(name
       ,(sunit-create-input(in-term); s <+ <print-failure> "  strategy failed"; fail)
            ; <debug> ["  succeeded; result: ", <id>]
           )

/**
 * Term arguments variants of the old sunit strategies
 */
strategies

  apply-test(? | ?, ?, ?) :: int * int -> int * int
  apply-test(s | name, in-term, out) =
    apply-test(!name, s, !in-term, !out)

  apply-test(? | ?, ?) :: int * int -> int * int
  apply-test(s | name, in-term) =
    apply-test(!name, s, !in-term)

  apply-and-check(? | ?, ?, ?) :: int * int -> int * int
  apply-and-check(s | name, in-term, check) =
    apply-and-check(!name, s, !in-term, !check)

  apply-and-fail(? | ?, ?) :: int * int -> int * int
  apply-and-fail(s | name, in-term) =
    apply-and-fail(!name, s, !in-term)

  apply-and-fail(? | ?, ?, ?) :: int * int -> int * int
  apply-and-fail(s | name, in-term, out) =
    apply-and-fail(!name, s, !in-term, !out)

  apply-and-show(? | ?, ?) :: int * int -> int * int
  apply-and-show(s | name, in-term) =
    apply-and-show(!name, s, !in-term)

/**
 * Internal helpers
 */
strategies

  sunit-create-input(a -> b) :: a -> b
  sunit-create-input(s) =
    s <+ say(!"error: input strategy for this test failed"); fail

  sunit-create-output(a -> b) :: a -> b
  sunit-create-output(s) =
    s <+ say(!"error: output strategy for this test failed"); fail

  do-test(? -> ?, ? -> ?) :: int * int -> int * int
  do-test(nr, s) =
    where(nr; debug)
    ; (where(s); record-success
       <+ record-failure)

  testing(? -> ?, ? -> ?) :: int * int -> int * int
  testing(nr, s) =
    do-test(nr, s; debug(!"  succeeded: ")
           <+ debug(!"  failed: "); fail)

  do-test(? -> ? | ?) :: int * int -> int * int
  do-test(s | nr) =
    where(<debug>nr )
  ; ( where(s) ; record-success <+ record-failure )

/**
 * Test results are stored in a tuple of two integers. This tuple is
 * passed from test to test. (success, failure)
 */
strategies
  init-record :: ? -> int * int
  init-record =
    !(0,0)

  /**
   * Internal: record a successful test
   */
  record-success :: int * a -> int * a
  record-success =
    (int-inc, id)

  /**
   * Internal: record a failed test
   */
  record-failure :: a * int -> a * int
  record-failure =
    (id, int-inc)

  /**
   * Internal: fails if there was a failure
   */
  check-for-failures :: a * int -> a * int
  check-for-failures =
    (id, 0)

  /**
   * Internal: report the number of successes and failures
   */
  report-test :: a * b -> a * b
  report-test =
    (debug(!"successes: "), debug(!"failures: "))

  print-failure :: string -> string
  print-failure =
    sunit-failure-string
    ; debug

  print-failure(|string) :: a -> a
  print-failure(|msg) =
    debug(<sunit-failure-string> msg)

strategies

  /**
   * @type String -> String
   */
  sunit-failure-string :: string -> string
  sunit-failure-string =
    if <getenv> "ENABLE_COLORS" => "true" then
      <concat-strings> [
        <sunit-color-red>
      , <id>
      , <sunit-color-plain>
      ]
    end

  sunit-color-red :: ? -> string
  sunit-color-red =
    <conc-strings> (<implode-string> [27], "[01;31m")

  sunit-color-plain :: ? -> string
  sunit-color-plain =
    <conc-strings> (<implode-string> [27], "[m")
