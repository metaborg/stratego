/**
 * Run-time process information
 */
module system/posix/process
imports
  system/posix/signal
  system/io/file
  system/io/dir
  system/io/char
  system/io/term
  system/error

  collection/tuple/cons

  term/string
  util/config/verbose

strategies

  /**
   * The  setenv() function adds the variable name to the
   * environment with the value value, if  name  does  not  already
   * exist.   If  name  does exist in the environment, then its
   * value is changed to value if  overwrite  is  non-zero;  if
   * overwrite  is zero, then the value of name is not changed.
   *
   * Warning: not implemented
   */
  setenv :: string * string * int -> string * string * int
  setenv =
    ?(name, value, overwrite)
    ; where(<internal-setenv(|value, overwrite)> name)

  external internal-setenv :: (|string, int) string -> string

strategies

  /**
   * Return process identifier of current process
   *
   * Warning: not implemented
   */
  external get-pid :: (|) ? -> int

/**
 * Process creation
 */
strategies

  /**
   * Creates a child process almost equivalent to the parent process.
   *
   * The new process differs from the parent process
   * only in its PID and PPID, and in the fact that resource
   * utilizations  are  set  to  0. File locks and pending signals are not
   * inherited.
   *
   * Fails if forking fails, in which case no child process is created.
   * On success, the PID of the child process is returned  in  the  parent's
   * thread  of execution, and a 0 is returned in the child's thread of exe-
   * cution.
   *
   * Warning: not implemented
   */
  external fork :: (|) ? -> int

  /**
   * Replaces the current process image with a new  process image.
   *
   * Warning: not implemented
   *
   * @see      man execvp
   * @warning  The first arugment is added in the runtime.
   */
  execvp :: ? * ? -> ?
  execvp =
    ?(file, argv)
    ; <internal-execvp(|argv)> file
    ; where(<conc-strings; perror; fail> ("SSL/execvp: Cannot execute file ", file))

  external internal-execvp :: (|?) ? -> ?

  /**
   * Replaces the current process image with a new  process image.
   *
   * Warning: not implemented
   *
   * @see      man execv
   * @warning  The first arugment is not added in the runtime.
   * @warning  If the
   */
  execv :: ? * ? -> ?
  execv =
    ?(file, argv)
    ; <internal-execv(|argv)> file
    ; where(<conc-strings; perror; fail> ("SSL/execv: Cannot execute file ", file))

  external internal-execv :: (|?) ? -> ?

/**
 * Process termination
 */
strategies

  /**
   * Warning: not implemented
   */
  external waitpid :: (|) int -> WaitStatus

signature
  sorts
    WaitStatus
  constructors
    /**
     * Collects the information returned from a wait call.
     *
     * (1) Exit status or -1 if process did not terminate properly
     * (2) Signal number or -1 if the process wasn't terminated because of a signal
     * (3) Signal number or -1 if the process wasn't stopped
     */
    WaitStatus : int * int * int -> WaitStatus

/**
 * Terminating Another Process
 */
strategies

  /**
   * Sends the specified signal to the specified process.
   *
   * Warning: not implemented
   *
   * @fail fails on failure of the kill invocation
   * @type Int * Signal -> Int * Signal
   */
  kill :: int * Signal -> int * Signal
  kill =
    where(
      ?(pid, <number-from-signal; ?sig>)
    ; <internal-kill(|sig)> pid
    )

  external internal-kill :: (|int) int -> int
