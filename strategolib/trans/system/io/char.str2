/**
 * Character based in-/output.
 */
module system/io/char
imports
  system/io/-
  term/string
  strategy/iteration
  collection/list/common
  collection/list/cons
  collection/tuple/cons

strategies

  /**
   * Reads the contents of a textfile.
   *
   * @type String -> String
   */
  read-text-file :: string -> string
  read-text-file =
    ?file
    ; <fopen> (file,"r") => stream
    ; read-text-from-stream
    ; where(<fclose> stream)

  /**
   * Reads all characters until EOF.
   * The stream is not closed.
   *
   * @type Stream -> String
   */
  read-text-from-stream :: Stream -> string
  read-text-from-stream =
      ?stream
    ; rec x(![<fgetc> stream | <x> NoStream()] <+ ![])
    ; implode-string

  /**
   * Reads the next line of text in stream.
   * Line is ended by newline or EOF.
   *
   * @type Stream -> String
   */
  read-text-line :: Stream -> string
  read-text-line =
    ?stream
    ; rec x(![<fgetc; not(?'\n')> stream | <x> NoStream()] <+ ![])
    ; implode-string

strategies

  /**
   * Filters the contents of a textfile character chunk by character chunk.
   *
   * 'done' determines when a chunk is complete
   *        should fail to indicate completeness
   *
   * 'more' transforms current chunck after adding next character
   *        should always succeed
   *
   * Note that the characters in a chunk are in reverse order.
   *
   * @type (String, String) -> String
   */
  filter-text-file(List(Char) -> List(Char), List(Char) -> List(Char)) :: string * string -> string
  filter-text-file(more, done) :
    (filein, fileout) -> fileout
    where <fopen>(filein, "r") => streamin
        ; <fopen>(fileout, "w") => streamout
        ; repeat(
            where(
              for(![<fgetc> streamin]; more, done, ![<fgetc> streamin | <id>]; more)
            ; reverse-map(<fputc> (<id>, streamout))
            )
          )
        ; <fclose> streamin
        ; <fclose> streamout

