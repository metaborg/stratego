/**
 * This module provides some basic strategies for inspecting
 * the runtime stack of strategies.
 *
 * There are numerous caveats to be aware of:
 *
 * <ul>
 * <li>Because of inlining, the trace might not contain all
 *     strategies which are on the stack.</li>
 * <li>If libraries compiled with other compilers are called,
 *     stack frames from strategies here will be invisible.</li>
 * <li>Lifted strategies will appear in the trace, but the names
 *     might be non-instructive, depending on the compiler version
 *     used.</li>
 * </ul>
 *
 * @author Karl Trygve Kalleberg <karltk@strategoxt.org>
 *
 */
module lang/stacktrace

imports
  strategy/conditional
  strategy/iteration
  collection/list/cons
  collection/list/common
  system/io/term
  system/io/file

strategies

  /**
   * Return a list of all the current stack frame namess. A stack
   * frame name is the name of the rule or strategy on a given
   * stack frame. The list might not be complete; refer to the module
   * documentation for lang/stacktrace for details.
   */
  external stacktrace-get-all-frame-names :: (|) ? -> List(string)

  /**
   * Return the name of the currently active stack frame. This
   * strategy returns the name of the strategy that calls
   * stacktrace-get-current-frame, with certain restrictions,
   * see the lang/stacktrace module documentation.
   */
  external stacktrace-get-current-frame-name :: (|) ? -> string

  /**
   * Return the index (depth) of the current stack, including the call to this
   * strategy.
   */
  external stacktrace-get-current-frame-index :: (|) ? -> int

  print-stacktrace :: a -> a
  print-stacktrace =
    where(
      stacktrace-get-all-frame-names
    ; try(?["print_stacktrace_0_0" | <id>])
    ; reverse
    ; list-loop(<fprintnl> (stderr(), ["\t", <id>]))
    )

