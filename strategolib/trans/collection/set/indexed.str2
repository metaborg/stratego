/**
 * Interface to ATerm's IndexedSets.
 *
 * @since   0.11
 * @author  Martin Bravenboer <martin.bravenboer@gmail.com>
 */
module collection/set/indexed

imports
  collection/list/cons
  collection/list/common
  strategy/iteration

/**
 * IndexedSet representations
 */
signature
  sorts
    IndexedSet
    IndexedSetImplBlob
  constructors
    IndexedSet : IndexedSetImplBlob -> IndexedSet
    : blob -> IndexedSetImplBlob

/**
 * IndexedSet construction and deconstruction
 */
strategies

  /**
   * Creates a new set with default initial size and maximum load.
   *
   * @type  _ -> IndexedSet
   */
  new-iset :: ? -> IndexedSet
  new-iset =
    new-iset(|117,75)

  /**
   * Creates a new set with specified initial size and maximum load.
   *
   * @param  Int, Initial size of internal storage
   * @param  Int, 0-100.
   * @type   _ -> IndexedSet
   */
  new-iset(|int, int) :: ? -> IndexedSet
  new-iset(|initial_size, max_load) =
    !IndexedSet(<internal-indexed-set-create(|initial_size)> max_load)

  external internal-indexed-set-create :: (|int) int -> IndexedSetImplBlob

  /**
   * Releases all memory occupied by the set.
   * A destroyed set can no longer be used.
   *
   * @type  IndexedSet -> IndexedSet
   */
  iset-destroy :: IndexedSet -> IndexedSet
  iset-destroy =
    IndexedSet(internal-indexed-set-destroy)

  external internal-indexed-set-destroy :: (|) IndexedSetImplBlob -> IndexedSetImplBlob

  /**
   * Removes all elements from the set.
   *
   * @type  IndexedSet -> IndexedSet
   */
  iset-clear :: IndexedSet -> IndexedSet
  iset-clear =
    IndexedSet(internal-indexed-set-reset)

  external internal-indexed-set-reset :: (|) IndexedSetImplBlob -> IndexedSetImplBlob

/**
 * IndexedSet operations
 */
strategies

  /**
   * Adds elem to the set.
   *
   * If the elem is already in the set, then on_old is applied to
   * its index.
   *
   * @param  Int -> a
   * @type   IndexedSet -> (Int | a )
   */
  iset-add(int -> int|?) :: IndexedSet -> int
  iset-add(on_old|elem) =
    ?IndexedSet(<internal-indexed-set-put(on_old|elem)>)

  external internal-indexed-set-put :: (int -> int|?) IndexedSetImplBlob -> int

  /**
   * Ensures that elem is in the set.
   *
   * @type IndexedSet -> IndexedSet
   */
  iset-add(|?) :: IndexedSet -> IndexedSet
  iset-add(|elem) =
    ?set; iset-add(id|elem); !set

  /**
   * Ensures that all elems in the specified list are in the set.
   *
   * @type IndexedSet -> IndexedSet
   */
  iset-addlist(|List(?)) :: IndexedSet -> IndexedSet
  iset-addlist(|lst) =
    ?set; <map({ elem: ?elem; <iset-add(|elem)> set })> lst; !set

  /**
   * Fails if elem is not in the set.
   *
   * @type  IndexedSet -> IndexedSet
   */
  iset-contains(|?) :: IndexedSet -> IndexedSet
  iset-contains(|elem) =
    where(iset-get-index(|elem))

  /**
   * Removes elem from set.
   *
   * If the elements is not in the set, then this strategy does not fail.
   *
   * @type  IndexedSet -> IndexedSet
   */
  iset-remove(|?) :: IndexedSet -> IndexedSet
  iset-remove(|elem) =
    IndexedSet(internal-indexed-set-remove(|elem))

  external internal-indexed-set-remove :: (|?) IndexedSetImplBlob -> IndexedSetImplBlob

  /**
   * Returns all elements of the set.
   *
   * @type  IndexedSet(a) -> List(a)
   */
  iset-elements :: IndexedSet -> List(?)
  iset-elements =
    ?IndexedSet(<internal-indexed-set-elements>)

  external internal-indexed-set-elements :: (|) IndexedSetImplBlob -> List(?)

  /**
   * Unites a set with another.
   *
   * @param  IndexedSet
   * @type   IndexedSet -> IndexedSet
   */
  iset-union(|IndexedSet) :: IndexedSet -> IndexedSet
  iset-union(|set2) =
    ?set1
  ; where(<iset-elements; map({ elem: ?elem; <iset-add(|elem)> set1 })> set2)

  /**
   * Intersects a set with another.
   *
   * @param  IndexedSet
   * @type   IndexedSet -> IndexedSet
   */
  iset-isect(|IndexedSet) :: IndexedSet -> IndexedSet
  iset-isect(|set2) =
    ?set1
  ; where(iset-elements
          ; map({ elem:
                  ?elem
                ; (<iset-contains(|elem)> set2
                   <+ <iset-remove(|elem)> set1)
                }))

  /**
   * Checks whether one set is a subset of another.
   *
   * @param  IndexedSet
   * @type   IndexedSet -> IndexedSet
   */
  iset-subset(|IndexedSet) :: IndexedSet -> IndexedSet
  iset-subset(|set2) =
    ?set1
  ; where(<iset-elements; map({ elem: ?elem; <iset-contains(|elem)> set1 })> set2)

  /**
   * Checks whether a set has equal contents as another.
   *
   * @param  IndexedSet
   * @type   IndexedSet -> IndexedSet
   */
  iset-eq(|IndexedSet) :: IndexedSet -> IndexedSet
  iset-eq(|set2) =
    ?set1
  ; where(iset-subset(|set2))
  ; where(<iset-subset(|set1)> set2)

  /**
   * Applies s to the elements of a Set until it no more elements are added to this set.
   *
   * @param a -> List(a)
   * @type  Set(A) -> Set(A)
   */
  iset-fixpoint(? -> List(?)) :: IndexedSet -> IndexedSet
  iset-fixpoint(s) =
    ?set@IndexedSet(_)
    ; repeat(
        where(
          iset-elements
        ; list-some(
            s
          ; list-some({new:
              ?new
            ; <iset-add(fail|new)> set
            })
          )
        )
      )

/**
 * Low-level set strategies (having knowledge of an index)
 */
strategies

  /**
   * Gets the index of elem in the set.
   *
   * Fails if elem is not in the set.
   *
   * @type  IndexedSet -> Int
   */
  iset-get-index(|?) :: IndexedSet -> int
  iset-get-index(|elem) =
    ?IndexedSet(<internal-indexed-set-get-index(|elem)>)

  external internal-indexed-set-get-index :: (|?) IndexedSetImplBlob -> int

  /**
   * Gets the element at index in the set.
   *
   * Always provide a valid index: behaviour is undefined if the index
   * is not in the set.
   *
   * @type  IndexedSet -> Int
   */
  iset-get-elem(|int) :: IndexedSet -> ?
  iset-get-elem(|index) =
    ?IndexedSet(<internal-indexed-set-get-elem(|index)>)

  external internal-indexed-set-get-elem :: (|int) IndexedSetImplBlob -> ?
