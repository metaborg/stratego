/**
 * Zipping two lists into a list of pairs is a useful operation
 * in many situations. There are many variants of zipping, for
 * instance in the way lists of unequal length are treated. This
 * module defines a collection of zip-like strategies for lists
 * based on one underlying control scheme.
 */
module collection/list/zip
imports
  collection/list/common
  collection/list/cons
  collection/list/filter
  collection/list/set
  collection/tuple/common
  collection/tuple/cons
  term/integer

strategies

  /**
   * Create the cartesian product of two lists, i.e., combine
   * each element of the first list which each element from the second
   * list. The strategy s is used to combine the pairs of elements
   * <s>(x,y).
   *
   * Example: <cart(id)> ([1,2],[5,6]) => [(1,5),(1,6),(2,5),(2,6)]
   */
  cart(a * b -> c) :: List(a) * List(b) -> List(c)
  cart(s) :
    (xs, ys) ->
    <foldr(![], conc, \ x -> <map(\y -> <s>(x, y)\ )> ys\ )> xs

  /**
   * Creates the cartesian product of two lists and select only
   * those combined elements <s>(x, y) that succeed.
   *
   * @param s              a * b -> c
   * @type     List(a) * List(b) -> List(c)
   */
  join(a * b -> c) :: List(a) * List(b) -> List(c)
  join(s) :
    (xs, ys) ->
    <foldr(![], union, \x -> <filter(\y -> <s>(x, y)\ )> ys\ )> xs

  /** @internal */
  Skip(a -> b) :: List(c) * d -> c * (List(c) * d)
  Skip(s) : ([x|xs], ys) -> (x, (xs, ys))

strategies

  /** @internal */
  genzip(i -> o, i -> a * i, b * o -> o, a -> b) :: i -> o
  genzip(empty, split, cons, s) =
    empty + split; (s, genzip(empty, split, cons, s)); cons

  /**
   * Combines two lists into one by pairing up the elements from both lists.
   * Both lists must be of equal length.
   *
   * Example: <zip> ([1,2], [3,4]) => [(1,3),(2,4)]
   *
   * @inc zip-test1
   *
   * @type List(a) * List(b) -> List(a * b)
   */
  zip :: List(a) * List(b) -> List(a * b)
  zip  = zip(id)

  /**
   * Combines two lists into one by pairing up the elements from both lists,
   * applying s to the pair. Starts at the beginning of the lists. Both lists
   * must be of equal length.
   *
   * Example: <zip(add)> ([1,2], [3,4]) => [4,6]
   *
   * @param s              a * b -> c
   * @type     List(a) * List(b) -> List(c)
   */
  zip(a * b -> c) :: List(a) * List(b) -> List(c)
  zip(s)  =
    genzip(Zip1,   Zip2,   Zip3,   s)

  zip'(a * b -> c) :: List(a) * List(b) -> List(c)
  zip'(s) =
    genzip(Zip1a' <+ Zip1b',   Zip2,   Zip3,   s)

  zipl(a * b -> c) :: List(a) * List(b) -> List(c)
  zipl(s) =
    genzip(Zip1a',   Zip2,   Zip3,   s)

  zipr(a * b -> c) :: List(a) * List(b) -> List(c)
  zipr(s) =
    genzip(Zip1b',   Zip2,   Zip3,   s)

  rest-zip(a * b -> c) :: List(a) * List(b) -> List(a) * List(b) * List(c)
  rest-zip(s) =
    let
      split :: List(a) * List(b) -> List(c)
      split = (?([],_) + ?(_,[])); ?(tla, tlb); ![]
    in
      genzip(split, Zip2, Zip3, s);
      !(tla, tlb, <id>)
    end

  /**
   * Combines two lists into one by pairing up the elements from both lists.
   * Both lists must be of equal length.
   *
   * @param Strategy s(|y : b) : a -> c
   * @param Second list : List(b)
   * @type List(a) -> List(c)
   */
  zip((|b) a -> c | List(b)) :: List(a) -> List(c)
  zip(s : t * t -> t | ys) =
    if ?[x | xtail] then
      where(!ys => [y | ytail])
      ; ![<s(|y)> x | <zip(s|ytail)> xtail]
    else
      ?[]
    end


strategies

  /**
   * Splits a list of pairs into two separate lists. This strategy
   * is the inverse of zip.
   *
   * Example: <unzip> [(1,2),(3,4)] => ([1,3],[2,4])
   *
   * @type     List(a * b) -> List(a) * List(b)
   */
  unzip :: List(a * b) -> List(a) * List(b)
  unzip = unzip(id)

  /**
   * Splits a list of pairs into two separate lists, applying s to
   * the pair before splitting. This strategy
   * is the inverse of zip.
   *
   * Example: <unzip((inc, inc))> [(1,2),(3,4)] => ([2,4],[3,5])
   *
   * @type     List(a * b) -> List(a) * List(b)
   */
  unzip(a -> b * c) :: List(a) -> List(b) * List(c)
  unzip(s) =
    genzip(UnZip1, UnZip3, UnZip2, s)

 /**
  * @inc nzip0-test
  */
  nzip0(int * a -> b) :: List(a) -> List(b)
  nzip0(s) =
    NZip00 ; genzip(NZip1,  NZip2,  NZip3,  s)
  nzip(int * a -> b) :: List(a) -> List(b)
  nzip(s) =
    NZip01 ; genzip(NZip1,  NZip2,  NZip3,  s)

  lzip(a * b -> c) :: List(a) * b -> List(c)
  lzip(s) =
    genzip(Zip1a', LZip2, Zip3, s)
  rzip(a * b -> c) :: a * List(b) -> List(c)
  rzip(s) =
    genzip(Zip1b', RZip2, Zip3, s)

  zipFetch(a * b -> ?) :: List(a) * List(b) -> ? * ?
  zipFetch(s) =
    Zip2; ((s, id) <+ (id, zipFetch(s)))
  lzipFetch(a * b -> ?) :: List(a) * b -> ? * ?
  lzipFetch(s) =
    LZip2; ((s, id) <+ (id, lzipFetch(s)))
  rzipFetch(a * b -> ?) :: a * List(b) -> ? * ?
  rzipFetch(s) =
    RZip2; ((s, id) <+ (id, rzipFetch(s)))

  /**
   * Combines two lists, which may have different lengths, into one by pairing
   * up the elements from both lists, applying s to the pair. Starts at the
   * beginning of the lists. The shorter list will be padded with the result
   * the padding strategy.
   *
   * Example: <zipPad(id, !0)> ([1,2], [3,4,5]) => [(1,3),(2,4),(0,5)]
   *
   * @param s              a * b -> c
   * @param padding            _ -> d
   * @type     List(a) * List(b) -> List(c)
   */
//  zipPad(a * b -> c, ? -> c) :: List(a) * List(b) -> List(c)
  zipPad(s, padding) =
    Zip1 + Zip2; (s, zipPad(s, padding)); Zip3 +
          ([], [id|id]); (![<padding>()|[]], id); zipPad(s, padding) +
          ([id|id], []); (id, ![<padding>()|[]]); zipPad(s, padding)

  zip-tail :: List(a) * List(b) -> List(b)
  zip-tail =
    Zip1c + (Tl, Tl); zip-tail
  zipl-tail-match(a * b -> ?) :: List(a) * List(b) -> List(b)
  zipl-tail-match(s) =
    Zip1c + Zip2; (s, id); Snd; zipl-tail-match(s)
  zipr-tail-match(a * b -> ?) :: List(a) * List(b) -> List(a)
  zipr-tail-match(s) =
    Zip1c' + Zip2; (s, id); Snd; zipr-tail-match(s)

//  zip-skip(? -> ?, a * b -> a) :: List(a) * List(b) -> List(a)
  zip-skip(pred, s) =
    Zip1 + (Skip(pred); (id, zip-skip(pred, s)) <+ Zip2; (s, zip-skip(pred, s))); Zip3

//Skip(a -> b) :: List(c) * d -> c * (List(c) * d)

rules

  /** @internal */
  Zip1 :: List(a) * List(b) -> List(c)
  Zip1   : ([],[]) -> []
  /** @internal */
  Zip1a' :: List(a) * b -> List(c)
  Zip1a' : ([],_) -> []
  /** @internal */
  Zip1b' :: a * List(b) -> List(c)
  Zip1b' : (_,[]) -> []
  /** @internal */
  Zip1c :: List(a) * b -> b
  Zip1c  : ([],x) -> x
  /** @internal */
  Zip1c' :: a * List(b) -> a
  Zip1c' : (x,[]) -> x
  /** @internal */
  Zip1d :: List(a) * List(b) -> List(c)
  Zip1d  : ([],[_|_]) -> []
  /** @internal */
  Zip2 :: List(a) * List(b) -> (a * b) * (List(a) * List(b))
  Zip2   : ([x|xs],[y|ys]) -> ((x, y), (xs, ys))

  /** @internal */
  LZip2 :: List(a) * b -> (a * b) * (List(a) * b)
  LZip2  : ([x|xs], y) -> ((x, y), (xs, y))
  /** @internal */
  RZip2 :: a * List(b) -> (a * b) * (a * List(b))
  RZip2  : (x, [y|ys]) -> ((x, y), (x, ys))

  /** @internal */
  Zip3 :: a * List(a) -> List(a)
  Zip3   : (x, xs) -> [x|xs]

  /** @internal */
  UnZip1 :: List(a) -> List(b) * List(c)
  UnZip1 : [] -> ([], [])
  /** @internal */
  UnZip2 :: (a * b) * (List(a) * List(b)) -> List(a) * List(b)
  UnZip2 : ((x, y), (xs, ys)) -> ([x|xs], [y|ys])
  /** @internal */
  UnZip3 :: List(a) -> a * List(a)
  UnZip3 : [x |  xs] -> (x, xs)

  /** @internal */
  NZip00 :: a -> int * a
  NZip00 : xs -> (0, xs)
  /** @internal */
  NZip01 :: a -> int * a
  NZip01 : xs -> (1, xs)
  /** @internal */
  NZip1 :: a * List(b) -> List(c)
  NZip1  : (n, []) -> []
  /** @internal */
  NZip2 :: int * List(a) -> (int * a) * (int * List(a))
  NZip2  : (n, [y|ys]) -> ((n, y), (<addi> (n, 1), ys))
  /** @internal */
  NZip3 :: a * List(a) -> List(a)
  NZip3  : (x, xs) -> [x| xs]
