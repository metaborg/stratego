/**
 * This module contains strategies for operating on immutable sets.
 *
 * Note that these sets do not support generic traversal. These are "blob" terms without children
 * and need to be operated on through the strategies in this module.
 *
 * @author Jeff Smits <mail@jeffsmits.net>
 *
 */
module collection/immutable/set

imports
  collection/list/cons
  collection/tuple/cons
  strategy/conditional

signature
  sorts
    ImmutableSet(*)
    ImmutableSetImplBlob
  constructors
    /**
     * Represents a reference to a Set
     */
    ImmutableSet : ImmutableSetImplBlob -> ImmutableSet(k)
    : blob -> ImmutableSetImplBlob

/**
 * Immutable set construction and deconstruction
 */
strategies

external internal-immutable-set :: (|) ? -> ImmutableSetImplBlob

/**
 * Create an empty immutable set.
 *
 * @type _ -> ImmutableSet
 */
imset-new :: ? -> ImmutableSet(k)
imset-new = internal-immutable-set; !ImmutableSet(<id>)

external internal-immutable-set-from-list :: (|) List(k) -> ImmutableSetImplBlob

/**
 * Create an immutable set from a list.
 *
 * @type List -> ImmutableSet
 */
imset-from-list :: List(k) -> ImmutableSet(k)
imset-from-list = internal-immutable-set-from-list; !ImmutableSet(<id>)

/**
 * Turn the immutable set into a list.
 *
 * @type ImmutableSet -> List
 */
imset-to-list :: ImmutableSet(k) -> List(k)
imset-to-list = imset-elements

external internal-immutable-set-elements :: (|) ImmutableSetImplBlob -> List(k)

/**
 * Get all elements of the immutable set.
 *
 * @type ImmutableSet -> List
 */
imset-elements :: ImmutableSet(k) -> List(k)
imset-elements = ?ImmutableSet(<id>); internal-immutable-set-elements

/**
 * Elemental operations
 */
strategies

/**
 * Succeeds if the given immutable set is empty.
 *
 * @type ImmutableSet -?> ImmutableSet
 */
imset-empty :: ImmutableSet(k) -> ImmutableSet(k)
imset-empty = equal(|<imset-new>)

external internal-immutable-set-contains :: (|k) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Succeeds if element is in the immutable set.
 *
 * @param e - the element that containment is tested for
 * @type ImmutableSet -?> ImmutableSet
 */
imset-contains(|k) :: ImmutableSet(k) -> ImmutableSet(k)
imset-contains(|e) = ImmutableSet(internal-immutable-set-contains(|e))

external internal-immutable-set-contains-eq :: (k * k -> ?|k) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Succeeds is element is in the immutable set.
 * With a custom equality operator.
 *
 * @param eq: Term * Term -?>
 * @param e - the element that containment is tested for
 * @type ImmutableSet -?> ImmutableSet
 */
imset-contains(k * k -> ?|k) :: ImmutableSet(k) -> ImmutableSet(k)
imset-contains(eq|e) = ImmutableSet(internal-immutable-set-contains-eq(eq | e))

external internal-immutable-set-insert :: (|k) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Inserts an element in the immutable set. Returns a new set with the added element.
 *
 * @param e - the element that is inserted
 * @type ImmutableSet -> ImmutableSet
 */
imset-insert(|k) :: ImmutableSet(k) -> ImmutableSet(k)
imset-insert(|e) = ImmutableSet(internal-immutable-set-insert(|e))

external internal-immutable-set-insert-eq :: (k * k -> ?|k) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Inserts an element in the immutable set. Returns a new set with the added element.
 * With a custom equality operator.
 *
 * @param eq: Term * Term -?>
 * @param e - the element that is inserted
 * @type ImmutableSet -> ImmutableSet
 */
imset-insert(k * k -> ?|k) :: ImmutableSet(k) -> ImmutableSet(k)
imset-insert(eq|e) = ImmutableSet(internal-immutable-set-insert-eq(eq | e))

external internal-immutable-set-remove :: (|k) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Removes an element in the immutable set. Returns a new set without the removed element.
 *
 * @param e - the element that is removed
 * @type ImmutableSet -> ImmutableSet
 */
imset-remove(|k) :: ImmutableSet(k) -> ImmutableSet(k)
imset-remove(|e) = ImmutableSet(internal-immutable-set-remove(|e))

external internal-immutable-set-remove-eq :: (k * k -> ?|k) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Removes an element in the immutable set. Returns a new set without the removed element.
 * With a custom equality operator.
 *
 * @param eq: Term * Term -?>
 * @param e - the element that is removed
 * @type ImmutableSet -> ImmutableSet
 */
imset-remove(k * k -> ?|k) :: ImmutableSet(k) -> ImmutableSet(k)
imset-remove(eq|e) = ImmutableSet(internal-immutable-set-remove-eq(eq | e))

/**
 * Higher-order operations
 */
strategies

external internal-immutable-set-filter :: (k1 -> k2|) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Remove all elements from the immutable set for which the filter strategy fails.
 * Returns a new set without the removed elements.
 *
 * @param s: Term -?> Term
 * @type ImmutableSet -> ImmutableSet
 */
imset-filter(k1 -> k2) :: ImmutableSet(k1) -> ImmutableSet(k2)
imset-filter(s): ImmutableSet(b) -> ImmutableSet(<internal-immutable-set-filter(s|)> b)

external internal-immutable-set-map :: (k1 -> k2, k2 -> k2|) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Map all elements from the immutable set.
 * Returns a new set with the mapped elements.
 *
 * @param s: Term -> Term
 * @type ImmutableSet -> ImmutableSet
 */
imset-map(k1 -> k2) :: ImmutableSet(k1) -> ImmutableSet(k2)
imset-map(s): ImmutableSet(b) -> ImmutableSet(<internal-immutable-set-map(s, id|)> b)

/**
 * Map all elements from the immutable set.
 * Extra parameter m is called on a mapped element that was previously mapped to.
 * This can be used to observe duplicate mapped elements or to change them into
 * something unique so they still end up in the result set.
 * Returns a new set with the mapped elements.
 *
 * @param s: Term -> Term
 * @param m: Term -> Term
 * @type ImmutableSet -> ImmutableSet
 */
imset-map(k1 -> k2, k2 -> k2) :: ImmutableSet(k1) -> ImmutableSet(k2)
imset-map(s, m): ImmutableSet(b) -> ImmutableSet(<internal-immutable-set-map(s, m|)> b)

/**
 * Combining operations
 */
strategies

external internal-immutable-set-intersect :: (|ImmutableSetImplBlob) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Intersect with another immutable set.
 * Returns a new set with the intersection.
 *
 * @param other: ImmutableSet
 * @type ImmutableSet -> ImmutableSet
 */
imset-intersect(|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-intersect(|r) = where(ImmutableSet(other) := r);
  ImmutableSet(internal-immutable-set-intersect(|other))

/**
 * Intersect two immutable sets.
 * Returns a new set with the intersection.
 *
 * @type ImmutableSet * ImmutableSet -> ImmutableSet
 */
imset-intersect :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k)
imset-intersect =
  ?(l, r); <imset-intersect(|r)> l

external internal-immutable-set-subtract :: (|ImmutableSetImplBlob) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Subtract another immutable set from the given one.
 * Returns a new set without the elements from the immutable set in the term argument.
 *
 * @param other: ImmutableSet - the set to remove from the current term immutable set
 * @type ImmutableSet -> ImmutableSet
 */
imset-subtract(|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-subtract(|r) = where(ImmutableSet(other) := r);
  ImmutableSet(internal-immutable-set-subtract(|other))

/**
 * Subtract the right immutable set from the left.
 * Returns a new set without the elements from the immutable set in the term argument.
 *
 * @type ImmutableSet * ImmutableSet -> ImmutableSet
 */
imset-subtract :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k)
imset-subtract =
  ?(l, r); <imset-subtract(|r)> l

external internal-immutable-set-union :: (|ImmutableSetImplBlob) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Union with another immutable set.
 * Returns a new set with the union.
 *
 * @param other: ImmutableSet - the set to remove from the current term immutable set
 * @type ImmutableSet -> ImmutableSet
 */
imset-union(|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-union(|r) = where(ImmutableSet(other) := r);
  ImmutableSet(internal-immutable-set-union(|other))

/**
 * Union two immutable sets.
 * Returns a new set with the union.
 *
 * @type ImmutableSet * ImmutableSet -> ImmutableSet
 */
imset-union :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k)
imset-union =
  ?(l, r); <imset-union(|r)> l

/**
 * Combining operations with custom equality operator (prefers the current/left elements)
 */
strategies

external internal-immutable-set-intersect-eq :: (k * k -> ?|ImmutableSetImplBlob) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Intersect with another immutable set.
 * Returns a new set with the intersection.
 *
 * @param eq: Term * Term -?>
 * @param other: ImmutableSet
 * @type ImmutableSet -> ImmutableSet
 */
imset-intersect(k * k -> ?|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-intersect(eq|r) = where(ImmutableSet(other) := r);
  ImmutableSet(internal-immutable-set-intersect-eq(eq | other))

/**
 * Intersect two immutable sets.
 * Returns a new set with the intersection.
 *
 * @param eq: Term * Term -?>
 * @type ImmutableSet * ImmutableSet -> ImmutableSet
 */
imset-intersect(k * k -> ?) :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k)
imset-intersect(eq) =
  ?(l, r); <imset-intersect(eq|r)> l

external internal-immutable-set-subtract-eq :: (k * k -> ?|ImmutableSetImplBlob) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Subtract another immutable set from the given one.
 * Returns a new set without the elements from the immutable set in the term argument.
 *
 * @param eq: Term * Term -?>
 * @param other: ImmutableSet - the set to remove from the current term immutable set
 * @type ImmutableSet -> ImmutableSet
 */
imset-subtract(k * k -> ?|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-subtract(eq|r) = where(ImmutableSet(other) := r);
  ImmutableSet(internal-immutable-set-subtract-eq(eq | other))

/**
 * Subtract the right immutable set from the left.
 * Returns a new set without the elements from the immutable set in the term argument.
 *
 * @param eq: Term * Term -?>
 * @type ImmutableSet * ImmutableSet -> ImmutableSet
 */
imset-subtract(k * k -> ?) :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k)
imset-subtract(eq) =
  ?(l, r); <imset-subtract(eq|r)> l

external internal-immutable-set-union-eq :: (k * k -> ?|ImmutableSetImplBlob) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Union with another immutable set.
 * Returns a new set with the union.
 *
 * @param eq: Term * Term -?>
 * @param other: ImmutableSet - the set to remove from the current term immutable set
 * @type ImmutableSet -> ImmutableSet
 */
imset-union(k * k -> ?|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-union(eq|r) = where(ImmutableSet(other) := r);
  ImmutableSet(internal-immutable-set-union-eq(eq | other))

/**
 * Union two immutable sets.
 * Returns a new set with the union.
 *
 * @param eq: Term * Term -?>
 * @type ImmutableSet * ImmutableSet -> ImmutableSet
 */
imset-union(k * k -> ?) :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k)
imset-union(eq) =
  ?(l, r); <imset-union(eq|r)> l

/**
 * Comparison operations
 */
strategies

external internal-immutable-set-strict-subset :: (|ImmutableSetImplBlob) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Strict subset comparison with another immutable set.
 * Fails if not a strict subset of the given other set.
 *
 * @param other: ImmutableSet - the set to test if superset of current set
 * @type ImmutableSet -?> ImmutableSet
 */
imset-subset(|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-subset(|r) = where(ImmutableSet(other) := r);
  ImmutableSet(internal-immutable-set-strict-subset(|other))

/**
 * Strict subset comparison between left and right immutable set.
 * Fails if left set is not a strict subset of the right set.
 *
 * @type ImmutableSet * ImmutableSet -?> ImmutableSet * ImmutableSet
 */
imset-subset :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k) * ImmutableSet(k)
imset-subset =
  ?(l, r); where(<imset-subset(|r)> l)

/**
 * Strict superset comparison with another immutable set.
 * Fails if not a strict superset of the given other set.
 *
 * @param other: ImmutableSet - the set to test if subset of current set
 * @type ImmutableSet -?> ImmutableSet
 */
imset-superset(|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-superset(|r): l -> <imset-subset(|l);!l> r

/**
 * Strict superset comparison between left and right immutable set.
 * Fails if left set is not a strict superset of the right set.
 *
 * @type ImmutableSet * ImmutableSet -?> ImmutableSet * ImmutableSet
 */
imset-superset :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k) * ImmutableSet(k)
imset-superset =
  ?(l, r); where(<imset-superset(|r)> l)

/**
 * Strict subset comparison with another immutable set.
 * Fails if not a strict subset of the given other set.
 *
 * @param other: ImmutableSet - the set to test if superset of current set
 * @type ImmutableSet -?> ImmutableSet
 */
imset-subset-eq(|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-subset-eq(|r) = where(ImmutableSet(other) := r);
  ( ImmutableSet(internal-immutable-set-strict-subset(|other))
  <+ ?ImmutableSet(other))

/**
 * Strict subset comparison between left and right immutable set.
 * Fails if left set is not a strict subset of the right set.
 *
 * @type ImmutableSet * ImmutableSet -?> ImmutableSet * ImmutableSet
 */
imset-subset-eq :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k) * ImmutableSet(k)
imset-subset-eq =
  ?(l, r); where(<imset-subset-eq(|r)> l)

/**
 * Strict superset comparison with another immutable set.
 * Fails if not a strict superset of the given other set.
 *
 * @param other: ImmutableSet - the set to test if subset of current set
 * @type ImmutableSet -?> ImmutableSet
 */
imset-superset-eq(|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-superset-eq(|r): l -> <imset-subset-eq(|l);!l> r

/**
 * Strict superset comparison between left and right immutable set.
 * Fails if left set is not a strict superset of the right set.
 *
 * @type ImmutableSet * ImmutableSet -?> ImmutableSet * ImmutableSet
 */
imset-superset-eq :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k) * ImmutableSet(k)
imset-superset-eq =
  ?(l, r); where(<imset-superset-eq(|r)> l)

/**
 * Comparison operations with custom equality operator (prefers the current/left elements)
 */
strategies

external internal-immutable-set-strict-subset-eq :: (k * k -> ?|ImmutableSetImplBlob) ImmutableSetImplBlob -> ImmutableSetImplBlob

/**
 * Strict subset comparison with another immutable set.
 * Fails if not a strict subset of the given other set.
 *
 * @param eq: Term * Term -?>
 * @param other: ImmutableSet - the set to test if superset of current set
 * @type ImmutableSet -?> ImmutableSet
 */
imset-subset(k * k -> ?|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-subset(eq|r) = where(ImmutableSet(other) := r);
  ImmutableSet(internal-immutable-set-strict-subset-eq(eq | other))

/**
 * Strict subset comparison between left and right immutable set.
 * Fails if left set is not a strict subset of the right set.
 *
 * @param eq: Term * Term -?>
 * @type ImmutableSet * ImmutableSet -?> ImmutableSet * ImmutableSet
 */
imset-subset(k * k -> ?) :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k) * ImmutableSet(k)
imset-subset(eq) =
  ?(l, r); where(<imset-subset(eq|r)> l)

/**
 * Strict superset comparison with another immutable set.
 * Fails if not a strict superset of the given other set.
 *
 * @param eq: Term * Term -?>
 * @param other: ImmutableSet - the set to test if subset of current set
 * @type ImmutableSet -?> ImmutableSet
 */
imset-superset(k * k -> ?|ImmutableSet(k)) :: ImmutableSet(k) -> ImmutableSet(k)
imset-superset(eq|r): l -> <imset-subset(eq|l);!l> r

/**
 * Strict superset comparison between left and right immutable set.
 * Fails if left set is not a strict superset of the right set.
 *
 * @param eq: Term * Term -?>
 * @type ImmutableSet * ImmutableSet -?> ImmutableSet * ImmutableSet
 */
imset-superset(k * k -> ?) :: ImmutableSet(k) * ImmutableSet(k) -> ImmutableSet(k) * ImmutableSet(k)
imset-superset(eq) =
  ?(l, r); where(<imset-superset(eq|r)> l)
