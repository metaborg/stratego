/**
 * Lifting of local variables.
 *
 * @author Lennart Kats
 */
module strj/variable-lifting

rules
 
  collect-lifted-tvars :
    SDefT(x, _, _, s) -> lifted-tvars
    with
      x' := x{}
    with
      lifted-tvars  := <LiftedTVars> x'
    <+
      tvars         := <tvars> s
    ; svars         := <svars> s
    ; direct-lifted := <collect-direct-lifted-vars(|x')> tvars
    ; rules(
        // TODO: Do we need to do a fixpoint to find all lifted defs?
        //       Or is setting an intermediate value sufficient..?
        LiftedTVars: x' -> direct-lifted
      )
    ; indirect-lifted := <collect-indirect-lifted-tvars> svars
    ; lifted-tvars    := <flatten-list; make-set-with-annos> [direct-lifted, indirect-lifted]
    ; rules(
        LiftedTVars: x' -> lifted-tvars
      )
  
  collect-lifted-svars :
    SDefT(x, _, _, s) -> lifted-svars
    with
      x' := x{}
    with
      lifted-svars  := <LiftedSVars> x'
    <+
      svars         := <svars> s
    ; direct-lifted := <collect-direct-lifted-vars(|x')> svars
    ; rules(
        LiftedSVars: x' -> direct-lifted
      )
    ; indirect-lifted := <collect-indirect-lifted-svars> svars
    ; lifted-svars    := <flatten-list; make-set-with-annos> [direct-lifted, indirect-lifted]
    ; rules(
        LiftedSVars: x' -> lifted-svars
      )
    ; list-loop({ y:
        y := <id>{}
      ; rules(IsStrategyArg: (x', y)) // is field for frame x'
      })
  
  collect-direct-lifted-vars(|lifted-name) =
    filter(
      where(
        get-annos
      ; one(Frames(one(?lifted-name)))
      ; one(?Offset(_))
      )
    ; not(is-self-call)
    //; where(write-to-string; debug(!"  lifted:          "))
    //<+
    //  where(write-to-string; debug(!"  not lifted:      "); fail)
    )

  collect-indirect-lifted-tvars =
    filter({ x:
      ?x
    ; <InnerDefinition> x{}
    ; collect-lifted-tvars
    ; not([])
    //; where(<debug(!"  lifted-indirect: ")> (x{}, <id>))
    })

  collect-indirect-lifted-svars =
    filter({ x:
      ?x
    ; <InnerDefinition> x{}
    ; collect-lifted-svars
    ; not([])
    //; where(<debug(!"  lifted-indirect: ")> (x{}, <id>))
    })
  
  make-set-with-annos =
    foldr(![], union(strip-annos; eq), ![<id>])
  
  is-self-call =
    with(
      x := <id>{}
    )
  ; get-annos
  ; one(?Frames([x]))
