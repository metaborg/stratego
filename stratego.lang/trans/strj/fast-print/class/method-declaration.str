module strj/fast-print/class/method-declaration

imports
  libstratego-lib
  libjava-front

rules

  java-to-string:
    MethodDec(dec, b@Block(_)) -> <java-to-string-all> [dec, b]

  java-to-string:
    MethodDec(dec, NoMethodBody()) -> <java-to-string-all> [dec, ";\n"]

  java-to-string:
    MethodDecHead(mods, type-params, type, Id(n), params, None())
      -> <java-to-string-all> [foo, type, " ", n, args]
    with  <list-to-args-string> params => args
        ; <type-params-to-strings> type-params => targboxes
        ; !Conc(mods, targboxes) => foo

  java-to-string:
    MethodDecHead(mods, type-params, type, Id(n), params, Some(throws))
      -> <java-to-string-all> [foo, type, " ", n, args, throws]
    with  <list-to-args-string> params => args
        ; <type-params-to-strings> type-params => targboxes
        ; !Conc(mods, targboxes) => foo

  java-to-string:
    DeprMethodDecHead(mods, type-params, type, Id(n), params, dims, throws)
      -> <java-to-string-all> [mods, type, " ", b*, " ", n, args, dims, throws]
    with  <list-to-args-string> params => args
        ; <type-params-to-strings> type-params => b*

rules

  java-to-string:
    Param(mods, type, vardecid) -> <java-to-string-all> [mods, type, " ", vardecid]

  java-to-string:
    VarArityParam(mods, type, vardecid) -> <java-to-string-all> [mods, type, "...", vardecid]

rules

  java-to-string:
    ThrowsDec(exceptions) -> <java-to-string-all> ["throws ", excs]
    with  <sep-by-comma> exceptions => excs

rules

  java-to-string:
    Void() -> "void"

