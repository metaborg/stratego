module strj/fast-print/expression

imports
  libstratego-lib
  libjava-front

strategies

  java-to-string =
    expr-to-string

  java-to-string: Lit(l) -> <java-to-string> l

  expr-to-string: Parenthetical(e)           -> <java-to-string-all> ["(", e, ")"]
  expr-to-string: Assign(lval, e)            -> <java-to-string-all> [lval, "=", e]
  expr-to-string: AssignMul(lval, e)         -> <java-to-string-all> [lval, "*=", e]
  expr-to-string: AssignDiv(lval, e)         -> <java-to-string-all> [lval, "/=", e]
  expr-to-string: AssignRemain(lval, e)      -> <java-to-string-all> [lval, "%=", e]
  expr-to-string: AssignPlus(lval, e)        -> <java-to-string-all> [lval, "+=", e]
  expr-to-string: AssignMinus(lval, e)       -> <java-to-string-all> [lval, "-=", e]
  expr-to-string: AssignLeftShift(lval, e)   -> <java-to-string-all> [lval, "<<=", e]
  expr-to-string: AssignRightShift(lval, e)  -> <java-to-string-all> [lval, ">>=", e]
  expr-to-string: AssignURightShift(lval, e) -> <java-to-string-all> [lval, ">>>=", e]
  expr-to-string: AssignAnd(lval, e)         -> <java-to-string-all> [lval, "&=", e]
  expr-to-string: AssignExcOr(lval, e)       -> <java-to-string-all> [lval, "^=", e]
  expr-to-string: AssignOr(lval, e)          -> <java-to-string-all> [lval, "|=", e]

  expr-to-string: Plus(e)     -> <java-to-string-all> ["+", e]
  expr-to-string: Minus(e)    -> <java-to-string-all> ["-", e]
  expr-to-string: PreIncr(e)  -> <java-to-string-all> ["++", e]
  expr-to-string: PreDecr(e)  -> <java-to-string-all> ["--", e]
  expr-to-string: PostIncr(e) -> <java-to-string-all> [e, "++"]
  expr-to-string: PostDecr(e) -> <java-to-string-all> [e, "--"]

  expr-to-string: Mul(e1, e2)          -> <java-to-string-all> [e1, "*", e2]
  expr-to-string: Div(e1, e2)          -> <java-to-string-all> [e1, "/", e2]
  expr-to-string: Remain(e1, e2)       -> <java-to-string-all> [e1, "%", e2]
  expr-to-string: Plus(e1, e2)         -> <java-to-string-all> [e1, "+", e2]
  expr-to-string: Minus(e1, e2)        -> <java-to-string-all> [e1, "-", e2]
  expr-to-string: LeftShift(e1, e2)    -> <java-to-string-all> [e1, "<<", e2]
  expr-to-string: RightShift(e1, e2)   -> <java-to-string-all> [e1, ">>", e2]
  expr-to-string: URightShift(e1, e2)  -> <java-to-string-all> [e1, ">>>", e2]

  expr-to-string: Lt(e1, e2)           -> <java-to-string-all> [e1, "<", e2]
  expr-to-string: Gt(e1, e2)           -> <java-to-string-all> [e1, ">", e2]
  expr-to-string: LtEq(e1, e2)         -> <java-to-string-all> [e1, "<=", e2]
  expr-to-string: GtEq(e1, e2)         -> <java-to-string-all> [e1, ">=", e2]
  expr-to-string: Eq(e1, e2)           -> <java-to-string-all> [e1, "==", e2]
  expr-to-string: NotEq(e1, e2)        -> <java-to-string-all> [e1, "!=", e2]
  expr-to-string: LazyAnd(e1, e2)      -> <java-to-string-all> [e1, "&&", e2]
  expr-to-string: LazyOr(e1, e2)       -> <java-to-string-all> [e1, "||", e2]
  expr-to-string: And(e1, e2)          -> <java-to-string-all> [e1, "&", e2]
  expr-to-string: ExcOr(e1, e2)        -> <java-to-string-all> [e1, "^", e2]
  expr-to-string: Or(e1, e2)           -> <java-to-string-all> [e1, "|", e2]

  expr-to-string: InstanceOf(e1, e2)   -> <java-to-string-all> [e1, " instanceof ", e2]

  expr-to-string: Complement(e)        -> <java-to-string-all> ["~", e]
  expr-to-string: Not(e)               -> <java-to-string-all> ["!", e]
  expr-to-string: Cond(e1, e2, e3)     -> <java-to-string-all> [e1, "?", e2, ":", e3]

  java-to-string: This()   -> "this"
  java-to-string: QThis(q) -> <java-to-string-all> [q, ".", "this"]

/**
 * Method Invocations
 */
rules
  java-to-string:
    Invoke(method, exprs) -> <java-to-string-all> [method, args]
    with  <list-to-args-string> exprs => args

  java-to-string:
    Method(n) -> <java-to-string> n

  java-to-string:
    Method(e, type-args, Id(s)) -> <java-to-string-all> [e, ".", type-args', s]
    with  <type-args-to-string> type-args => type-args'

  java-to-string:
    SuperMethod(type-args, Id(s)) -> <java-to-string-all> ["super", ".", type-args', s]
    with  <type-args-to-string> type-args => type-args'

  java-to-string:
    QSuperMethod(q, type-args, Id(s)) -> <java-to-string-all> [q, ".", "super", ".", type-args', s]
    with  <type-args-to-string> type-args => type-args'

  java-to-string:
    GenericMethod(type-name, type-args, Id(s)) -> <java-to-string-all> [type-name, ".", type-args', s]
    with  <type-args-to-string> Some(type-args) => type-args'

/**
 * New instance without body
 */
rules

  java-to-string:
    NewInstance(type-args, type, exprs, None()) -> <java-to-string-all> ["new ", type-args', type, args]
    with  <list-to-args-string> exprs => args
        ; <type-args-to-string> type-args => type-args'

  java-to-string:
    QNewInstance(e, type-args1, Id(s), type-args2, exprs, None())
      -> <java-to-string-all> [e, ".new ", type-args1', s, type-args2', args]
    with  <list-to-args-string> exprs => args
        ; <type-args-to-string> type-args1 => type-args1'
        ; <type-args-to-string> type-args2 => type-args2'

/**
 * New instance with body
 */
rules

  java-to-string:
    NewInstance(type-args, type, exprs, Some(body)) -> <java-to-string-all> ["new ", type-args', type, args, body]
    with  <list-to-args-string> exprs => args
        ; <type-args-to-string> type-args => type-args'

  java-to-string:
    QNewInstance(e, type-args1, Id(s), type-args2, exprs, Some(body))
      -> <java-to-string-all> [e, ".", "new ", type-args1', s, type-args2', args, body]
    with  <list-to-args-string> exprs => args
        ; <type-args-to-string> type-args1 => type-args1'
        ; <type-args-to-string> type-args2 => type-args2'

rules

  java-to-string:
    NewArray(type, dimexprs, dims) -> <java-to-string-all> ["new ", type, dimexprs, dims]
    where <is-list> dimexprs
        ; <is-list> dims

  java-to-string:
    NewArray(type, dims, init@ArrayInit(_)) -> <java-to-string-all> ["new ", type, dims, init]

  /**
   * Special ArrayBaseType
   */
  java-to-string:
    UnboundWld(name) -> <java-to-string-all> [name, "<?>"]

rules

  java-to-string:
    ArrayAccess(b1, b2) -> <java-to-string-all> [b1, "[", b2, "]"]

  java-to-string:
    CastPrim(b1, b2) -> <java-to-string-all> ["(", b1, ")", b2]

  java-to-string:
    CastRef(b1, b2) -> <java-to-string-all> ["(", b1, ")", b2]

  java-to-string:
    Field(b, Id(s)) -> <java-to-string-all> [b, ".", s]

  java-to-string:
    SuperField(Id(s)) -> <java-to-string-all> ["super.", s]

  java-to-string:
    QSuperField(b, Id(s)) -> <java-to-string-all> [b, ".", "super", ".", s]
