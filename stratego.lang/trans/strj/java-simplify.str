/**
 * Java output simplification.
 *
 * Removes some unnecessary statements and blocks generated for convenience,
 * and makes life (much) easier for the pretty printer.
 *
 * @author Lennart Kats
 */
module strj/java-simplify

imports
  libjava-front

strategies

  java-simplify =
    with(
      try(<get-config> "--stacktrace" => 1 => stacktrace1)
    ; try(<get-config> "--stacktrace" => 0 => stacktrace0)
    ; try(OldECJCompatibility => oldecj)
    )
  ; topdown-consnil(
      try(Block(flatten-list))
    ; repeat(java-simplify-stm + java-simplify-expr)
    ; if !stacktrace1 then
        try(java-simplify-stm-trace-always)
      else
        if !stacktrace0 then
          try(java-simplify-stm-trace-never)
        end
      end
    ; if not(!oldecj) then
        try(java-simplify-ecj-compatibility)
      end
    )
  
  internal all-consnil(s) =
    ?[_ | _] < [s | s] + all(s)

  internal topdown-consnil(s) =
    rec rec(s; all-consnil(rec))
  
  java-simplify-stm :
    [<Empty + Semicolon> | s*] -> s*
  
  java-simplify-stm :
    If(e, s1, Empty()) -> If(e, s1)
  
  java-simplify-stm :
    Block([Block(s)]) -> Block(s)
  
  java-simplify-stm :
    |[ if (e1 == e2) ; else stm2 ]| -> |[ if (e1 != e2) stm2 ]|
  
  java-simplify-expr :
    |[ new Strategy[] {} ]| -> |[ NO_STRATEGIES ]|
  
  java-simplify-expr :
    |[ new IStrategoTerm[] {} ]| -> |[ NO_TERMS ]|
  
  java-simplify-expr :
    x{a*} -> x{}
    where
      not(!a* => [])
  
  java-simplify-ecj-compatibility :
    bstm* |[ boolean TRUE = true; bstm* ]| -> bstm*
  
  java-simplify-ecj-compatibility :
    bstm |[ if (TRUE) stm ]| -> |[ if (true) stm ]|
    
  java-simplify-stm-trace-always :
    bstm* |[ if (TRACES_ENABLED) stm bstm* ]| -> bstm* |[ stm bstm* ]|

  java-simplify-stm-trace-never :
    bstm* |[ if (TRACES_ENABLED) stm bstm* ]| -> bstm*
  
  java-eliminate-stacktrace =
    alltd(
      \bstm |[ if (TRACES_ENABLED) stm ]| -> Empty()\
    )
