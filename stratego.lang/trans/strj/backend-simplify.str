module strj/backend-simplify

imports
  libstratego-lib
//  libstrc
  
  strj/lib/dr-scoping
  strj/split-large-strategies
  strj/canonicalize2
  
signature
 constructors
   Meta: List(Term) -> Term
   Filename: Str -> Term
  
strategies

  main-backend-simplify =
    io-wrap(backend-simplify)
  
  backend-simplify =
    dr-scope-all-verbose(
      dollars-for-capitals-top
    ; split-large-strategies
    ; lift-definitions
    ; canonicalize2
    ; simplify1
    ; mark-bound-unbound-vars
    ; escaping-variables
    ; remove-closure-allocs
    )

rules
  
  /**
   * Adds dollars to names with capitals (e.g. Desugar becomes $Desugar).
   * Doing so is required for supporting (Windows/Mac) case-insensitive file systems.
   */
  dollars-for-capitals-top =
    topdown(try(
      SVar(dollars-for-capitals)
    + SDefT(dollars-for-capitals, id, id, id)
    + ExtSDef(dollars-for-capitals, id, id)
    ))
   
  dollars-for-capitals =
    // We make an exception for the hand-crafted SRTS_EXT Java classes
    if not(string-starts-with(|"SRTS_EXT")) then
      escape(dollar-for-capital)
    end
  
  dollar-for-capital(rec) :
    [c | cs] -> ['$', c | <rec> cs] where <is-upper> c
  
  undo-dollars-for-capitals =
    escape(undo-dollar-for-capital)
  
  undo-dollar-for-capital(rec) :
    ['$' | cs] -> <rec> cs
  
rules

  remove-closure-allocs =
    {| RemoveClosureAlloc :
      alltd(remove-closure-alloc-let)
    |}
  
  remove-closure-alloc-let :
    Let(def*, s) -> Let(def'*, s')
    with
      def'* := <remove-closure-allocs>
               <filter(not(remove-closure-alloc-def))> def*
    ; s' := <remove-closure-allocs>
            <alltd(remove-closure-alloc-call)> s
    
  remove-closure-alloc-def :
    SDefT(x{a*}, _, _, s) -> []
    where
      <one(ClosureAlloc)> a*
    with
      x' := x{}
    ; rules(RemoveClosureAlloc: x' -> s)
  
  remove-closure-alloc-call :
    CallT(SVar(x), [], _) -> inline
    where
      <RemoveClosureAlloc> x{} => inline

