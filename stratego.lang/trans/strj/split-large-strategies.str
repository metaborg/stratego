module strj/split-large-strategies

imports
  strc/lib/stratlib

  signatures/core/modules-sig
  signatures/sugar/modules-sig
  signatures/core/signatures-sig
  signatures/core/strategies-sig

overlays
  /**
   * Minimum number of _terms_ in a strategy definition required to split it up.
   * Note that Java methods of over 8000 _instructions_ may no longer be eligible for JIT compilation
   * (see -XX:-DontCompileHugeMethod), and that Java defines a 64 KB instruction limit per method.
   *
   * Ideal would be 6000~7000 instructions (use -XX:+PrintCompilation for accurate figures).
   *
   * According to a benchmark with libstrc:
   *   2000 = good, 2500 = good, 3000~5000 = still good, 10.000 = bad
   */
  LARGE_STRATEGY_SIZE = 2500

strategies

  split-large-strategies =
    Specification([Signature([Constructors(id)]), Strategies(map(try(split-large-def)))])
  
  split-large-def :
    SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
    with
      s' := <split-large-strategy(|x)> s
  
  split-large-strategy(|x) =
    bottomup-at-large-terms(
      (?Seq(_, _) + ?GuardedLChoice(_, _, _)) < split-large-strategy-apply(|x)
    + AltV(id, split-large-strategy-apply(|x))
    + Guard(id, split-large-strategy-apply(|x))
    + Default(split-large-strategy-apply(|x))
    + split-large-alt-list-apply(|x); bottomup-at-large-terms(split-large-alt-list-apply(|x)) // Recursively apply until all lists are small enough
    )

  bottomup-at-large-terms(s) =
    bottomup-at-large-terms'(s) => (<id>, _)
  
  bottomup-at-large-terms'(s) :
    t -> (t'', size')
    with
    {| SwitchTPath, SwitchVPath, AltTPat, AltVPath :
      DefineContext
    ; t'-and-sizes := <all(bottomup-at-large-terms'(s))>
    ; t'           := <all(Fst)> t'-and-sizes
    ; size         := <crush(!1, add, Snd)> t'-and-sizes

    ; (<?SDefT(_, _, _, _)> t // don't count definitions
    ; t''   := t'
    ; size' := 0
    <+
      <gt> (size, LARGE_STRATEGY_SIZE())
    ; t''   := <s> t'
    ; size' := 0
    <+
      t''   := t'
    ; size' := size
    )
    |}

  DefineContext = ?SwitchT(p, _, _); rules( SwitchTPath := p )
  DefineContext = ?SwitchTNoDefault(p, _); rules( SwitchTPath := p )
  DefineContext = ?SwitchV(p, _, _); rules( SwitchVPath := p )
  DefineContext = ?SwitchVNoDefault(p, _); rules( SwitchVPath := p )
  DefineContext = ?AltT(tp, _); rules( AltTPat := tp )
  DefineContext = ?AltV(vp, _); rules ( AltVPath := vp )
  DefineContext = ?GuardedAltV(vp, _); rules ( AltVPath := vp )

  split-large-strategy-apply(|x) :
    |[ s ]| ->
    |[ let
         x_split(|) = s
       in
         { x_unused: // HACK: prevent inlining by simplify/HoistLet
           x_split(|)
         }
       end
    ]|
    with
      // TODO Preferably use snewvar here. But that doesn't accept '$' in the input.
      x_split  := <conc-strings; local-newname> (x, "_fragment_")
    ; x_unused := <tnewvar> "unused"

internal halve-list =
    where(i := <div> (<length>, 2))
  ; split-at(|i)

  split-large-alt-list-apply(|x):
    SwitchTNoDefault(p, alt*) ->
    SwitchT(p, alt1*, Default(s))
  with
    (alt1*, alt2*) := <halve-list> alt*
  ; s := <split-large-strategy-apply(|x)> SwitchTNoDefault(p, alt2*)

  split-large-alt-list-apply(|x):
    SwitchT(p, alt*, d) ->
    SwitchT(p, alt1*, Default(s))
  with
    (alt1*, alt2*) := <halve-list> alt*
  ; s := <split-large-strategy-apply(|x)> SwitchT(p, alt2*, d)

  split-large-alt-list-apply(|x):
    SwitchVNoDefault(p, alt*) ->
    SwitchV(p, alt1*, Default(s))
  with
    (alt1*, alt2*) := <halve-list> alt*
  ; s' := <GenSwitchT> (p, alt2*)
  ; s := <split-large-strategy-apply(|x)> s'

  split-large-alt-list-apply(|x):
    SwitchV(p, alt*, d) ->
    SwitchV(p, alt1*, Default(s))
  with
    (alt1*, alt2*) := <halve-list> alt*
  // No SwitchT default required; we are inside another identical SwitchT/AltT at this point
  ; s' := <GenSwitchT> (p, alt2*, d)
  ; s := <split-large-strategy-apply(|x)> s'

  split-large-alt-list-apply(|x):
    GuardedAltV(pat, guard*) ->
    GuardedAltV(pat, guard'*)
  with
    (guard1*, guard2*) := <halve-list> guard*
  ; ss := <GenSwitchT> (<SwitchVPath>, [GuardedAltV(pat, guard2*)])
  ; s' := <split-large-strategy-apply(|x)> ss
  ; guard'* := <at-end(![Guard(Id(), s')])> guard1*

  split-large-alt-list-apply(|x):
    GuardedDefault(guard*) ->
    GuardedDefault(guard'*)
  with
    (guard1*, guard2*) := <halve-list> guard*
  ; ss := <GenSwitchT> (<SwitchVPath>, [], GuardedDefault(guard2*))
  ; s' := <split-large-strategy-apply(|x)> ss
  ; guard'* := <at-end(![Guard(Id(), s')])> guard1*

  // No SwitchT default required; we are inside another identical SwitchT/AltT at this point, so the type switch will succeed for exactly that type.
  internal GenSwitchT: (p, alt*) -> SwitchTNoDefault(<SwitchTPath>, [AltT(<AltTPat>, <GenSwitchV> (p, alt*))])
  internal GenSwitchT: (p, alt*, d) -> SwitchTNoDefault(<SwitchTPath>, [AltT(<AltTPat>, <GenSwitchV> (p, alt*, d))])

  internal GenSwitchV: (p, alt*) -> SwitchVNoDefault(p, alt*)
  internal GenSwitchV: (p, alt*, d) -> SwitchV(p, alt*, d)
