/**
 * strj options
 *
 * @see s2j-options
 *
 * @author Lennart Kats
 */
module strj/strj-options

imports
  libstratego-lib
//  libstrc
  strj/s2j-options
  strj/s2j
  strj

strategies

  strj-preinit-options(|libs) =
    <set-config> ("VERSION", <strc-version-number>)
  ; <set-config> ("--verbose", 1)
  ; <set-config> ("--statistics", 1)
  ; <set-config> ("-O", 2)
  ; <set-config> ("-I", [])
  ; <set-config> ("--no-concrete-syntax-externals", 1)
  ; <list-loop(\lib -> <post-extend-config> ("-la", [lib])\)> libs
 
  strj-parse-options(|libs) =
    with(
      strj-preinit-options(|libs)
    )
  ; parse-options(
      strj-options
    )
  ; display-version
  ; if not(output-dirname); <get-config> "-o" then
      fatal-err-msg(|"Illegal output directory")
    end
  ; if <get-config> "-o"; base-filename; not(<eq> (<id>, <jify>)); not(<get-config> "-F") then
      <get-config> "-o"
    ; fatal-err(|"Output file name is not a legal Java name")
    end
  ; if IsIncrementalCompilation; not(<file-exists> $[[<output-dirname>]/Main.java]) then
      log(|Info(), "No existing output files found; performing initial compilation");
      rules(IsIncrementalCompilation :- _)
    end
  ; if IsIncrementalCompilation then
      olevel2(
        fatal-err-msg(|"Inlining not supported with incremental compilation: use -O 1 or lower")
      )
    end
  ; if <get-config> "-o"; base-filename => "main.java" then
      fatal-err(|"Output file name 'main' is not allowed as it causes problems on case-insensitive file systems; use 'Main' instead")
    end
  ; if <get-config> "--library"; not(<get-config> "-p" + <get-config> "-F") then
      fatal-err-msg(|"No package name specified")
    end
  
  strj-options =
    input-option
  <+
    output-option // TODO: add a -d destination dir option that uses the package name
  <+
    ArgOption(
      "--main" + "-m"
    , <set-config>("-m", <id>); !()
    , !"--main f | -m f    Main strategy to compile (default: main)"
    )
  <+
    Option(
      "--clean" + "-clean"
    , <set-config> ("--clean", <id>)
    , !"--clean            Remove all existing Java files in the output directory"
    )
  <+
    s2j-general-options
        
  <+ ArgOption(fail, fail, !"")
  <+ ArgOption(fail, fail, !"Library options:")
  <+ ArgOption(fail, fail, !"")
  <+
    s2j-library-options

  <+ ArgOption(fail, fail, !"")
  <+ ArgOption(fail, fail, !"Configuration of the Stratego compiler:")
  <+ ArgOption(fail, fail, !"")
  <+
    Option("--ast",
      where(<set-config>("--ast",())); !(),
      !"--ast              Produce abstract syntax tree of packed program"
    )
  <+
    Option("-F",           
      where(<set-config>("-F",())); !(),
      !"-F                 Produce core after front-end"
    )
  <+
    Option("--single-strategy",
    where(<set-config>("--single-strategy",())); !(),
    !"--single-strategy    Generate from a single strategy definition")
  <+
    Option("--boilerplate",
    where(<set-config>("--boilerplate",())); !(),
    !"--boilerplate        Generate boilerplate (main/interopregister)")
  <+ 
    Option("--prefer-str",
    where(<set-config> ("--prefer-str", "")); !(),
    !"--prefer-str       Prefer .str files over .rtree files")
  <+
    ArgOption("--default-syntax", where(<set-config>("--default-syntax", <id>)),
	!"--default-syntax syn        use syntax syn as default")
  <+
    ArgOption("--cache-dir",
    where(<set-config> ("--cache-dir", <where(file-exists; filemode; isdir <+ mkdir)>)),
    !"--cache-dir <dir>  Maintain a compilation cache in <dir>")
  <+
    Option("--fusion",     
    where(<toggle-config>("--fusion",())); !(),
    !"--fusion           Toggle specialize applications of innermost (default: on)" )
  <+
    Option("--asfix",
    where(<set-config>("--asfix",())); !(),
    !"--asfix            Concrete syntax parts are not imploded")
   <+
     Option("--Xpp-java",
       rules(PrettyPrintJava: _)
     , !"--Xpp-java         Pretty-print Java output (slow)"
     )
  <+
    Option("--Xecj33",
      rules(OldECJCompatibility: _)
    , !"--Xecj33           Generate code compatible with ECJ 3.3 and lower";
      if-java-platform(fail)
    )
  <+
    Option("-c",
      warn-msg(|"Ignored unsupported option -c")
    , fail
    )
  + Option(
      "-Xsep-comp-tool"
    , rules(IsIncrementalCompilation: _);
      <set-config> ("--library", ());
      (ManuallySetOptimization <+ <set-config> ("-O", <strc-set-opt-level> 1))
    , !"--Xsep-comp-tool  Compile based on sep-comp-tool (experimental)"
    )
  
  <+ ArgOption(fail, fail, !"")
  <+ ArgOption(fail, fail, !"General options:")
  <+ ArgOption(fail, fail, !"")
  <+
    general-options
  <+
    Option("-h" + "--help",         
    where(<set-config> ("--help",())); !(),         
    !"-h | --help        Show help")
  <+
    Option("-v" + "--version",     
    where(<set-config> ("-v",())); !(),         
    !"-v | --version     Display program's version")
  <+
    stratego-warnings-options
