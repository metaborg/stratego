module match-choices-to-multimatches

imports
  signatures/core/strategies-sig
  signatures/core/terms-sig

  strc/stratego/strc/opt/bound-unbound-vars
  strc/stratego/strc/opt/stratego-laws

overlays
  MultiMatch(cases) = MultiMatch(Sequential(), cases)

  MatchPattern(p) = Match(p)

  MatchSuccessPattern(p) = MatchPattern(p)
  MatchSuccessPattern(p, s) = Seq(MatchPattern(p), s)
  MatchSuccessPattern(vars, p, s) = Scope(vars, MatchSuccessPattern(p, s))

  ChoicePattern(s1, s2) = GuardedLChoice(s1, Id(), s2)

strategies
  sdeft-match-choices-to-multimatches =
    simplify
  // TODO Is the analysis even necessary? Can just use the parent Scope.
  ; mark-bound-unbound-vars
  ; SDefT(id, id, id, match-choices-to-multimatches)
  ; strip-annos

  // Used for testing
  match-choices-to-multimatches-test-NoDesugar =
    simplify-NoDesugar
  ; match-choices-to-multimatches
  
  match-choices-to-multimatches =
    topdown(try(translate-match-choices))
  ; simplify-clean // Remove vars from scopes if they are now scoped from a match case

  translate-match-choices =
    !MultiMatch(<MatchCasesChoice>)

  MatchCases =
    MatchCasesChoice
 <+ MatchCasesDefault

  MatchCasesChoice:
    ChoicePattern(s1, s2) -> [<MatchCase> s1 | <MatchCases> s2]

  // No fail needed in the last case; is implicit in MultiMatch.
  MatchCasesDefault: Fail() -> []
  MatchCasesDefault = ![<MatchCase>]
  MatchCasesDefault =
    ![ScopedMatchCase(<collect-unbound-vars>, Anno(Wld(), Wld()), <id>)]

  // Merge MultiMatch cases
  MatchCase = ?MultiMatch(<id>)

  MatchCase:
    MatchSuccessPattern(p) -> ScopedMatchCase(x*, p, Id())
  where
    <collect-unbound-vars> p => x*

  MatchCase:
    MatchSuccessPattern(p, s) -> ScopedMatchCase(x*, p, s)
  where
    <collect-unbound-vars> p => x*

  MatchCase:
    MatchSuccessPattern(x1*, p, s) -> ScopedMatchCase(x1*, p, s)
  where
    <collect-unbound-vars> p => x2*
  with
    <restore(subseteq, debug(!"(x2*, x1*): "))> (x2*, x1*)

  collect-unbound-vars = collect(?Var(<id>){"unbound"})
