module check-constructors
imports
  libstratego-lib
  signatures/Stratego-Sugar
  strc/front/error-reporting

rules

  CheckConstructors :
    Specification([
      Signature([Constructors(ods1)]), 
      Overlays(ols),
      Strategies(sdefs)
    ]) 
  -> 
    Specification([
      Signature([Constructors(ods2)]), 
      Overlays(ols),
      Strategies(sdefs)
    ])
    where <map(try(TupleDecl + QuotedConstrDecl))> ods1 => ods2
        ; <map(GenerateCheckRule)> ods2
        ; <map(GenerateCheckRule)> ols
        ; <filter(check-constructors)> ols => []
        ; <filter(check-constructors)> sdefs => []

  QuotedConstrDecl :
    OpDeclQ(s, type) -> OpDecl(<escape> s, type)

  QuotedConstrDecl :
    ExtOpDeclQ(s, type) -> ExtOpDecl(<escape> s, type)

  TupleDecl :
    OpDeclInj(tp@FunType(args,res)) -> OpDecl("", tp)
    where <TupleType> args => res

  TupleDecl :
    ExtOpDeclInj(tp@FunType(args,res)) -> ExtOpDecl("", tp)
    where <TupleType> args => res

  TupleDecl :
    OpDeclInj(ConstType(Sort("Tuple", [Sort("Nil", [])]))) ->
    OpDecl("", ConstType(Sort("Tuple", [Sort("Nil", [])])))

  TupleDecl :
    ExtOpDeclInj(ConstType(Sort("Tuple", [Sort("Nil", [])]))) ->
    ExtOpDecl("", ConstType(Sort("Tuple", [Sort("Nil", [])])))

  TupleDecl :
    OpDeclInj(FunType([ConstType(SortVar(x))],ConstType(SortVar(x)))) ->
    OpDecl("", FunType([ConstType(SortVar(x))],
		 ConstType(Sort("Tuple",[Sort("Cons", [SortVar(x), Sort("Nil", [])])]))))

  TupleDecl :
    ExtOpDeclInj(FunType([ConstType(SortVar(x))],ConstType(SortVar(x)))) ->
    ExtOpDecl("", FunType([ConstType(SortVar(x))],
		   ConstType(Sort("Tuple",[Sort("Cons", [SortVar(x), Sort("Nil", [])])]))))

  TupleType =
    !ConstType(Sort("Tuple", 
               [<foldr(!Sort("Nil",[])
		      , !Sort("Cons", [<Fst>, <Snd>])
		      , ?ConstType(<id>))>]))

  CheckCons = Op(id,length); CheckConsN


  GenerateCheckRule =
    (?OpDecl(c, ConstType(t)) <+ ?ExtOpDecl(c, ConstType(t)))
    ; where(!0 => n)
    ; rules(
        CheckConsN : Op(c, n) -> Op(c, [])
        // CheckConsN : Op(c, <length => n>) -> Op(c, []) 
      )

  GenerateCheckRule =
    (?OpDecl(c, DynT(t)) <+ ?ExtOpDecl(c, DynT(t)))
    ; where(!0 => n)
    ; rules(
        CheckConsN : Op(c, n) -> Op(c, [])
        // CheckConsN : Op(c, <length => n>) -> Op(c, []) 
      )

  GenerateCheckRule =
    (?OpDecl(c, FunType(ts, t)) <+ ?ExtOpDecl(c, FunType(ts, t)))
    ; where(<length> ts => n)
    ; rules(
        CheckConsN : Op(c, n) -> Op(c, [])
      )

  /**
   * Just ignore injections: no check rule is required for them.
   */
  GenerateCheckRule =
    ?OpDeclInj(_) <+ ?ExtOpDeclInj(_) 

  GenerateCheckRule =
    ?Overlay(c, xs, t)
    ; where(<length> xs => n)
    ; rules(
        CheckConsN : Op(c, n) -> Op(c, [])
      )

/*
  // CheckTuple implements generic checking of tuple constructors (for arbitrary arity)
  // For some reason the generation of operator declarations for tuples does not work.

  CheckTuple =
    ?Op("", ts);
    where(
      <length> ts => n
      ; !"" => c
      ; !OpDecl("", FunType(<copy>(n,Var("a")),Var("a"))) => decl
      ; GenerateCheckRule
      ; ![decl | <TupleDeclarations <+ ![]>] => decs
      ; rules(
          TupleDeclarations : _ -> decs
        )
    )
*/

  check-constructors =
    AnnoDef(id, check-constructors)

  check-constructors =
    ?RDefT(f, xs, ys, <id>)
    ; check-constructors'(|(f, <length> xs, <length> ys), "rule")

  check-constructors =
    ?SDefT(f, xs, ys, <id>)
    ; check-constructors'(|(f, <length> xs, <length> ys), "definition")

  check-constructors =
    ?Overlay(f, xs, <id>)
    ; check-constructors'(|(f, <length> xs), "overlay")

  check-constructors'(|fstr, kindstr) =
    where( 
      !fstr => (n,i,j) 
    ; <concat-strings>[n,"(",<int-to-string>i,"|",<int-to-string>j,")"] => fstr' 
    )
  ; {| CheckConsError :
       rules(
         CheckConsError : 
           Op(c, ts) -> Op(c, ts) 
           where 
             log(|Error(), ["in ", kindstr, " ", fstr', ": ", 
                    "constructor ", c, "/", <length; int-to-string> ts, " not declared"])
             ; <log-puts> "    "
             ; <pp-stratego-fragment> Op(c, ts)
             ; log-puts
             ; <log-puts> "\n"
       );
       manytd(not(CheckCons /* <+ CheckTuple */); CheckConsError)
    |}

