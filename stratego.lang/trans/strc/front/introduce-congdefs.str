/**
 * Introduce congruence definitions
 */

module introduce-congdefs

imports signatures/Stratego-Sugar 
	strc/front/desugar 
	strc/lib/stratlib 
	signatures/Stratego-Sugar-MetaTransition

strategies

  introduce-congdefs =
    try(AddAnnoCongDef)
    ; AddCongruenceDefinitions

  AddCongruenceDefinitions : 
    Specification([
      Signature(bsigs), 
      Overlays(ols),
      Strategies(sdefs)
    ]) ->
    Specification([
      Signature(bsigs),
      Overlays(ols),
      Strategies(<conc> (<congdefs> bsigs, sdefs))
    ])
    where <map(try(RegisterCongDef))> sdefs

  AddAnnoCongDef :
    Specification([
      Signature(bsigs), 
      Overlays(ols),
      Strategies(sdefs)
    ]) ->
    Specification([
      Signature(bsigs), 
      Overlays(ols),
      Strategies([<AnnoCongDef> | sdefs])
    ])
    where <not(fetch(try(?AnnoDef(_, <id>); 
             ( ?SDefT("Anno_Cong__",_,_,_)
		     + ?RDefT("Anno_Cong__",_,_,_)
		     + ?ExtSDef("Anno_Cong__",_,_)
		     + ?ExtSDefInl("Anno_Cong__",_,_,_)))))> sdefs

strategies

  // avoid double definitions of congruences by registering already
  // defined operators

  RegisterCongDef =
    AnnoDef(id, RegisterCongDef)

  RegisterCongDef =
    ?ExtSDef(f, xs, []) 
    ; where(<length> xs => n)
    ; rules(CongDefined : (f, n) -> ())

  RegisterCongDef =
    ?ExtSDefInl(f, xs, [], _)
    ; where(<length> xs => n)
    ; rules(CongDefined : (f, n) -> ())

  RegisterCongDef =
    ?SDefT(f, xs, [], _)
    ; where(<length> xs => n)
    ; rules(CongDefined : (f, n) -> ())

rules

  /**
   * Congruences from Signature
   * Congruences are recognized by the parser as strategy calls; The
   * following strategy generates strategy definitions from the
   * signature; For instance, the operator declaration
   *
   * OpDecl("F", FunType([_, _], _))
   * 
   * is translated to the strategy definition
   * 
   * SDef("F", ["x1", "x2"], Cong("F", [SVar("x1"), SVar("x2")]))
   * 
   */

  MkCongDef : 
    OpDecl(f, ConstType(t)) -> SDefT(f, [], [], Cong(f, []))
    where <not(CongDefined)> (f, 0)
        ; rules(CongDefined : (f, 0) -> ())

  MkCongDef : 
    OpDecl(f, DynT(t)) -> SDefT(f, [], [], Cong(f, []))
    where <not(CongDefined)> (f, 0)
        ; rules(CongDefined : (f, 0) -> ())

  MkCongDef : 
    OpDecl(f, FunType(ts, t)) -> 
    SDefT(f, xdecs, [], Cong(f, <map(MkCall)> xs))
    where <length> ts => n
        ; <not(CongDefined)> (f, n)
        ; rules(CongDefined : (f, n) -> ())
        ; <map-with-index(Fst; !$[cong_arg_[<id>]]; !(VarDec(<id>, DefaultStrat()), <id>));unzip> ts => (xdecs, xs)

  MkCongDefs : 
    Constructors(ods) -> <filter(MkCongDef)> ods

strategies

  m-MkCongDef : 
    OpDecl(f, ConstType(t)) -> SDefT(f, [], [], Cong(f, []))
    where <not(ModDefinition)> (f, 0, 0)

  m-MkCongDef : 
    OpDecl(f, DynT(t)) -> SDefT(f, [], [], Cong(f, []))
    where <not(ModDefinition)> (f, 0, 0)

  m-MkCongDef : 
    OpDecl(f, FunType(ts, t)) -> 
    SDefT(f, xdecs, [], Cong(f, <map(MkCall)> xs))
    where <length> ts => n
        ; <not(ModDefinition)> (f, n, 0)
        ; <map-with-index(Fst; !$[cong_arg_[<id>]]; !(VarDec(<id>, DefaultStrat()), <id>));unzip> ts => (xdecs, xs)

strategies

  congdefs = {| CongDefined : filter(MkCongDefs); concat |}

  // Congruence over annotation

  AnnoCongDef =
    where(
        f1 := "anno_cong_str_arg1"
      ; f2 := "anno_cong_str_arg2"
      ; x1 := "anno_cong_term_m"
      ; x2 := "anno_cong_anno_m"
      ; y1 := "anno_cong_term_b"
      ; y2 := "anno_cong_anno_b"
    )
    ; !|[ Anno_Cong__(f1 : ATerm -> ATerm, f2 : ATerm -> ATerm|) =
            {x1, x2, y1, y2 :
             ?x1{^x2}
             ; !x1; f1(|); ?y1
             ; !x2; f2(|); ?y2
             ; !y1{^y2}
            }
       ]|

  m-add-anno-cong-def =
    if <not(ModDefinition)> ("Anno_Cong__", 2, 0) then
      where(AnnoCongDef; m-add-def)
    end
