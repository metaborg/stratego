/**
 * Tool for generating stratego compilation warnings 
 *
 * @todo The Stratego-warnings strategy is very expensive since it does a collect
 *       for each kind of warning. Better is to do a single traversal, possibly
 *       using a dynamic rule to turn on or off certain warnings. The warning can
 *       be printed immediately, or otherwise collected using a dynamic rule.
 *
 * @todo Passing the spec as a strategy argument is bad style; spec should be the current term. 
 *
 * @author Merijn de Jonge (m.de.jonge@tue.nl)
 */
module stratego-warnings
imports
  libstratego-xtc
  strc/front/error-reporting
  signatures/Stratego-Sugar

signature
  constructors
    ObsoleteWarning     : Str -> Warning
    MissingBuildWarning : Index * Strategy -> Warning 
    ConstructorWarning  : Str -> Warning

strategies

  Stratego-warnings =
   where(
     ?spec
     ; (<get-config>"--warning"; uniq <+ ![])
     ; filter(Warning(!spec))
     ; concat
     ; print-warnings
    )

  Warning(spec) =
       WarningDebugArguments(spec)
    <+ WarningObsolete(spec)
    <+ MaybeUnboundVariables(spec)
    <+ LowerCaseConstructors(spec)
    <+ log(|Warning(), "incorrect parameter passed to -W switch: ", <id>)
       ; ![]

strategies

  LowerCaseConstructors(spec) =
    ?"lower-case-constructors"
    ; spec
    ; collect( ?OpDecl(<id>, _)  )
    ; uniq
    ; filter( 
        \ x -> ConstructorWarning(<double-quote>x) 
          where
            lower-case => x
            ; not("" + "stdin" + "stdout" + "stderr" + "meta-var" + "meta-listvar" + "amb")
        \
      )

  /**
   * Handled by use-def component
   */
  MaybeUnboundVariables(spec) =
    ?"maybe-unbound-variables"
    ; ![]

strategies

  /**
   * Debug arguments
   */
  WarningDebugArguments(spec) =
    ?"debug-arguments"
    ; spec
    ; missing-build-warning

  /**
   * Strategy to find calls to strategies with incorrect string
   * congruence arguments
   */
  missing-build-warning =
    let debug-call = {ast, arg:
          \ ast@CallT(SVar("debug"),[arg],[]) -> MissingBuildWarning(0, ast)
            where
              <?Match(Anno(Str(_), _))> arg
          \ }
         
        xtc-transform-call = {ast, arg:
          \ ast@CallT(SVar("xtc-transform"),[arg | _ ], []) -> MissingBuildWarning(0, ast)
            where
              <?Match(Anno(Str(_), _))> arg            
          \ }


     in strategy-argument-warning(
          sdef-with-property(
            debug-call
          + xtc-transform-call
          )
        )
    end

strategies

  /**
   * Obsolete strategy definitions
   */
  WarningObsolete(spec) =
    ?"obsolete-strategy-calls"
    ; spec
    ; obsolete-def

  /**
   * Strategy to find calls to the "obsolete" strategy
   */
  obsolete-def = 
    strategy-invokation-warning(
      sdef-with-property( 
        \  CallT(SVar("obsolete"),[Build(Anno(Str(msg), _))],[]) -> ObsoleteWarning(msg) \ 
      )
    )

  /**
   * Create warning string for obsolete warning
   */
  mk-warning:
    (caller, strat, ObsoleteWarning(warning)) -> msg
    where
      <concat-strings>
      ["obsolete strategy or rule invoked from '", caller, "':  ", 
       strat, ": \"", warning, "\""] => msg

  /**
   * Create warning string for debug warning
   */
  mk-warning:
    (strat, MissingBuildWarning(index, ast)) -> msg
    where
      let found-txt =
            <pp-stratego-fragment> ast
            ; <conc-strings> ("  found (desugared) :\n    ", <id>)

          expected-txt = 
            <CallT(id, <at-index(fix-build)> (index, <id>), id)> ast
            ; pp-stratego-fragment
            ; <conc-strings> ("  expected:\n    ", <id>)
            <+ !""

          fix-build =
            \ Match(t) -> Build(t) \ <+ !Build(<id>)

       in <concat-strings> [
            "possibly missing build operator in strategy ", strat, "\n"
          , <found-txt>
          , <expected-txt>
          ]
      end => msg
   
  /**
   * Create warning string for lower-case constructors
   */
  mk-warning:
    ConstructorWarning(warning) -> msg
    where
      <concat-strings> ["lowercase constructor name found: ", warning] => msg
   
  /**
   * A strategy-invokation warning is a warning related to a invokation of a
   * strategy. Typically, this means a call to an obsolete strategy.
   * The result is a list of triples (caller, strat, warning)
   * where
   *   caller  is the caller to strat
   *   strat   is the strategy causeing the warning (for instance because it is
   *           obsolete 
   *   warning is the warning messeage (typically the argument to obsolete)
   */
  strategy-invokation-warning(s) =
    split(id, collect(s);concat;not([]));
    map-apply(get-strategy-callers)
   <+
    ![]

  /**
   * A strategy-argument warning warns about a possible incorrect argument to a
   *  strategy. A typical example is a string argument to the "debug" strategy:
   *     debug("debug message")   since it should be   debug(!"debug message")
   */
  strategy-argument-warning(s) =
    collect(s)
    ; concat

  /**
   * Print a list of warnings to standard error and also print a count of the
   * number of warnings
   */
  print-warnings = 
    []
   <+
    map(mk-warning ; log(|Warning(),<id>));
    where(length => nr);
    log(|Warning(),[nr, " warning(s)"])
  
  /**
   * Return a list of callers to strategy "strat-name"
   */
  get-strategy-callers:
    (t, (strat-name, warning-msg) ) -> warning
    where
     !t;
     collect(
        caller(!strat-name);
        not(?strat-name);
        !(<id>, strat-name, warning-msg)
     ) => warning

  /**
   * Return a list of strategy names which invoke strategy "To"
   */
  caller(To) = 
    ignore-anno-def(?SDefT(name, _, _,def))
    ; To => to
    ; !def
    ; collect( CallT(SVar(?to), id, id);!to <+ ProxyT(id, id, id, id, SVar(?to)); !to )
    ; not([])
    ; !name

  /**
   * Return a list of tuples (name, match) for strategy definition for which
   * "prop" holds 
   */
  sdef-with-property(prop) =
    ignore-anno-def(?SDefT(name, _, _, <id>))
    ; collect(prop)
    ; not([])
    ; map( \ match -> (name, match) \ )

  /**
   * Transform t by subsequently applying strategy s with argument a1...an from the list l
   *
   * @type (t,l) -> t'
   */
  map-apply(s) =
    rec x ({a,as,t:
      (id, []); Fst
    <+
      ?(t, [a|as]);
      <x>(<s>(t,a), as)
   })
