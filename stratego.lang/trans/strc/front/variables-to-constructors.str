/**
 * Rename syntactic variables to nullary constructors if declared in the signature.
 */

module variables-to-constructors
imports libstratego-lib signatures/Stratego-Sugar
strategies

  variables-to-constructors =
    {| VarToConst1, VarToConst2
     : Specification(map(try(Signature([Constructors(map(try(DeclareVarToConst)))])
			     + Overlays(map(try(DeclareVarToConst))))))
     ; topdown(try(VarToConst))
     |}

  m-variables-to-constructors =
    {| VarToConst1, VarToConst2
     : m-get-all-constructors
     ; map(try(DeclareVarToConst))
     ; m-get-all-overlays
     ; map(try(DeclareVarToConst))
     ; m-transform-local-defs(topdown(try(VarToConst))) 
     |}

  m-declare-variables-to-constructors =
     m-get-all-constructors
     ; map(try(DeclareVarToConst))
     ; m-get-all-overlays
     ; map(try(DeclareVarToConst))
  
  m-variables-to-constructors-in-def = //debug(!"m-variables-to-constructors-in-def");
     topdown(try(VarToConst))

  VarToConst =
    VarToConst1 <+ VarToConst2

  DeclareVarToConst = //debug(!"DeclareVarToConst: "); 
    (?|[ x : srt ]| + 
     ?ExtOpDecl(x, ConstType(_)) + /* ?|[ external x : srt ]| */ 
     ?Overlay|[ x() = t ]|)
    ; rules( 
        VarToConst1 : 
          Term|[ x ]| -> Term|[ x() ]|         
          where warn-for-nullary-constructor-as-var(|x)
        VarToConst1 : 
          Term|[ x{t*} ]| -> Term|[ x(){t*} ]| 
          where warn-for-nullary-constructor-as-var(|x)
        VarToConst2 : 
          PreTerm|[ x ]| -> PreTerm|[ x() ]|   
          where warn-for-nullary-constructor-as-var(|x)
      )
 
  warn-for-nullary-constructor-as-var(|x) =
    log(|Warning(), ["Nullary constructor ", x, " used without parentheses"])
