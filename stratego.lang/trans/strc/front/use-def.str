module use-def
imports signatures/Stratego-Sugar 
	strc/lib/stratlib 
	strc/opt/bound-unbound-vars

strategies

  if-maybe-unbound-warnings(s) =
    try(where(<get-config> "--maybe-unbound-warnings" => 1); s)

  /**
   * Test whether all variables used in builds are matched before.
   *
   * This analysis makes use of bound-unbound-vars to the real work.
   */

  spec-use-def = 
    Specification([Signature(id),
                   Overlays(defs-use-def),
		   Strategies(defs-use-def)])

  defs-use-def =
    [] <+ where(filter(def-use-def); [])

  def-use-def = 
  where(
    {| Context, MarkVar :
      //topdown(try(Var(?ListVar(<id>))))
      !Scope(<tvars>, <id>)
      ; mark-scope
      ; ?Scope(_, <id>)
      ; (sdef-ud <+ rdef-ud <+ overlay-ud)
    |}
  )

  sdef-ud =
    ?|[ f(as) = s ]|
    ; where(
        rules(
	  Context : msg -> ["** Error in definition ", f,  ":\n   " | msg]
	  MakeWarning : msg -> ["* Warning in definition ", f, ":\n  " | msg] 
	)
       ; <unbound-vars> s
      )

  sdef-ud =
    ?|[ f(a1* | a2*) = s ]|
    ; where(
        rules(
	  Context : msg -> ["** Error in definition ", f, ":\n   " | msg]
	  MakeWarning : msg -> ["* Warning in definition ", f, ":\n  " | msg] )
        ; <unbound-vars> s
      )

  rdef-ud =
    // ?|[ f(a*) : t1 -> t2 cond* ]|
    ?RDef(f, _, Rule(t1, t2, cond*))
    ; where(
        rules(
	  Context : msg -> ["** Error in rule ", f, ":\n   " | msg]
	  MakeWarning : msg -> ["* Warning in rule ", f, ":\n  " | msg] 
	)
	; or(<bind-vars> t1,
          or(<unbound-vars> cond*,
             <use-vars> t2))
      )

  rdef-ud =
    // ?|[ f(a1* | a2*) : t1 -> t2 cond* ]|
    ?RDefT(f, t , _, Rule(t1, t2, cond*))
    ; where(
        rules( 
	  Context : msg -> ["** Error in rule ", f, ":\n   " | msg] 
	  MakeWarning : msg -> ["* Warning in rule ", f, ":\n  " | msg] 
	)
	; or(<bind-vars> t1,
          or(<unbound-vars> cond*,
             <use-vars> t2))
      )

  overlay-ud =
    ?Overlay|[ f(x*) = t ]|
    ; where(
        rules( 
	  Context : msg -> ["** Error in overlay ", f, ":\n   " | msg] 
	  MakeWarning : msg -> ["* Warning in overlay ", f, ":\n  " | msg] 
	)
        ; <use-vars> t
      )

  unbound-vars = 
    Build(id)         < Build(use-vars)
    + Match(id)	      < Match(bind-vars)
    + Rule(id,id,id)  < or(Rule(bind-vars,id,id),
			or(Rule(id,id,unbound-vars),
			   Rule(id,use-vars,id)))
    + PrimT(id,id,id) < or(PrimT(id,unbound-vars,id),
			   PrimT(id,id,use-vars))
    + CallT(id,id,id) < or(CallT(id,unbound-vars,id),
			   CallT(id,id,use-vars))
    + CallDynamic(id,id,id) < or(CallDynamic(id,unbound-vars,id),
                                 CallDynamic(use-vars,id,use-vars))
    + ScopedMatchCase(id, id, id) < or(ScopedMatchCase(id, bind-vars, id),
                                   ScopedMatchCase(id, id, unbound-vars))
//    + MatchCase(id, id) < or(MatchCase(bind-vars, id),
//                             MatchCase(id, unbound-vars))
    + some(unbound-vars)

  bind-vars = 
      Var(id)     < fail
    + App(id,id)  < or(App(unbound-vars, id), App(id, use-vars))
    + RootApp(id) < RootApp(unbound-vars)
    + some(bind-vars)

  use-vars = 
      ?Var(x){a*} < where(!a*; ( ?["bound"]     < fail
		               + ?["(un)bound"] < <MaybeUnbound> Var(x); fail
		               + ?["unbound"]   < <Unbound> Var(x)
		               + ?[]            ; <Unbound> Var(x)))
    + App(id,id)  < or(App(unbound-vars, id), App(id, use-vars))
    + RootApp(id) < RootApp(unbound-vars)
    + some(use-vars)

  Unbound = 
    (?Var(ListVar(x)) <+ ?Var(x))
    ; <Context; error> ["variable '", x, "' used, but not bound"]

  MaybeUnbound = 
    (?Var(ListVar(x)) <+ ?Var(x))
    ; if-maybe-unbound-warnings(
	<MakeWarning; error> ["variable '", x, "' used, but may not be bound"]
      )
