module match-to-matrix
imports signatures/Stratego 
	strc/match/matrix 
	strc/front/desugar 
  strc/lib/stratlib
	strc/opt/stratego-laws

strategies

  match-to-matrix_OLD =
    where(assume-shared-terms := <AssumeSharedTerms>)
  ; downup(repeat(MatchToMatrix + MatrixMerge + Simplify(|assume-shared-terms)))

  match-to-matrix =
  (
    if Choice(id, id) + LChoice(id, id) + GuardedLChoice(id, Id(), id) then
      rec x(
        LChoice(x, x)
        <+ GuardedLChoice(x, Id(), x)
        <+ rec y(
             Seq(y, match-to-matrix)
             <+ Scope(id, y)
             <+ MatchToMatrix
             <+ ExpandId; y
             <+ all(match-to-matrix)
           )
      )
   else 
     all(match-to-matrix)
   end
  )
  ; bottomup(repeat(MatrixMerge /* + Simplify */))

rules

  ExpandId :
    Id() -> Scope([x], Seq(Match(Var(x)), Build(Var(x))))
    where x := <tnewvar> "id_strat"

  MatchToMatrix : 
    Match(t) -> <term-to-matrix> t

  MatrixMerge : 
    Seq(Matrix(ps, [Row(ts, s1)]), s2) ->
    Matrix(ps, [Row(ts, Seq(s1, s2))])

  MatrixMerge : 
    Scope(xs, Matrix(ps, rows)) ->
    Matrix(ps, <map(\ Row(ts, s) -> Row(ts, Scope(xs, s)) \ )> rows)

  MatrixMerge : 
    GuardedLChoice(Matrix(ps, rows), Id(), s2) ->
    LChoice(Matrix(ps, rows), s2)

//  MatrixMerge : 
//    GuardedLChoice(Matrix(ps, rows), s1, s2) ->
//    LChoice(Matrix(ps, <map(\ row -> (row, s1) \ )> rows), s2)

  MatrixMerge : 
    LChoice(Matrix(ps1, rows1), LChoice(Matrix(ps2, rows2), s)) ->
    LChoice(Matrix(<union> (ps1, ps2), <conc> (rows1, rows2)), s)

  MatrixMerge : 
    LChoice(Matrix(ps1, rows1), Matrix(ps2, rows2)) ->
    Matrix(<union> (ps1, ps2), <conc> (rows1, rows2))

  MatrixMerge : 
    LChoice(Matrix(ps1, rows1), LChoice(Matrix(ps2, rows2), s)) ->
    LChoice(Matrix(<union> (ps1, ps2), <conc> (rows1, rows2)), s)

  // The following rule is invalid because of the inequality
  //
  //  (s1 + s2); s3 =/= (s1; s3) + (s2; s3)
  // 
  // Also it leads to code explosion

  MatrixMergeNotValid : 
    Seq(Matrix(ps, rows), s1) ->
    Matrix(ps, <map(\ Row(ts, s2) -> Row(ts, Seq(s2, s1)) \ )> rows)


  // In some cases it might be interesting to consider though, e.g.,
  // if s1 is small and always succeeds.

/*
    Pattern match compilation for Stratego

    Copyright (C) 2003 Eelco Visser <visser@acm.org>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA

*/
