module matrix

imports signatures/Stratego 
	strc/match/automaton

signature
  /* subsorts Matrix < Strat */
  constructors
    Row    : List(Term) * Strat ->  Row
    Row    : List(Term) * List(Term) * Strat ->  Row
    Matrix : List(List(Int)) * List(Row) -> Matrix
    Matrix : List(Row) -> Matrix
    Off    : List(Int) -> Term

strategies

// Creating a matrix from a term

  term-to-matrix =
    not(oncetd(?Explode(_,_)))
    ; ! As(Off([]), [<id>])
    ; topdown(try(?As(Wld(), <id>)))
    ; topdown(try(Propagate))
    ; collect-substitutions
    ; \ (ts, s) -> Matrix(<collect-offsets> ts, 
			 [Row(ts, Seq(<seqs> s, Build(Var([0]))))]) \

  collect-offsets =
    collect(?Off(<id>))

// Renaming the matrix to obtain the same variables based on position 
// relative to the root in all patterns 

  rename-matrix = 
    Matrix(map(rename-row));
    \ Matrix(rows) -> 
      Matrix(<map(?Row(<id>,_)); collect-offsets> rows, rows) \

  rename-row = 
    RenameRow
    ; Row(topdown(repeat(Propagate)), id)
    ; AddRowSubstitutions

rules

  RenameRow :
    Row(ts, fin) -> Row(As(Off([]), ts), fin)

  Propagate :
    As(Off(path), Anno(Op(f, ts), pt)) -> 
    As(Off(path), Anno(Op(f, As(Off(path), ts)), As(Off(["a" | path]), pt)))

  Propagate :
    As(Off(path), Op(f, ts)) -> 
    As(Off(path), Anno(Op(f, As(Off(path), ts)), As(Off(["a" | path]), Wld())))

  Propagate :
    As(Off(path), Anno(Int(n),pt)) -> 
    As(Off(path), Anno(Int(n), As(Off(["a" | path]), pt)))

  Propagate :
    As(Off(path), Anno(Real(n),pt)) -> 
    As(Off(path), Anno(Real(n), As(Off(["a" | path]), pt)))

  Propagate :
    As(Off(path), Anno(Str(n),pt)) -> 
    As(Off(path), Anno(Str(n), As(Off(["a" | path]), pt)))

  Propagate :
    As(Off(path), Anno(Var(x),pt)) -> 
    As(Off(path), Anno(Var(x), As(Off(["a" | path]), pt)))

    // what to do with annotation?

  Propagate :
    As(Off(path), As(Var(x), t)) -> As(Var(x), As(Off(path), t))

  Propagate :
    As(Off(path), BuildDefault(t)) -> As(Off(path), Wld())

  Propagate :
    As(Off(path), ts) -> ts'
    where <nzip0(Annotate(|path))> ts => ts'

  Annotate(|path) :
    (i, t) -> As(Off([i | path]), t)

// Replace variables by wildcards and add renamings from new to old
// variables

rules

  AddRowSubstitutions :
    Row(ts, s) -> Row(ts', Seq(<seqs> sbs, s))
    where <collect-substitutions> ts => (ts', sbs)
 
// Collecting substitution

strategies

  collect-substitutions = 
    collect-split(IgnoreVar, CollectSubst)

rules

  IgnoreVar : 
    As(Off(path), Var(x)) -> As(Off(path), Wld()) where <is-list> path

  IgnoreVar : 
    As(Off(path), Anno(Var(x),pt)) -> As(Off(path), Anno(Wld(),pt)) where <is-list> path

  CollectSubst : 
    As(Off(path), Var(x)) -> [Assign(Var(x), Var(path))]

  CollectSubst : 
    As(Off(path), Anno(Var(x),pt)) -> [Assign(Var(x), Var(path))]

  IgnoreVar : 
    As(Var(x), As(Off(path), t)) -> As(Off(path), t)

  CollectSubst : 
    As(Var(x), As(Off(path), t)) -> [Assign(Var(x), Var(path))]


/*
    Pattern match compilation for Stratego

    Copyright (C) 2003,2005 Eelco Visser <visser@acm.org>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA

*/
