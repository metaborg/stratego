/**
 * Annotate strategy invocations and term variable uses with the
 * path to their defining frames, and annotate their declarations as
 * escaping when applicable.
 */
module escaping-variables
imports
  libstratego-lib
  signatures/Stratego-Core
  strc/c/frame-composition // necessary for the Closure constructor


strategies

  escaping-variables-io = 
    io-wrap(escaping-variables)

  escaping-variables-quiet = 
    mark-escaping-variables
  ; annotate-frame-offsets

  escaping-variables =
    {| Say
     : rules(Say: () -> ())
     ; mark-escaping-variables
     ; annotate-frame-offsets
     |}

  mark-escaping-variables =
    {| CurrentFrame, FrameOf, Escapes, Closure
     : init-current-frame
     ; alltd(declare-frame-of)
     ; where(runtime-defs; alltd(declare-frame-of))
     ; alltd({ ?|[ f( a1* | a2* ) = s ]| }; ev)
     |}

  runtime-defs = !|[
    strategies
      external _Id(|)
      external _Fail(|)
      external SRTS_all(S : ATerm -> ATerm|)
      external SRTS_one(S : ATerm -> ATerm|)
      external SRTS_some(S : ATerm -> ATerm|)
  ]|

  init-current-frame =
    rules( CurrentFrame :+ _ -> "top-level" )

  declare-frame-of =
    (?|[ f(a1*|a2*) = s ]| 
     <+ ?|[ external f(a1*|a2*) = s ]| 
     <+ ?|[ external f(a1*|a2*) ]|)
    ; where( g := <CurrentFrame> )
    ; rules( 
        FrameOf     : f{t*} -> g
        Escapes+f{} :- f{t*}
        Closure+f{} :- f{t*}
      )

  ev = //debug(!"in: "); (
    escaping-var 
    <+ ev-sdef 
    <+ ev-scope 
    <+ ev-let 
    <+ try(CallIsClosure); all(ev); try(args-should-be-closures)
  //); debug(!"out: ")

  ev-let :
    |[ let def1* in s1 end ]| -> |[ let def3* in s2 end ]|
    where {| FrameOf, Escapes, Closure
           : <map(declare-frame-of)> def1*
	   ; <ev> def1* => def2*
	   ; <ev> s1 => s2
	   ; <map(SDefT(try(Closure; try(Escapes)),id,id,id))> def2* => def3*
           |}

  ev-sdef :
    |[ f(a1*|a2*) = s ]| -> |[ f(a3*|a4*) = s' ]|
    where {| CurrentFrame, Escapes, FrameOf, Closure
           : rules( CurrentFrame :+ _ -> f{} )
	   ; <map(declare-arg(|f); apply-closure)> a1*
	   ; <map(declare-arg(|f))> a2*
	   ; <ev> s => s'
           ; <map(try(escaping-arg))> a1* => a3*
	   ; <map(try(escaping-arg))> a2* => a4*
           |}

  ev-scope : 
    |[ {x1* : s1} ]| -> |[ {x2* : s2} ]|
    where CurrentFrame => f
	; {| FrameOf, Escapes
           : <map(declare-local-var(|f))> x1*
	   ; <ev> s1 => s2
	   ; <map(try(Escapes))> x1* => x2*
           |}

  declare-arg(|f) =
    ?Typedid|[ x : tp ]|
    ; where(<declare-local-var(|f)> x)

  apply-closure =
    ?Typedid|[ f : tp ]|
    ; rules( 
        CallIsClosure : 
          |[ f~{t1*}(s*|t2*) ]| -> |[ f~{ApplyClosure(),t1*}(s*|t2*) ]| 
        CallIsClosure : 
          ProxyT(s*,t*,i,o,SVar(f{t1*})) -> ProxyT(s*,t*,i,o,SVar(f{ApplyClosure(),t1*}))
      )

  escaping-arg :
    Typedid|[ x : tp ]| -> Typedid|[ y : tp ]|
    where <Escapes> x => y

  declare-local-var(|f) = ?x;
    rules(
      FrameOf     : x{t*} -> f
      Escapes+x{} :- x{t*}
    )

  escaping-var =
    Var(escaping-var-id) <+ SVar(escaping-var-id)

  escaping-var-id :
    x{t1*} -> x{Frames(frames),t1*}
    where frames := <frames-to-parent> x
	; if <not([])> frames then
            rules( Escapes.x{} : x{t*} -> x{Escapes(),t*} )
            <+ if <Say> () then say(<concat-strings>
                 ["* warning (escaping-var-id): ", x, " not declared"]) end
          end

  frames-to-parent =
    where(f := <FrameOf <+ !"top-level">)
    ; bigbagof-CurrentFrame
    ; take-until(?f)

  args-should-be-closures = 
    CallT(id, map(arg-should-be-closure <+ arg-should-be-closure-undeclared), id)

  args-should-be-closures = 
    PrimT(id, map(arg-should-be-closure <+ arg-should-be-closure-undeclared), id)

  args-should-be-closures = 
    CallDynamic(id, map(arg-should-be-closure <+ arg-should-be-closure-undeclared), id)

  arg-should-be-closure = CallT(SVar(arg-should-be-closure-name), ?[], ?[])
  arg-should-be-closure = ProxyT(id, id, id, id, SVar(arg-should-be-closure-name))

  arg-should-be-closure-name:
    f{Frames(frames)} -> f{Closure(x),Frames(frames)}
    where x := <conc-strings> (f, "_cl")
  ; rules( 
            Closure.f{} : f{t3*} -> f{Closure(x),t3*} 
            // tricky: label should not have annotations, 
            // otherwise there is no match
          )

  arg-should-be-closure-name:
    f{Frames(frames),ApplyClosure()} -> 
    f{Closure(f{}),Frames(frames)}

  arg-should-be-closure-undeclared =
    debug(!"* warning (arg-should-be-closure): not a local function")
    ; <exit> 1
    
  is-ListOp =
    ?Op("Nil", []) + ?Op("Cons", [_, _])

  Arity :
    ConstType(t) -> 0

  Arity :
    FunType(ts, t) -> <length> ts
