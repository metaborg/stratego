module frame-composition
imports libstratego-lib signatures/Stratego-Core strc/c/frames

strategies

  // count the number of escaping variables and functions per definition

  frame-composition = 
    io-wrap(annotate-frame-offsets)

  annotate-frame-offsets = 
    alltd(afo-sdef)

  afo = //debug(!"afo in: "); (
    afo-let
    <+ afo-sdef
    <+ afo-scope
    <+ afo-var
    <+ afo-matchcase
    <+ afo-call; all(afo)
    <+ afo-proxy
    <+ all(afo)
  //); debug(!"afo out: ")

  afo-let :
    |[ let def1* in s1 end ]| -> |[ let def2* in s2 end ]|
    where {| OffSet 
           : def2* := <map(try(offset-sdef)); map(afo)> def1*
           ; s2 := <afo> s1
           |}

  afo-sdef :
    def1@|[ f1~{t*}(a1*|a2*) = s1 ]| -> |[ f1~{os,t*}(a3*|a4*) = s2 ]|
    where //debug(!"afo-sdef: ");
	  {| ScopedCounter, OffSet
           : reset-scoped-counter(|"svar")
           ; reset-scoped-counter(|"var")
	   ; !(<get-scoped-counter(|"svar")>,
               <get-scoped-counter(|"var")>)
	   //; debug(!"counters 1: ")
           ; a3* := <map(try(offset-arg(|"svar")))> a1*
           ; a4* := <map(try(offset-arg(|"var")))> a2*
	   ; !(<get-scoped-counter(|"svar")>,
               <get-scoped-counter(|"var")>)
	   //; debug(!"counters 2: ")
           ; s2  := <afo> s1
           ; os  := Offsets(<get-scoped-counter(|"svar")>,
                            <get-scoped-counter(|"var")>)
           |}
	//; debug(!"afo-sdef out: ")

  afo-scope :
    |[ {x1* : s1} ]| -> |[ {x2* : s2} ]|
    where //debug(!"afo-scope: ");
	  {| OffSet
           : x2* := <map(try(offset-local-var(|"var")))> x1*
           ; s2  := <afo> s1
           |}
	//; debug(!"afo-scope out: ")

  afo-matchcase :
    ScopedGuardedMatchCase(x1*, t1, s1, s2) ->
    ScopedGuardedMatchCase(x2*, t2, s3, s4)
  where
    {| OffSet
           : x2* := <map(try(offset-local-var(|"var")))> x1*
           ; t2 := <afo> t1
           ; s3 := <afo> s1
           ; s4 := <afo> s2
           |}

  offset-sdef :
    |[ f1(a1* | a2*) = s ]| -> |[ f2(a1* | a2*) = s ]|
    where f2 := <offset-local-var(|"svar")> f1

    // does the f1 also match with the annos? maybe use f1~{t*} same for f2

  offset-arg(|c) :
    Typedid|[ x1 : tp ]| -> Typedid|[ x2 : tp ]| 
    where x2 := <offset-local-var(|c)> x1

  offset-local-var(|c) :
    x{t1*} -> x{Offset(i), t1*}
    where //debug(!"offset-local-var: ");
	  <fetch(?Escapes())> t1*
        ; i := <next-scoped-counter(|c)>
	//; debug(!"next offset: ")
        ; rules( OffSet+x : x{t2*} -> x{Offset(i),t2*} )

  afo-call :
    |[ f1(s* | t*) ]| -> |[ f2(s* | t*) ]|
    where f2 := <OffSet> f1

  afo-proxy :
    ProxyT(s*, t*, i, o, SVar(f1)) -> ProxyT(s*, t*, i, o, SVar(f2))
    where f2 := <OffSet> f1

  afo-var :
    Term|[ x1 ]| -> Term|[ x2 ]|
    where x2 := <OffSet> x1

strategies

  /**
   * Scoped counter
   */

  new-scoped-counter =
    <newname> "scoped_counter"; reset-scoped-counter(|<id>)

  reset-scoped-counter(|c) =
    set-scoped-counter(|c,0)

  reset-scoped-counter(|c,l) = 
    set-scoped-counter(|c,0,l)

  enter-counter-scope(|c,l) =
    rules( ScopedCounter+l )

  set-scoped-counter(|c,n) =
    rules( ScopedCounter : c -> n )

  set-scoped-counter(|c,n,l) =
    rules( ScopedCounter.l : c -> n )

  get-scoped-counter(|c) =
    <ScopedCounter> c <+ set-scoped-counter(|c,0); !0

  /**
   * return the current counter value and increment 
   */

  next-scoped-counter(|c) =
    get-scoped-counter(|c); where(inc; set-scoped-counter(|c, <id>))

  next-scoped-counter(|c,l) =
    get-scoped-counter(|c); where(inc; set-scoped-counter(|c, <id>, l))

