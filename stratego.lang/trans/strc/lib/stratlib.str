/**
 * Library for Strategies
 *
 * This module instantiates several language independent
 * functions to the strategy language.
 * 
 * @author Eelco Visser
 */

module stratlib
imports libstratego-lib signatures/Stratego-Sugar

strategies

  seqs =
    \[] -> Id()\ <+ foldr1(Hd, \(s1, s2) -> Seq(s1, s2)\)

  lchoices = 
    \[] -> Fail()\ <+ foldr1(Hd, \(s1, s2) -> LChoice(s1, s2)\)

strategies

  ignore-anno-def(s) =
    ?AnnoDef(_, _) < AnnoDef(id, s) + s

rules

  Add1 : Var(x)  -> [x]
  Add2 : SVar(x) -> [x]
 
  IsVar  : Var(x) -> x
  IsSVar : Call(SVar(x), []) -> x
  IsSVar : CallT(SVar(x), [], []) -> x
  IsSVar : ProxyT(_, _, _, _, SVar(x)) -> x
  MkCall : x -> CallT(SVar(x), [], [])

strategies

/*
  Bound Variables

  The following rules and strategies define which constructs
	bind variables. The \verb|Bnd| rules define which variables
	are bound. The \verb|paste| strategies define where new variables
	should be pasted in case of renaming. The \verb|boundin|
	strategies
	define in which arguments of the constructs the variables are 
	binding.
*/

rules

  Bind0 : Scope(xs, s) -> xs
  Bind0 : LRule(Rule(t1, t2, s)) -> <tvars> t1
  Bind0 : ScopedMatchCase(xs, _, _) -> xs // TODO BINDS: Check
  Bind0 : ScopedGuardedMatchCase(xs, _, _, _) -> xs
  //Bind0 : MatchCase(t, s) -> ? // TODO BINDS: Introduce?

  Bind1 : Let(defs, s2) -> <map(ignore-anno-def(?SDef(<id>,_,_) + ?SDefT(<id>,_,_,_) + ?RDef(<id>,_,_) + ?RDefT(<id>,_,_,_)))> defs
  Bind2 : SDef(f, xs, s) -> <declared-vars> xs
  Bind3 : Rec(x, s) -> [x]

  Bind4 : GenDynRules(rs) -> <tvars> rs

  Bind5 : SDefT(f, xs, ys, s) -> <declared-vars> xs
  Bind6 : SDefT(f, xs, ys, s) -> <declared-vars> ys

  Bind5 : ExtSDef(f, xs, ys) -> <declared-vars> xs
  Bind6 : ExtSDef(f, xs, ys) -> <declared-vars> ys

  Bind5 : ExtSDefInl(f, xs, ys, s) -> <declared-vars> xs
  Bind6 : ExtSDefInl(f, xs, ys, s) -> <declared-vars> ys

  Bind5 : ExtTypedDefInl(f, xs, ys, _, s) -> xs
  Bind6 : ExtTypedDefInl(f, xs, ys, _, s) -> ys

  Bind7 : RDefT(f, xs, ys, s) -> <declared-vars> xs
  Bind7 : RDecT(f, xs, ys)    -> <declared-vars> xs

  Bind8 : RDefT(f, xs, ys, s) -> <declared-vars> ys
  Bind8 : RDecT(f, xs, ys)    -> <declared-vars> ys

strategies

  Bind9  = dynrule-sargs(declared-vars)
  Bind10 = dynrule-targs(declared-vars)

  dynrule-lhs(s) =
    ?UndefineDynRule(_, <s>)
  + ?SetDynRule(_, Rule(<s>, _, _))
  + ?AddDynRule(_, Rule(<s>, _, _))

  dynrule-sargs(s) =
    ?UndefineDynRule(DynRuleId(RDecT(_,<id>,_)), _)
  + ?SetDynRule(DynRuleId(RDecT(_,<id>,_)), _)
  + ?AddDynRule(DynRuleId(RDecT(_,<id>,_)), _)

  dynrule-targs(s) =
    ?UndefineDynRule(DynRuleId(RDecT(_,_,<id>)), _)
  + ?SetDynRule(DynRuleId(RDecT(_,_,<id>)), _)
  + ?AddDynRule(DynRuleId(RDecT(_,_,<id>)), _)
    
  dynrule-cong(name, sargs, targs, lhs, rhs, cond) =
    UndefineDynRule(DynRuleId(RDecT(name,sargs,targs)), lhs)
  + SetDynRule(DynRuleId(RDecT(name,sargs,targs)), Rule(lhs, rhs, cond))
  + AddDynRule(DynRuleId(RDecT(name,sargs,targs)), Rule(lhs, rhs, cond))

  dynrule-cong(drid, rule) =
    UndefineDynRule(drid, rule)
  + SetDynRule(drid, rule)
  + AddDynRule(drid, rule)
  

strategies

  tpaste(nwvars) =
    Scope(nwvars, id)
    + LRule(id) // Let the tboundin handle this, or zip tvars of LHS and nwvars here?
    + RDecT(id, id, split(id, nwvars); zip(ReplaceVar))
    + SDefT(id, id, split(id, nwvars); zip(ReplaceVar), id)
    + ExtSDef(id, id, split(id, nwvars); zip(ReplaceVar))
    + ExtSDefInl(id, id, split(id, nwvars); zip(ReplaceVar), id)
    + ExtTypedDef(id, id)
    + ExtTypedDefInl(id, id, split(id, nwvars); zip(ReplaceVar), id, id)
    + RDefT(id, id, split(id, nwvars); zip(ReplaceVar), id)
    + ScopedMatchCase(nwvars, id, id)
    + ScopedGuardedMatchCase(nwvars, id, id, id)
    + dynrule-cong(id, id, split(id, nwvars); zip(ReplaceVar), id, id, id)

  ReplaceVar :
    (VarDec(x,t), y) -> VarDec(y,t)

  ReplaceVar :
    (DefaultVarDec(x), y) -> DefaultVarDec(y)

  tboundin(bnd, ubnd, ignore) =
    Scope(ignore, bnd)
    + LRule(Rule(bnd, bnd, bnd))
    + ScopedMatchCase(ignore, bnd, bnd) // TODO BINDS Check
    + ScopedGuardedMatchCase(ignore, bnd, bnd, bnd)
    + RDecT(ignore, ignore, ignore)
    + SDefT(ignore, ignore, ignore, bnd)
    + ExtSDef(ignore, ignore, ignore)
    + ExtSDefInl(ignore, ignore, ignore, bnd)
    + ExtTypedDef(ignore, ignore)
    + ExtTypedDefInl(ignore, ignore, ignore, ignore, bnd)
    + RDefT(ignore, ignore, ignore, bnd)
    + dynrule-cong(ignore, bnd)

    + GenDynRules(bnd)

  spaste(nwvars) =
      Let(split(id,nwvars); 
          zip(\ (SDef(_,xs,s), f) -> SDef(f,xs,s)\ + 
              \ (SDefT(_,xs,ys,s), f) -> SDefT(f,xs,ys,s)\ + 
              \ (RDef(_,xs,s), f) -> RDef(f,xs,s)\ + 
              \ (RDefT(_,xs,ys,s), f) -> RDefT(f,xs,ys,s)\)
         , id)
    + SDef(id,  split(id, nwvars); zip(ReplaceVar), id)
    + SDefT(id, split(id, nwvars); zip(ReplaceVar), id, id)
    + ExtSDef(id, split(id, nwvars); zip(ReplaceVar), id)
    + ExtSDefInl(id, split(id, nwvars); zip(ReplaceVar), id, id)
    + ExtTypedDef(id, id)
    + ExtTypedDefInl(id, split(id, nwvars); zip(ReplaceVar), id, id, id)
    + RDefT(id, split(id, nwvars); zip(ReplaceVar), id, id)
    + RDecT(id, split(id, nwvars); zip(ReplaceVar), id)
    + dynrule-cong(id, split(id, nwvars); zip(ReplaceVar), id, id, id, id)
    + Rec(nwvars; Hd, id)

  sboundin(bnd, ubnd, ignore) =
      Let(bnd, bnd)
    + SDef(ignore, ignore, bnd)
    + SDefT(ignore, ignore, ignore, bnd)
    + ExtSDef(ignore, ignore, ignore)
    + ExtSDefInl(ignore, ignore, ignore, bnd)
    + ExtTypedDef(ignore, ignore)
    + ExtTypedDefInl(ignore, ignore, ignore, ignore, bnd)
    + RDefT(ignore, ignore, ignore, bnd)
    + RDecT(ignore, ignore, ignore)
    + dynrule-cong(ignore, bnd)
    + Rec(ignore, bnd)

// Free Variables and Renaming

strategies

  tnewvar =
    string-as-chars([ is-alpha + ?'_' | map(is-alphanum + ?'_' + \'-' -> '_'\ + \'\'' -> 'q'\ + \'*' -> 's'\) ])
    ; lower-case
    ; def-local-newname
    ; lower-case
    <+ new

  snewvar =
    string-as-chars([ is-alpha + ?'_' | map(is-alphanum + ?'_' + \'-' -> '_'\ + \'\'' -> 'q'\) ])
    ; lower-case
    ; def-local-newname
    ; lower-case
    <+ new

  declared-vars =
    map(?VarDec(<id>,_) + ?DefaultVarDec(<id>))

  tvars = 
    free-vars(Add1, Bind0 + Bind4 + Bind6 + Bind8 + Bind10, tboundin)

  svars = 
    free-vars(Add2, Bind1 + Bind2 + Bind3 + Bind5 + Bind7 + Bind9, sboundin)

  trename = 
    rename(Var, Bind0 + Bind6 + Bind8 + Bind10, tboundin, tpaste, tnewvar)

  srename = 
    rename(SVar, Bind1 + Bind2 + Bind3 + Bind5 + Bind7 + Bind9, sboundin, spaste, snewvar)

  svars-arity = 
    free-vars2(\CallT(SVar(f), as1, as2) -> [(f, (<length> as1, <length> as2))]\
               <+ \ProxyT(as1, as2, _, _, SVar(f)) ->  [(f, (<length> as1, <length> as2))]\
              ,Bind1 + Bind2 + Bind3 + Bind5 + Bind7 + Bind9
              ,sboundin
              ,{f:?((f,_),f)})

  strename = 
    trename ; srename

  tsubstitute = 
    substitute(IsVar, Var, Bind0 + Bind4 + Bind6 + Bind8 + Bind10, tboundin, tpaste)

  tsubs = 
    substitute(IsVar)

  ssubs = 
    substitute(IsSVar)

// This should be in libstratego-lib, strategy/general/rename; but it's too much effort to bootstrap
rules

  internal RnBinding(bndvrs, paste : (term -> vars) * term -> term, newvar : term -> term) :
    (t, env1) -> (<paste(!ys)> t, env1, env2)
    where <bndvrs> t => xs; map(newvar) => ys;
          <conc>(<zip(id)>(xs,ys), env1) => env2

strategies

  internal rename(isvar : (name -> env) * name -> term
        , bndvars
        , boundin : (term -> term) * (term -> term) * (term -> term) * term -> term
        , paste : (term -> vars) * term -> term
        , newvar : term -> term
        )
  = \ t -> (t, []) \ ;
    rec x(env-alltd(RnVar(isvar)
                    <+ RnBinding(bndvars, paste, newvar);
                       DistBinding(x, boundin)))

rules

  scope-def-local-newname(s|defname) = {| LocalDefName:
      rules(LocalDefName := defname)
    ; s
    ; rules(LocalDefName :- defname)
  |}

  def-local-newname =
    try(!$[[<LocalDefName>]_[<id>]])
  ; newname
