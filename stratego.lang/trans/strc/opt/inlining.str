module inlining

imports signatures/Stratego-Amb 
	strc/lib/stratlib 
	strc/opt/stratego-laws 
	strc/front/rename-defs

/**
 * Inlining with Definition Environment
 *
 * The inlining strategy uses an environment with all
	the defininitions to be inlined and distributes it over
	the other definitions, substituting bodies for calls to
	operators.

	Heuristics for inlining: inline all operators with arguments.
	Also nullary operators that represent rules (do a match as
	first action).

 */

// TODO: rephrase using concrete syntax

// TODO: review inlining criteria, take properties of call site into account

// TODO: measure the amount of inlining done and the effect on performance

overlays

  dont-inline = []
  
  INLINE_MAX_TERM_SIZE = 50

  // create a user-definable list of function that should not and/or functions
  // that should be inlined.

strategies

  inline-strategies = 
    Specification([id,Strategies(inline-sdefs)])

  inline-sdefs = 
    try(olevel3(?o3)) // global definition inlining is only done with -O 3
    ; map(
        AnnoDef([Internal], simplify0; try(inlineable; AddSDef))
      <+
        ignore-anno-def(simplify0; try(where(!o3); inlineable; AddSDef))
      )
    ; map(ignore-anno-def(SDefT("DYNAMIC_CALLS_0_0",id,id,id) <+ inline-sdef; try(inlineable; AddSDef)))

  inline-sdef =
    DeclareInline(inline-sdef) 
    <+ UndefineSDef(inline-sdef) 
    <+ repeat(/* InlineCall0 <+ */ InlineCall); all(inline-sdef)

  DeclareInline(x) = 
    ?Let(defs, s)
    ; {| InlineCall //, InlineCall0
         : where(<map(local-inlinable(|s); AddSDef)> defs)
	 ; Let(x, x)
       |}

  UndefineSDef(x) =
    ?SDefT(f,_,_,_)
    ; {| InlineCall
       : rules( InlineCall :- CallT(SVar(f), ss, ts) )
       ; SDefT(id,id,id,x)
       |}

  AddSDef =
    ?ExtSDefInl(f, as1, as2, s)
    ; where(<AddSDef>SDefT(f, as1, as2, s))

  AddSDef =
    ?sdef@SDefT(f, _, _, _)
    ; rules(
      InlineCall : 
        CallT(SVar(f), ss, ts) -> <simplify> s''
        where //debug(!"InlineCall: ") ;
	     <strename> sdef => SDefT(f, xs, ys, s)
            ; <substitute-args> (xs, ss, s) => s'
	    ; <map(?VarDec(<id>,_))> ys => ys'
	    ; !Scope(ys', 
		     Seq(<zip(\ (t,y) -> Where(Seq(Build(t),Match(Var(y))))\ ); seqs>(ts, ys'), s'))
              => s''
            ; rules(InlineCall :- CallT(SVar(f), _, _) )
	    //; <debug(!"Inlining: ")> f

/*
      InlineCall0 : 
        CallT(SVar(f), [], []) -> Let([SDefT(g, xs, ys, s)], CallT(SVar(g),[],[]))
        where ///debug(!"InlineCall (0,0): ") ;
	      <strename> sdef => SDefT(f, xs, ys, s)
  	    ; <gt>(<add>(<length> xs, <length> ys), 0)
            ; new => g
            ; rules(InlineCall :- CallT(SVar(f), _, _) )
	    //; <debug(!"Inlining: ")> f
*/

    )

  substitute-args = 
    {| SubsArgCall1, SubsArgCall2 :
       ?(xs, ss, s)
       ; <zip(substitute-arg)> (xs, ss)
       ; <topdown(try(SubsArgCall1 + SubsArgCall2))> s
    |}

  substitute-arg =
    ?(VarDec(x, FunType([_],_)), s);
    rules(SubsArgCall1 : CallT(SVar(x), [], []) -> <strename> s)

  substitute-arg =
    ?(VarDec(x, FunType([_,_|_],_)), CallT(SVar(y), [], []));
    rules(SubsArgCall2 : CallT(SVar(x), ss, ts) -> CallT(SVar(y), ss, ts))

  inlineable = 
    //debug(!"inlineable?: ");
    SDefT(not("main_0_0"); ?f, id, id
         , where(not(oncetd(?CallT(SVar(f),_,_)))); body-to-inline)
    // ; where(<not(fetch(?f))> dont-inline)
    // ; where(<debug(!"inlineable: ")> f )

  inlineable = 
    //debug(!"inlineable?: ");
    ExtSDefInl(not("main_0_0"); ?f, id, id
         , where(not(oncetd(?CallT(SVar(f),_,_)))); body-to-inline)
    // ; where(<not(fetch(?f))> dont-inline)
    // ; where(<debug(!"inlineable: ")> f )

  local-inlinable(|s1) =
    ?SDefT(f, _, _, s2)
    ; where( 
	<not(oncetd(?CallT(SVar(f),_,_)))> s2 // not recursive
        ; <leq>(<occurrences(?CallT(SVar(f),_,_))> s1, 1) // used at most once
      )

  // Optimization:
  // Note that the occurrences check above is potentially expensive since it requires
  // a local traversal for each local definition; a separate occurrence analysis traversal
  // may solve this. Since only few local definitions are used currently this is not a
  // high priority problem.

  body-to-inline = 
    rec x(
        Id()
	+ Fail()
	+ CallT(SVar(id),id,id)
	+ PrimT(SVar(id),id,id)
	+ Build(id)
	+ Match(id)
	+ Seq(Match(id), id)
	+ Scope(id, Match(id))
	+ Scope(id, Seq(Match(id), id))
	+ Seq(Scope(id, Seq(Match(id), id)), id)
	+ Choice(x, x)
	+ LChoice(x, x)
	+ GuardedLChoice(x, x, x)
	+ Cong(id,id)
//        + Rec(id, id)
    );
    where(<leq>(<term-size>, INLINE_MAX_TERM_SIZE()))
