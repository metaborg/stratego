module bound-unbound-vars
imports strc/lib/stratlib
strategies

  mark-bound-unbound-vars =
    mark-buv

  mark-bound-unbound-vars-old =
    if-verbose4(say(!"marking bound-unbound-vars"))
    ; Specification(
        {| MarkVar
         : at-last(Strategies(map(mark-buv)))
         |}
      )
    ; if-verbose4(say(!"marked bound-unbound-vars"))

  /**
   * Annotate variables with one of the annotations "bound",
   * "unbound", or "(un)bound".
   * 
   * Variables are bound in matches, used in builds, and
   * refreshed in scopes. Choice operators may lead to 
   * a variable being bound in one path, but not in the
   * other. Such variables are annotated with "(un)bound".
   */

  mark-buv = //debug(!"mark-buv in: "); dr-print-rule-set(|"MarkVar"); (
    mark-match 
    <+ mark-build
    <+ mark-scope
    <+ mark-let
    <+ mark-traversal
    <+ mark-sdef 
    <+ mark-rdef
    <+ mark-lrule
    <+ mark-srule
    <+ mark-overlay
    <+ mark-call
    <+ mark-prim
    <+ mark-rec
    <+ mark-choice(mark-buv)
    <+ mark-lchoice(mark-buv)
    <+ mark-guardedlchoice(mark-buv)
    <+ mark-matchcase
    <+ all(mark-buv)
  //); debug(!"mark-buv out: "); dr-print-rule-set(|"MarkVar")

strategies

  DeclareUnbound =
    where(!"unbound" => anno)
    ; ?x
    ; rules(MarkVar+x : Var(x) -> Var(x){anno})

  IntroduceBound =
    where(!"bound" => anno)
    ; ?x
    ; rules(MarkVar+x : Var(x) -> Var(x){anno})

  DeclareBound =
    where(!"bound" => anno)
    ; ?x
    ; rules(MarkVar.x : Var(x) -> Var(x){anno})

  DeclareMaybeUnbound =
    where(!"(un)bound" => anno)
    ; ?x
    ; rules(MarkVar.x : Var(x) -> Var(x){anno})

  undefine-unbound-MarkVar =
    where(map(
      where(<mark-var> Var(<id>) => Var(_){"unbound"})
      ; DeclareMaybeUnbound
    ))

  mark-var =
    bagof-MarkVar; select-mark

  select-mark =
    ?[] < fail + ?[<id>] <+ \ [Var(x) | _] -> Var(x){"(un)bound"} \

  fork-MarkVar(s1, s2) =
    s1 \MarkVar/ s2

strategies

  mark-scope =
    Scope(?xs, {| MarkVar : where(!xs; map(DeclareUnbound)); mark-buv|})

  // TODO BINDS: Add MatchCase(_, _)?
  mark-matchcase: ScopedMatchCase(xs, p, s) -> ScopedMatchCase(xs, p', s')
  where
    {| MarkVar :
      <map(DeclareUnbound)> xs
    ; p' := <mark-match-vars> p
    ; s' := <mark-buv> s
    |}

  mark-match =
    Match(mark-match-vars)

  mark-match-vars = 
      Var(id)     < MarkAndBind
    + App(id,id)  < App(mark-buv, mark-build-vars)
    + RootApp(id) < RootApp(mark-buv)
    + all(mark-match-vars)

  MarkAndBind =
    try(mark-var)
    ; Var(DeclareBound)

  mark-build = 
    Build(mark-build-vars)

  mark-build-vars =
      Var(id)     < mark-var
    + App(id,id)  < App(mark-buv, mark-build-vars)
    + RootApp(id) < RootApp(mark-buv)
    + all(mark-build-vars)

  mark-traversal =
    (?All(_) + ?One(_) + ?Some(_))
    ; fork-MarkVar(id, one(mark-buv))

  mark-call =
    Call(id,id)
    //; debug(!"call a: ")
    ///; dr-print-rule-set(|"MarkVar")
    ; fork-MarkVar(id, Call(id, mark-buv))
    //; debug(!"call b: ")
    //; dr-print-rule-set(|"MarkVar")

  mark-call =
    CallT(id,id,id)
    //; debug(!"callt a: ")
    //; dr-print-rule-set(|"MarkVar")
    ; fork-MarkVar(id, CallT(id, id, map(mark-build-vars)); CallT(id, mark-buv, id))
    //; debug(!"callt b: ")
    //; dr-print-rule-set(|"MarkVar")

  mark-call =
    CallDynamic(id,id,id)
    //; debug(!"callt a: ")
    //; dr-print-rule-set(|"MarkVar")
    ; fork-MarkVar(id, CallDynamic(mark-build-vars, id, map(mark-build-vars)); CallDynamic(id, mark-buv, id))
    //; debug(!"callt b: ")
    //; dr-print-rule-set(|"MarkVar")

  mark-prim =
    PrimT(id,id,id)
    ; fork-MarkVar(id, PrimT(id, id, map(mark-build-vars)); PrimT(id, mark-buv, id))

  mark-let =
    Let(id, id)
    //; debug(!"let a: ")
    //; dr-print-rule-set(|"MarkVar")
    ; where(?Let(<tvars>,_); undefine-unbound-MarkVar)
    ; Let(map(fork-MarkVar(
                            mark-buv//; debug(!"let right: "); dr-print-rule-set(|"MarkVar")
			  , id//; debug(!"let left:"); dr-print-rule-set(|"MarkVar")
			   ))
          //; debug(!"let b: ")
          //; dr-print-rule-set(|"MarkVar")
         ,    fork-MarkVar(id, mark-buv))
    //; debug(!"let c: ")
    //; dr-print-rule-set(|"MarkVar")

  mark-sdef :
    SDefT(f, as1, as2, s) -> SDefT(f, as1, as2, s')
    where <map(?VarDec(<id>,_) + ?DefaultVarDec(<id>))> as2 => as2'
	; {| MarkVar :
             <map(IntroduceBound)> as2'
             ; <mark-buv> s => s'
          |}

  mark-rdef : 
    RDefT(f, as1, as2, r@Rule(t1, t2, s)) ->
    RDefT(f, as1, as2, Rule(t1', t2', s'))
    where <map(?VarDec(<id>,_) + ?DefaultVarDec(<id>))> as2 => as2'
	; <diff>(<tvars> r, as2') => xs
	; {| MarkVar :
             <map(IntroduceBound)> as2'
	     ; <map(DeclareUnbound)> xs
	     ; <mark-match-vars> t1 => t1'
             ; <mark-buv> s => s'
	     ; <mark-build-vars> t2 => t2'
          |}

  mark-rdef : 
    RDef(f, as1, r@Rule(t1, t2, s)) ->
    RDef(f, as1, Rule(t1', t2', s'))
    where <tvars> r => xs
	; {| MarkVar :
	     <map(DeclareUnbound)> xs
	     ; <mark-match-vars> t1 => t1'
             ; <mark-buv> s => s'
	     ; <mark-build-vars> t2 => t2'
          |}

  mark-lrule :
    LRule(Rule(t1, t2, s)) -> LRule(Rule(t1', t2', s'))
    where {| MarkVar : 
	     <tvars> t1; map(DeclareUnbound)
	     ; <mark-match-vars> t1 => t1'
             ; <mark-buv> s => s'
	     ; <mark-build-vars> t2 => t2'
	  |}

  mark-srule :
    SRule(Rule(t1, t2, s)) -> SRule(Rule(t1', t2', s'))
    where {| MarkVar : 
	     // <tvars> t1; map(DeclareUnbound)
	     <mark-match-vars> t1 => t1'
             ; <mark-buv> s => s'
	     ; <mark-build-vars> t2 => t2'
	  |}

  mark-overlay : 
    Overlay(f, xs, t) -> Overlay(f, xs, t')
    where {| MarkVar :
	     <map(IntroduceBound)> xs
	     ; <mark-build-vars> t => t'
          |}

  mark-rec = 
    ?Rec(_, _)
    ; fork-MarkVar(id, Rec(id, mark-buv))

  mark-choice(uv) =
    Choice(id, id)
    ; fork-MarkVar(Choice(uv,id), Choice(id, uv))

  mark-lchoice(uv) =
    LChoice(id, id)
    ; fork-MarkVar(LChoice(uv,id), LChoice(id, uv))

  mark-guardedlchoice(uv) =
    GuardedLChoice(id, id, id)
    ; fork-MarkVar(
	GuardedLChoice(uv,id,id); GuardedLChoice(id,uv,id),
        GuardedLChoice(id,id,uv)
      )



/*
    Bound/Unbound variable analysis for Stratego programs

    Copyright (C) 2003 Eelco Visser <visser@acm.org>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA

*/
