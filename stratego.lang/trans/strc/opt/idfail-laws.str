module idfail-laws
imports signatures/Stratego
strategies

  ElimId = I1 + I2 + I3 + I4 + I7 + I8 + I9 + I10 + I12 + I16

rules
  I1  : Test(Id())        -> Id()
  I2  : Not(Id())         -> Fail()
  I3  : Seq(Id(), s)      -> s
  I4  : Seq(s, Id())      -> s   
  I5  : Choice(s, Id())   -> Id() // !!! very aggressive !
  I6  : Choice(Id(), s)   -> Id() // !!! very aggressive !
  I7  : LChoice(Id(), s)  -> Id()
  I8  : Scope(xs, Id())   -> Id()
  I9  : Rec(x,Id())       -> Id()
  I10 : All(Id())         -> Id()
  I12 : Where(Id())       -> Id()
  I16 : Match(Wld())      -> Id()

  NotValid : One(Id())    -> Id()
  NotValid : Some(Id())   -> Id()

strategies

  ElimFail = 
    F1 + F2 + F3 + F5 + F6 + F7 + F8 + F10 + 
    F11 + F12 + F13 + F14 + F15 + F16 + F17

rules

  F1  : Test(Fail())       -> Fail()
  F2  : Not(Fail())        -> Id()
  F3  : Seq(Fail(), s)     -> Fail()
  F4  : Seq(s, Fail())     -> Fail() // ! not valid with side effects
  F5  : Scope(xs, Fail())  -> Fail()
  F6  : Rec(x,Fail())      -> Fail()
  F7  : Some(Fail())       -> Fail()
  F8  : One(Fail())        -> Fail()
  F10 : Cong(f, ls)        -> Fail() where <fetch(?Fail())> ls 
  F11 : Choice(Fail(), s)  -> s
  F12 : Choice(s, Fail())  -> s
  F13 : LChoice(Fail(), s) -> s
  F14 : LChoice(s, Fail()) -> s
  F15 : Where(Fail())      -> Fail()

  F16 : GuardedLChoice(s1, s2, Fail()) -> Seq(s1, s2)
  F17 : GuardedLChoice(Fail(), s1, s2) -> s2

  NotValid : All(Fail()) -> Fail()
