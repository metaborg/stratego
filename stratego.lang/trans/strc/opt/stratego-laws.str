// This module specifies basic simplification rules for strategies.

module stratego-laws

imports 
  libstratego-lib 
  signatures/Stratego-Sugar
  strc/front/desugar  
  strc/opt/scope-laws  
  strc/opt/bind-laws 
  strc/opt/idfail-laws
  strc/opt/congruence-laws 
  strc/opt/build-match-laws

strategies
  
  Simplify(|assume-shared-terms) =
    ElimId
    + ElimFail 
    + AssociateR
    + Idempotency
    + EmptyScope
    + LetNoDefs
    + LetHoist
    + BuildMatch(|assume-shared-terms)
    + MatchSimplify

  // Provided for compatibility; for performance,
  // assume-shared-terms argument should be locally cached
  Simplify = 
    Simplify(|<AssumeSharedTerms>)
  
  /**
   * On Java, where non-shared terms may be used, 
   * there's no guaranteed relation between term equality and identity,
   * which has impact on certain optimizations.
   */
  AssumeSharedTerms =
    if <get-config> "JAVA_PLATFORM" + <get-config> "-F" then
      !0
    else
      !1
    end

  DefineCongruences =
    (MatchingCongruence <+ TransformingAnnoCongruence <+ TransformingCongruence)

  Optimize(|assume-shared-terms) =
    Simplify(|assume-shared-terms)
    + HoistLet 
    + FuseScope
    + WidenScope
    + WhereSavesCurrentTerm
    + TestSavesCurrentTerm
    + LeftChoiceIsSugar
    + ChoiceIsSugar 
    + NotIsSugar
    + RecIsSugar
    + Desugar

  // Provided for compatibility; for performance,
  // assume-shared-terms argument should be locally cached
  Optimize =
    Optimize(|<AssumeSharedTerms>)

  simplify0 =
    where(assume-shared-terms := <AssumeSharedTerms>)
  ; downup(repeat(Simplify(|assume-shared-terms)))

  simplify =
    where(assume-shared-terms := <AssumeSharedTerms>)
  ; rec rec(
      bottomup(
        repeat( AssociateR ; rec <+ Optimize(|assume-shared-terms) )
      )
    )
    
//    innermost(Optimize)

  simplify-widen = // note same as simplify
    simplify

  simplify-narrow =
    topdown(try(NarrowScope))

  simplify-clean =
    topdown(try(CleanupScope; try(FuseScope)))

  lift-term-args =
    topdown(try(LiftPrimArgs + LiftCallArgs))

rules

  LeftChoiceIsSugar :
    |[ s1 <+ s2 ]| -> |[ s1 < id + s2 ]|

  ChoiceIsSugar :
    |[ s1 + s2 ]| -> |[ s1 < id + s2 ]|

  NotIsSugar :
    |[ not(s) ]| -> |[ s < fail + id ]|

  RecIsSugar :
    |[ rec x(s) ]| -> |[ let x(|) = s in x(|) end ]|

rules

  Commutativity : 
    Choice(x, y) -> Choice(y, x)

  AssociateR: 
    Choice(Choice(x, y), z) -> Choice(x, Choice(y, z))

  AssociateR : 
    Seq(Seq(x, y), z) -> Seq(x, Seq(y, z))

  AssociateR : 
    LChoice(LChoice(x, y), z) -> LChoice(x, LChoice(y, z))
 
  AssociateL: 
    Seq(s1, Seq(s2, s3)) -> Seq(Seq(s1, s2), s3)

  Idempotency :
    Choice(x, x)  -> x
  Idempotency :
    LChoice(x, x) -> x
  Idempotency :
    Where(Where(s))  -> Where(s)
  Idempotency :
    Not(Not(s)) -> Test(s)
  Idempotency :
    Test(Test(s)) -> Test(s)
  Idempotency :
    Where(Seq(Where(s1), Seq(Build(t), s2))) ->
    Where(Seq(s1, Seq(Build(t), s2)))

// Copyright (C) 1998-2004 Eelco Visser <visser@acm.org>

