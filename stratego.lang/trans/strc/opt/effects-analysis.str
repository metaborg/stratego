/*
TODO

- deal with recursive strategy definitions

- other traversal operators

- external definitions (and primitives)

*/

module effects-analysis
imports libstratego-lib signatures/Stratego-Core
signature
  constructors
    Env : List(Id) -> Env
strategies

  effects-analysis-io =
    io-wrap(
      effects-analysis
    )

  effects-analysis = 
    alltd(DeclareAnalyzeCall)
    ; alltd(analyze-definition)

rules // Definitions, Calls

  analyze-definition :
    |[ f(a1* | a2*) = s ]| -> |[ f(a1* | a2*) = s' ]|
    where {| AnalyzeCall :
	     <map(DeclareAnalyzeUnknownCallArg)> a1*
	     ; <analyze-strategy> |[ s ]| => |[ s' ]|
	   |}

  analyze-strategy =
    bottomup(try(AnalyzeCallArg <+ AnalyzeCall <+ Analyze))

  DeclareAnalyzeCall =
    ?|[ f(a1* | a2*) = s ]|
    ; rules(
        AnalyzeCall :
          |[ f(s* | t*) ]| -> |[ f(s* | t*)~{eff} ]|
	  where debug(!"AnalyzeCall: ")
	      ; {| AnalyzeCallArg :
		   <zip(DeclareAnalyzeCallArg)> (a1*, s*)
		   ; <analyze-strategy> |[ s ]| => |[ s'~{eff} ]|
		 |}
	      ; debug(!"AnalyzeCall effect3: ")
      )

  DeclareAnalyzeCallArg =
    ?(Typedid|[ f : tp ]|, |[ s~{eff} ]|)
    ; rules( 
        AnalyzeCallArg : 
          |[ f(|) ]| -> |[ f(|)~{eff} ]| 
	  where debug(!"AnalyzeCallArg: ")
      )

  DeclareAnalyzeUnknownCallArg =
    ?Typedid|[ f : tp ]|
    ; rules( 
        AnalyzeCallArg : 
          |[ f(|) ]| -> <debug(!"AnalyzeCallArg: ")> |[ f(|)~{["sf","mb","rw",Env([])]} ]|
      )

rules // Identity, Failure

  Analyze :
    |[ id ]| -> |[ id ~{[ "s", "_", "p", Env([]) ]} ]|

  Analyze :
    |[ fail ]| -> |[ fail ~{[ "f", "_", "p", Env([]) ]} ]|


rules // Match, Build, Scope

  Analyze :
    |[ ?t ]| -> |[ ?t ~{[ sf, "m", "p", Env(xs)]} ]|
    where <(?Var(_){"unbound"} + ?Wld()); !"s" <+ !"sf"> t => sf
	; <collect(?Var(<id>){"unbound"} + ?Var(<id>){"(un)bound"})> t => xs

  Analyze :
    |[ !t ]| -> |[ !t ~{[ sf, "b", "p", Env([])]} ]|
    where <oncetd(?Var(_){"(un)bound"}); !"sf" 
	   <+ oncetd(?Var(_){"unbound"}); !"f" 
           <+ !"s"> t => sf

  Analyze :
    |[ {x1* : s ~{[sf,mb,st,Env(x2*)]} } ]| -> |[ {x1* : s}~{[sf,mb,st,Env(x3*)]} ]|
    where <diff>(x1*, x2*) => x3*


rules // Combinators

  // Sequential composition

  Analyze :
    |[ (s1 ~{eff1}) ; (s2 ~{eff2}) ]| -> |[ (s1 ; s2) ~{eff3} ]|
    where <zip(seq)> (eff1, eff2) => eff3; debug

  // success and failure

  seq : (_,    "f")  -> "f"
  seq : ("f",  _)    -> "f"
  seq : ("s",  "s") -> "s"
  seq : ("s",  "sf") -> "sf"
  seq : ("sf", "s")  -> "sf"
  seq : ("sf", "sf") -> "sf"

  // match and build

  seq : ("_", x)  -> x
  seq : (x, "_")  -> x

  seq : ("m", "b")  -> "mb"
  seq : ("m", "m")  -> "m"
  seq : ("m", "mb") -> "mb"

  seq : ("b", "m")  -> "b"
  seq : ("b", "b")  -> "b"
  seq : ("b", "mb") -> "b"

  seq : ("mb", "m")  -> "mb"
  seq : ("mb", "b")  -> "mb"
  seq : ("mb", "mb") -> "mb"

  // state (read and write)

  seq : ("p", x)   -> x
  seq : (x, "p")   -> x

  seq : ("r", "r")   -> "r"
  seq : ("r", "w")   -> "rw"
  seq : ("r", "rw")  -> "rw"

  seq : ("w", "r")   -> "rw"
  seq : ("w", "r")   -> "rw"
  seq : ("w", "w")   -> "w"
  seq : ("w", "rw")  -> "rw"

  seq : ("rw", "r")  -> "rw"
  seq : ("rw", "w")  -> "rw"
  seq : ("rw", "rw") -> "rw"

  // environment (bind variables)

  seq : (Env(xs), Env(ys)) -> Env(<union>(xs, ys))

  // Guarded Left Choice

  Analyze :
    |[ s1 ~{eff1@["s" | _]} < s2 ~{eff2} + s3 ]| -> |[ (s1 ; s2) ~{eff3} ]|
    where <zip(seq)> (eff1, eff2) => eff3

  Analyze :
    |[ s1 ~{eff1@["f" | _]} < s2 ~{eff2} + s3 ~{eff3} ]| -> |[ (s1 < s2' + s3) ~{eff4} ]|
    where <Analyze> |[ id ]| => |[ s2' ~{eff2'} ]|
	; <zip(glchoice)> (<zip(id)> (eff1, eff2'), eff3) => eff4

  Analyze :
    |[ s1 ~{eff1} < s2 ~{eff2} + s3 ~{eff3} ]| -> |[ (s1 < s2 + s3) ~{eff4} ]|
    where <not(?["s"|_] + ?["f"|_])> eff1
	; <debug; zip(debug; glchoice; debug); debug> (<zip(id)> (eff1, eff2), eff3) => eff4


  // success and failure

  glchoice : (("f", _), x)  -> x

  glchoice : (("sf", "f"), "f")  -> "f"
  glchoice : (("sf", "f"), "s")  -> "sf"
  glchoice : (("sf", "f"), "sf") -> "sf"
  glchoice : (("sf", "s"), "f")  -> "sf"
  glchoice : (("sf", "s"), "s")  -> "s"
  glchoice : (("sf", "s"), "sf") -> "sf"
  glchoice : (("sf", "sf"), "f")  -> "sf"
  glchoice : (("sf", "sf"), "s")  -> "sf"
  glchoice : (("sf", "sf"), "sf") -> "sf"

  // match and build

  glchoice : (("m", "m"),  "b")  -> "mb"
  glchoice : (("m", "b"),  "b")  -> "mb"
  glchoice : (("m", "mb"), "b")  -> "mb"

  glchoice : (("b", "m"), "b")  -> "mb"

  glchoice : (("mb", "m"), "b")  -> "mb"

  glchoice : (("b", _), _)  -> "b"

  // read and write

  glchoice : ((st1, st2), st3) -> <seq>(st1, <seq> (st2, st3))
	where <?"p" + ?"r" + ?"w" + ?"rw"> st1

  // binding variables

  glchoice : (Env(xs), Env(ys)) -> Env(<union>(xs, ys))


rules // Traversal

  // All

  Analyze :
    |[ all(s~{eff}) ]| -> |[ all(s)~{eff'} ]|
    where <map(alltrav)> eff => eff'

  alltrav : "s"  -> "s"
  alltrav : "f"  -> "sf"
  alltrav : "sf" -> "sf"

  alltrav : "_"  -> "m"
  alltrav : "m"  -> "m"
  alltrav : "b"  -> "mb"
  alltrav : "mb" -> "mb"

  alltrav : "p"  -> "p"
  alltrav : "r"  -> "r"
  alltrav : "w"  -> "w"
  alltrav : "rw" -> "rw"

  alltrav : Env(xs) -> Env(xs)

