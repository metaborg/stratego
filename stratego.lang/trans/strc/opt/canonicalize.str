module canonicalize
imports signatures/Stratego-Core libstratego-lib C strc/opt/stratego-laws

rules

  CallIdFun :
    Id -> CallT(SVar("_Id"),[],[])

  CallFailFun :
    Fail -> CallT(SVar("_Fail"),[],[])

/*
 
  f(id)  f(g)

  f(x + y) -> let z = x + y in f(z)

*/

  Canon =
    let
      canon-args = 
        unzip(try(CallIdFun + CallFailFun); 
              ( CreateDef1 
	     <+ not(CallT(SVar(id),[],[])); CreateDef2 
	     <+ split(id,![])
	      )) ; (id,concat ; not([]))
    in
      ( ?CallT(f, args1, args2) 
      + ?CallDynamic(f, args1, args2)
      + ?PrimT(f, args1, args2) 
      ) => c#(_) 
    ; <canon-args>args1 => (args1', defs) 
    ; !Let(defs, c#([f, args1', args2]))
    end

  CreateDef1 :
    Let(defs,CallT(SVar(f),[],[])) -> (CallT(SVar(f),[],[]), defs)

  CreateDef2 :
    s -> (CallT(SVar(f),[],[]), [SDefT(f,[],[],s)])
    where f := <snewvar> "canon_arg"

  Canon :
    CallT(f, args1, args2) -> CallT(f, args1', args2)
    where //<map(try(CallIdFun + CallFailFun))> args => args'
      <rec x([(CallIdFun + CallFailFun)|try(x)] <+ [id|x])> args1 => args1'

  Canon :
    PrimT(f, args1, args2) -> PrimT(f, args1', args2)
    where //<map(try(CallIdFun + CallFailFun))> args => args'
      <rec x([(CallIdFun + CallFailFun)|try(x)] <+ [id|x])> args1 => args1'

  Canon :
    All(s) -> CallT(SVar("SRTS_all"),[s],[])

  Canon :
    One(s) -> CallT(SVar("SRTS_one"),[s],[])

  Canon :
    Some(s) -> CallT(SVar("SRTS_some"),[s],[])

  Canon :
    Scope([],s) -> s

  Canon :
    Scope(xs,Scope(ys,s)) -> Scope(<conc>(xs,ys),s)

  Canon : 
    Seq(Id, s) -> s

  Canon : 
    Seq(s, Id) -> s

  Canon :
    Seq(Where(s), Build(t)) -> Seq(s, Build(t))

  Canon :
    Seq(Where(s1), Seq(Build(t), s2)) -> Seq(s1, Seq(Build(t), s2))

  Canon :
    SDefT(f, [], [], Rec(x, s)) ->
    SDefT(f, [], [], <alltd(?CallT(SVar(x),[],[]); !CallT(SVar(f),[],[]))> s)

  Canon :
    Rec(x, s) -> Let([SDefT(x, [], [], s)], CallT(SVar(x),[],[]))

//  Canon :
//    SDef([DontInline],f,xs,s) -> SDef(f,xs,s)

