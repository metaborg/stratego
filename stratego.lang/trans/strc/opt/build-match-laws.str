module build-match-laws
imports signatures/Stratego signatures/Stratego-MetaTransition

rules // combinations of match and build

  BuildMatch =
    BuildMatch(|<AssumeSharedTerms>)

  BuildMatch(|assume-shared-terms) = 
    MisMatch + BuildMatchFusion 
    + MatchIdem
    + BuildMatchIdem
    
    + // Without maximal sharing, there's no guaranteed relation between term equality and identity
      if !assume-shared-terms => 1 then
        MatchBuildIdemVar
      else
        MatchBuildIdemVarUnbound
      end

	// + MatchBuildIdem + BuildBuild
    + BuildAlwaysSucceeds
    + BuildCur


  MisMatch :
    Seq(Build(Anno(Op(f, ts1),pt1)), Match(Anno(Op(g, ts2),pt2))) -> Fail()
    where <not(eq)> (f, g)

  MisMatch :
    Seq(Build(Anno(Op(f, ts1),p1)), Seq(Match(Anno(Op(g, ts2),pt2)), _)) -> Fail()
    where <not(eq)> (f, g)

  BuildMatchFusion :
    Seq(Build(Anno(Op(f, ts1),pt1)), 
        Match(Anno(Op(f, ts2),pt2)))
  ->
    Seq(<zip(\ (t1,t2) -> Seq(Build(t1), Match(t2)) \ ); seqs> (ts1, ts2), 
    Seq(Build(Anno(pt1,Op("Nil",[]))), 
    Seq(Match(Anno(pt2,Wld())),
        Build(Anno(Op(f, ts1), pt1)))))

  BuildMatchFusion :
    Seq(Build(Anno(Op(f, ts1),pt1)), 
    Seq(Match(Anno(Op(f, ts2),pt2)), s)) 
  ->
    Seq(<zip(\ (t1,t2) -> Seq(Build(t1), Match(t2)) \ ); seqs> (ts1, ts2), 
    Seq(Build(Anno(pt1,Op("Nil",[]))), 
    Seq(Match(Anno(pt2,Wld())),
    Seq(Build(Anno(Op(f, ts1),pt1)),
        s))))

  // BuildBuild only valid if !t1 is guaranteed to succeed

  BuildBuild :
    Seq(Build(t1), Build(t2)) -> Build(t2)

  BuildBuild :
    Seq(Build(t1), Seq(Build(t2), s)) -> Seq(Build(t2), s)


  // BuildPrim only valid if !t1 is guaranteed to succeed

  BuildPrim :
    Seq(Build(t1), PrimT(f, ss, ts)) -> PrimT(f, ss, ts)

  BuildPrim :
    Seq(Build(t1), Seq(PrimT(f, ss, ts), s)) -> Seq(PrimT(f, ss, ts), s)


  MatchIdem :
    Seq(Match(t), Match(t)) -> Match(t)

  MatchIdem :
    Seq(Match(t), Seq(Match(t), s)) -> Seq(Match(t), s)
    
  BuildMatchIdem :
    Seq(Build(t), Match(t)) -> Build(t)
    
  BuildMatchIdem :
    Seq(Build(t), Seq(Match(t), s)) -> Seq(Build(t), s)
    
// not valid as long as annotations are not taken into account
//  MatchBuildIdem :
//    Seq(Match(t), Build(t)) -> Match(t)
  
  MatchBuildIdemVar :
    Seq(Match(Var(x)), Seq(Match(t), Seq(Build(Var(x)), s))) ->
    Seq(Match(Var(x)), Seq(Match(t),                    s))
  
  MatchBuildIdemVar :
    Seq(Match(Var(x)), Seq(Match(t), Build(Var(x)))) ->
    Seq(Match(Var(x)),     Match(t))
 
  MatchBuildIdemVar :
    Seq(Match(Var(x)), Build(Var(x))) -> Match(Var(x))

  MatchBuildIdemVar :
    Seq(Match(Var(x)), Seq(Build(Var(x)), s)) -> Seq(Match(Var(x)), s)
  
  MatchBuildIdemVarUnbound :
    Seq(Match(Var(x){"unbound"}), Seq(Match(t), Seq(Build(Var(x)), s))) ->
    Seq(Match(Var(x){"unbound"}), Seq(Match(t),                    s))
  
  MatchBuildIdemVarUnbound :
    Seq(Match(Var(x){"unbound"}), Seq(Match(t), Build(Var(x)))) ->
    Seq(Match(Var(x){"unbound"}),     Match(t))
 
  MatchBuildIdemVarUnbound :
    Seq(Match(Var(x){"unbound"}), Build(Var(x))) -> Match(Var(x){"unbound"})

  MatchBuildIdemVarUnbound :
    Seq(Match(Var(x){"unbound"}), Seq(Build(Var(x)), s)) -> Seq(Match(Var(x){"unbound"}), s)


rules // other rules 

  MatchSimplify = 
    AsMatchWld()

  MatchAs :
    Match(As(p1, p2)) -> Seq(Match(p2), Match(p1))

  AsMatchWld() :
    As(Wld(), t) -> t

  WhereSavesCurrentTerm :
    Where(s) -> Scope([x], Seq(Match(Var(x)), Seq(s, Build(Var(x)))))
    where x := <tnewvar> "where"

  TestSavesCurrentTerm :
    Test(s) -> Scope([x], Seq(Match(Var(x)), Seq(s, Build(Var(x)))))
    where x := <tnewvar> "test"

rules

  BuildAlwaysSucceeds :
    LChoice(Build(t), s) -> Build(t)
    where <topdown(?Var(_) < ?Var(_){"bound"} 
                   + ?Op("Cons", _) < fail 
                   + id)> t

  BuildCur =
    ?Seq(Build(Path(Cur())), <id>)
  BuildCur =
    ?Seq(<id>, Build(Path(Cur())))
