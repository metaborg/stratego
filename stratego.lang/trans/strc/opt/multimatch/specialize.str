module decompose

imports
  strc/opt/multimatch/dfa
  strc/opt/multimatch/matrix

  signatures/core/terms-sig

strategies
  /*
   * Determine default case for matrix.
   */
  default: Matrix(rows) -> Matrix(<filter(default-row)> rows)

  default-row: Row([Wld() | ps], a) -> Row(ps, a)
  default-row = ?Row([Fun(_, _) | _], _); fail // by definition

strategies
  /*
   * Get head constructors from list of (constructor) patterns.
   */
  head-constructors = filter(head-constructor)

  /*
   * Specialize the matrix to a certain constructor.
   */
  specialize(|Matrix(rows)): cons -> Matrix(<filter(specialize-row(|cons))> rows)

  specialize-row(|c) = Row(specialize-pats(|c), id)

  // Annotations
  head-constructor:             Anno(c, ann)        -> Anno()
  specialize-pats(|Anno()):    [Anno(c, ann) | ps*] -> [c, ann | ps*]
  specialize-pats(|Anno()):    [Wld() | ps*]        -> <prepend-wld(|2)> ps*

  // Constructor applications
  head-constructor:             Op(f, ts)         -> Fun(f, <length> ts)
  specialize-pats(|Fun(f, a)): [Op(f, qs*) | ps*] -> [qs*, ps*]
    where <eq> (a, <length> qs*)
  specialize-pats(|Fun(_, a)): [Wld() | ps*]      -> <prepend-wld(|a)> ps*

  // Literals
  head-constructor = ?Str(_) + ?Int(_) + ?Real(_)
  specialize-pats(|Str(s)):    [<?Str(s) + ?Wld()> | ps*] -> ps*
  specialize-pats(|Int(s)):    [<?Int(s) + ?Wld()> | ps*] -> ps*
  specialize-pats(|Real(s)):   [<?Real(s) + ?Wld()> | ps*] -> ps*

  // Variables
  head-constructor = (?Var(_) + ?Wld()); fail // by definition
  specialize-pats(|Wld()) = fail // by definition

  prepend-wld(|n) = repeat(![Wld() | <id>] | n)
