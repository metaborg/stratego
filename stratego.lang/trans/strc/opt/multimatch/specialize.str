module specialize

imports
  strj/multimatch/dfa
  strj/multimatch/matrix

  signatures/core/terms-sig

strategies
  /*
   * Specialize the matrix to a certain constructor.
   */
  specialize(|Matrix(rows)): cons -> Matrix(<filter(specialize-row'(|cons))> rows)

  // TODO Remove this debugging strategy
  specialize-row'(|cons) = id
  ; where(!(cons, <id>); debug(!"[i] spec-row ")) // Print cons and matrix
  ; specialize-row(|cons); debug(!"[o] spec-row ") // Call original strategy

  specialize-row(|Anno()):    Row([Anno(c, ann) | ps*], A) ->
                              Row([c, ann | ps*], A)
  specialize-row(|Anno()):    Row([Wld() | ps*], A) ->
                              Row(<prepend-wld(|2)> ps*, A)

  specialize-row(|Fun(f, a)): Row([Op(f, qs*) | ps*], A) ->
                              Row([qs*, ps*], A) where <eq> (a, <length> qs*)
  specialize-row(|Fun(_, a)): Row([Wld() | ps*], A) ->
                              Row(<prepend-wld(|a)> ps*, A)

  specialize-row(|Str(s)):    Row([Str(s) | ps*], A) ->
                              Row(ps*, A)
  specialize-row(|Str(_)):    Row([Wld() | ps*], A) ->
                              Row(ps*, A)

  specialize-row(|Int(s)):    Row([Int(s) | ps*], A) ->
                              Row(ps*, A)
  specialize-row(|Int(_)):    Row([Wld() | ps*], A) ->
                              Row(ps*, A)

  specialize-row(|Real(s)):   Row([Real(s) | ps*], A) ->
                              Row(ps*, A)
  specialize-row(|Real(_)):   Row([Wld() | ps*], A) ->
                              Row(ps*, A)

//  specialize-row(|c) = id
//  ; where(!c; debug(!"cons: "))
//  ; debug(!"row: ")
//  ; fail

  prepend-wld(|n) = repeat(![Wld() | <id>] | n) 
