module multimatch2matrix

strategies
  /*======== Construct clause and action matrices ========*/
  // TODO implement specificity order
  multimatch2matrix: MultiMatch(Linear(), cases) -> (P', A')
  where
    <cases2matrix> cases => (P, A)
  ; P' := <reverse; debug(!"P (reversed): ")> P
  ; A' := <reverse; debug(!"A (reversed): ")> A

  /*
   *
   */
  cases2matrix = debug(!"cases: "); cases2matrix(|([], [])); debug(!"matrix: ")

  cases2matrix(|(P, A)): [] -> (P, A)

  cases2matrix(|(P, A)): [c | cs] -> (P'', A'')
  where
    <debug(!"[i] c2r: "); case2row; debug(!"[o] c2r: ")> c => (p1, a1)
  ; P' := [p1 | P]
  ; A' := [a1 | A]
  ; <debug(!"[i] c2m: "); cases2matrix(|(P', A')); debug(!"[o] c2m: ")> cs => (P'', A'')

  case2row: MatchCase(Anno(Op(op, params), Wld()), s) -> ([op | params], s)
  where
    <debug(!"(op, params): ")> (op, params)

  case2row = debug(!"case2row fallthrough "); ?t; log(|Critical(), "case2row failed ", t)
