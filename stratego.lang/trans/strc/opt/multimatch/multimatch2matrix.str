module multimatch/multimatch2matrix

imports
  strc/opt/multimatch/guard
  strc/opt/multimatch/matrix
  strc/opt/multimatch/preprocess

  signatures/core/strategies-sig
  signatures/core/terms-sig

strategies
  /*======== Construct clause and action matrices ========*/
  multimatch2matrix: MultiMatch(Sequential(), cases) -> Scope(vars, Matrix([CurP()], rows))
  with
    <map(MatchCase2Row)> cases => rows
  ; <mapconcat(MatchCase2Vars)> cases => vars
  // Vars should have unique names for each case
  ; if <split(make-set, id); tmap(length); not(eq)> vars then
      <fatal-error> ["Vars in MatchCases not unique!"]
    end

  multimatch2matrix = ?MultiMatch(<not(?Sequential())>, _)
  ; <fatal-error> ["MultiMatch should be converted to a sequential set of patterns first."]

  MatchCase2Row:
    ScopedMatchCase(_, t1, s) -> Row([t2], s_g, s)
  with
    <preprocess> t1 => (t2, s_g)

  MatchCase2Row:
    ScopedGuardedMatchCase(_, t1, s1, s2) -> Row([t2], s_g, s2)
  with
    <preprocess> t1 => (t2, s_a)
  ; <sequence-strategies> (s_a, s1) => s_g

  MatchCase2Vars = ?ScopedMatchCase(<id>, _, _)
  MatchCase2Vars = ?ScopedGuardedMatchCase(<id>, _, _, _)
