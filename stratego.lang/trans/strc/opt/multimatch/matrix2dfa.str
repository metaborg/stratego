module matrix2dfa

imports
  strj/multimatch/decompose
  strj/multimatch/dfa
  strj/multimatch/matrix

  signatures/core/strategies-sig
  signatures/core/terms-sig

strategies
  /*======== Construct DFA from matrices =================*/ 
  matrix2dfa = where(o* := [Path([Cur()])]); CC(|o*, 0)

  /*
   * Compilation scheme from Maranget (2008).
   *
   * Changes w.r.t. paper:
   * (none)
   */
  CC(|o*, l) = NoRows(|o*, l)
            <+ WildcardsFirstRow(|o*, l)
            <+ SelectColumn(|o*, l)

  /*
   * 1. If matrix P has no row (i.e. m = 0) then matching always fails,
   * since there is no row to match.
   */
  NoRows(|o*, l): m@Matrix([]) -> Leaf(Fail())
  where
    <debug(!"NoRows ")> (l, o*, m)

  /*
   * 2. If the first row of P exists and is constituted by wildcards,
   * then matching always succeeds and yields the first action.
   *
   * In particular, this case applies when there is at least
   * one row (m > 0) and no column (n = 0).
   */
  WildcardsFirstRow(|o*, l): m@Matrix([Row(ps, a) | _]) -> Leaf(a)
  where
    <map(is-wildcard)> ps
  ; <debug(!"WildcardsFirstRow ")> (l, o*, m)

  /*
   * 3. In any other case, matrix P has at least one row and at least
   * one column (m > 0, n > 0). Furthermore, there exists at least one
   * column of which at least one pattern is not a wildcard. Select
   * one such column i.
   */
  SelectColumn(|o*@[o1 | os], l): m@Matrix(rs) -> T
  with
    <debug(!"SelectColumn ")> (l, o*, m)
  ; i := <find-first-col-index(not-all-wildcards)> m
  ; <debug(!"  with i=")> i
  ; if <gti> (i, 1)
    /*
     * If i > 1 then swap columns 1 and i in both o and P,
     * as above, yielding decision tree A , and define:
     */
    then // i > 1
         <debug(!"swap indices ")> (1, i)
       ; m' := <swap-cols(|1, i)> m
       ; o' :=      <debug(!"[i] swap "); swap(|1, i); debug(!"[o] swap ")> o*
       ; A' := <CC(|o', l)> m'
       ; !Swap(<int-to-string> i, A')
    else // i == 1
         /* Perform a bunch of recursive calls on possible head
            constructors and include them in a big Switch */
         t2*     := <col(|i); head-constructors; make-set; debug(!"hcs ")> m
       ; default := <default; CC(|os, l); debug(!"def ")> m
       ; t4*     := <map(\ (c, a) -> (c, a, <specialize(|m)> c, <specialize-occs(|a); debug(!"occs ")> o*) \)> t2*
       ; !Switch(<append-occ> (o1, Con()), <map(\ (c, a, m, o'*) -> Alt(c, <CC(|o'*, l)> m) \)> t4*, default)
    end => T
