module matrix2dfa

imports
  strj/multimatch/decompose
  strj/multimatch/matrix

  signatures/core/strategies-sig
  signatures/core/terms-sig

strategies
  /*======== Construct DFA from matrices =================*/ 
  matrix2dfa = where(o* := [Path([Cur()])]); CC

  /*
   * Compilation scheme from Maranget (2008).
   *
   * Changes w.r.t. paper:
   * (none)
   */
  CC = NoRows
    <+ WildcardsFirstRow
    <+ SelectColumn

  /*
   * 1. If matrix P has no row (i.e. m = 0) then matching always fails,
   * since there is no row to match.
   */
  NoRows: m@Matrix(_, []) -> Fail()
  where
    <debug(!"NoRows ")> m

  /*
   * 2. If the first row of P exists and is constituted by wildcards,
   * then matching always succeeds and yields the first action.
   *
   * In particular, this case applies when there is at least
   * one row (m > 0) and no column (n = 0).
   */
  WildcardsFirstRow: m@Matrix(_, [Row(ps, a) | _]) -> a
  where
    <map(is-wld)> ps
  ; <debug(!"WildcardsFirstRow ")> m

  /*
   * 3. In any other case, matrix P has at least one row and at least
   * one column (m > 0, n > 0). Furthermore, there exists at least one
   * column of which at least one pattern is not a wildcard. Select
   * one such column i.
   */
  SelectColumn = ?m@Matrix(o*@[o1 | _], [_ | _])
  ; <debug(!"SelectColumn ")> m
  ; i := <find-first-col-index(not-all-wildcards)> m
  ; <debug(!"  with i=")> i
  ; if <gti> (i, 1) then
    /*
     * If i > 1 then swap columns 1 and i in both o and P,
     * and run the algorithm on the resulting matrix.
     */
      <swap-cols(|1, i); CC> m
    else
      <col(|i); head-constructors; make-set> m => hc*
    ; <tswitch> (m, hc*)
    end

  tswitch =
    ?(m, [(hc@Anno(), _)])
  ; <specialize(|m); CC> hc

  tswitch:
    (m@Matrix(o*@[o1 | _], [_ | _]), hc*) -> SwitchT(o1', talt*, default)
  where
    <retain-all(?(Anno(), _)); ?[]> hc*
  with
    hts      := <map(Snd); make-set> hc*
  ; valt*    := <map(\ (c, t) -> (c, t, <specialize(|m)> c) \)> hc*
  ; tbranch* := <map(\ t -> (t, <retain-all(where(Snd; ?t))> valt*) \)> hts
  ; default  := <default; CC> m
  ; talt*    := <map(talt(|o*, default))> tbranch*
  ; o1'      := <append-occ> (o1, Typ())

  talt(|o*, d): (t, valt*) -> AltT(t, <vswitch(|t, o*, d)> valt*)

  valt: (c, _, m) -> AltV(c, <CC> m)

  vswitch(|ApplT(), [o1 | _], d) =
    !SwitchV(<append-occ> (o1, Con()), <map(valt)>, d)

  vswitch(|LisT(), [o1 | _], d) =
    !SwitchV(o1, <map(valt)>, d)

  vswitch(|IntT(), [o1 | _], d) =
    !SwitchV(<append-occ> (o1, Int()), <map(valt)>, d)

  vswitch(|RealT(), [o1 | _], d) =
    !SwitchV(<append-occ> (o1, Real()), <map(valt)>, d)

  vswitch(|StringT(), [o1 | _], d) =
    !SwitchV(<append-occ> (o1, Str()), <map(valt)>, d)

  // Consider if this pattern can occur outside of an APPL.
  vswitch(|CtorT(), [o1 | _], d) = <error> ["CtorT not implemented"]; fail

  vswitch(|TupleT(), [o1 | _], d) =
    !SwitchV(<append-occ> (o1, Siz()), <map(valt)>, d)

  // TODO Find out if this is not yet deprecated.
  vswitch(|RefT(), [o1 | _], d) = <error> ["RefT not implemented"]; fail

  // TODO Find out if this is not yet deprecated.
  vswitch(|BlobT(), [o1 | _], d) = <error> ["BlobT not implemented"]; fail

  // TODO Find out if this is not yet deprecated.
  vswitch(|PlaceT(), [o1 | _], d) = <error> ["PlaceT not implemented"]; fail
