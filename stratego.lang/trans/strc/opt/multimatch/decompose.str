module multimatch/decompose

imports
  strc/stratego/strc/c/escaping-variables // is-ListOp
  strj/s2j                                // is-TupleOp

  strj/multimatch/matrix
  strj/multimatch/utils

  signatures/core/strategies-sig
  signatures/core/terms-sig

strategies
  /*
   * Determine default case for matrix.
   *
   * Maranget (2008), fig. 1.
   */
  default = Matrix(?[_ | <id>], remove-all(non-default-row); map(restore(default-row, fatal-err(|"ERROR - no default: "))))
  default-row: Row([<is-wld> | ps], s_a, s_g, s_rhs) -> Row(ps, s_a, s_g, s_rhs)

  non-default-row = ?Row([<non-default-head> | _], _, _, _) // by definition
  non-default-head =
    ?Op(_, _)
  + ?Explode(_, _)
  + ?Var(_) // Could be a default row, but needs an assignment first.
  + is-literal

strategies
  /*
   * Get head constructors from list of (constructor) patterns.
   *
   * Maranget (2008), sec 4, step 3a.
   */
  constructors-om =
    ?Col(<id>, _, _, _)
  ; remove-all(where(is-wld + ?As(_, <is-wld>)))
  ; foldr(![], union, ![<constructor-om>])

  tswitch-arms =
    ?Col(t*, s_a*, _, s_rhs*)
  ; c* := <zipn
         ; remove-all(where(Fst; (is-wld + ?As(_, <is-wld>))))
         ; map(\ (t, s_a, s_rhs) -> (<cons-type <+ !()> t, <constructor-om> t, s_a, s_rhs) \)> (t*, s_a*, s_rhs*) // (t, c, s_a, s)
  ; collect-types
  ; collect-cons(|c*)

  // [(t, c, s_a, s)*] -> [t*]
  collect-types = foldr(![], union, ![<Fst>])
  // [(t, c, s_a, s)*], [t*] -> [(t, [(c, [s*])*])*]
  collect-cons(|c*) = map(\ t -> (t, <retain-all(where(Fst; ?t); Snd); make-set; collect-guards(|c*)> c*) \)
  // [(t, c, s_a, s)*], [c*] -> [(c*, [s_a*])*]
  collect-guards(|c*) = map(\ c -> (c, <retain-all(where(Snd; ?c); Third); make-set-lr> c*) \)

  /*
   * Specialize the matrix to a certain constructor.
   *
   * Maranget (2008), fig. 1.
   */
  specialize(|c) =
    specialize-set(id|c)

  specialize-set(smod|c) =
    Matrix(specialize-occs(|c), filter(specialize-row(|c); smod))

  specialize-row(|c) =
    Row(specialize-pats(|c), id, id, id)

  specialize-occs(|c): occs@[o | os*] -> [o*, os*]
    with o* := <specialize-occ(|c)> o

  specialize-occ-by-arity(|a) =
    where(i* := <range> (1, <inc> a))
  ; ?p
  ; <map(\ i -> Sub(p, <int-to-string> i) \)> i*

  // Annotations
  constructor-om:               Anno(c, ann)        -> Anno()
  specialize-pats(|Anno()):    [Anno(c, ann) | ps*] -> [c, ann | ps*]
  specialize-pats(|Anno()):    [<is-wld> | ps*]     -> <prepend(|Wld(), 2)> ps*
  specialize-occ(|Anno()): p -> [p, Anno(p)]

  // Tuples + lists + constructor applications
  arity = ?Op(_, <length>)
//  arity = ?Explode("", <length>) // Tuple
//  arity = where(?Explode(<is-string>, _)); ?Explode(_, <length>) // Op
//  arity = where(?Explode(<is-list>, _)); !2 // List

  p-arity = ?Fun(_, <string-to-int>)
  p-arity = ?Tuple(<string-to-int>)

  // Tuples
  constructor-om:               c@Op("", ts)          -> Tuple(<arity; int-to-string> c)
  cons-type:                    Op("", _)             -> TupleT()
  specialize-pats(|Tuple(x)):  [c@Op("", qs*) | ps*]  -> [qs*, ps*]
    where
      a := <string-to-int> x
    ; <eq> (a, <arity> c)
  specialize-pats(|Tuple(x)):  [<is-wld> | ps*]       -> <prepend(|Wld(), a)> ps*
    where a := <string-to-int> x
  specialize-occ(|Tuple(x)) = specialize-occ-by-arity(|<string-to-int> x)

  // Lists
  constructor-om:               c@Op(f, ts)         -> Fun(f, <arity; int-to-string> c)
    where <is-ListOp> c
  cons-type:                    Op("Nil", [])       -> LisT()
  cons-type:                    Op("Cons", [_, _])  -> LisT()
  specialize-occ(|Fun("Nil", "0")) = ![]
  specialize-occ(|Fun("Cons", "2")): p -> [ Head(p), Tail(p) ]

  // Constructor applications
  constructor-om:               c@Op(f, ts)         -> Fun(f, <arity; int-to-string> c)
    where <not(is-ListOp + is-TupleOp)> c
  cons-type:                    c@Op(_, _)          -> ApplT()
    where <not(is-ListOp + is-TupleOp)> c
  specialize-pats(|Fun(f, x)): [c@Op(f, qs*) | ps*] -> [qs*, ps*]
    where
      <not(is-TupleOp)> c
    ; a := <string-to-int> x
    ; <eq> (a, <arity> c)
  specialize-pats(|Fun(_, x)): [<is-wld> | ps*]        -> <prepend(|Wld(), a)> ps*
    with a := <string-to-int> x
  specialize-occ(|Fun(_, x)) = specialize-occ-by-arity(|<string-to-int> x)

  // Literals
  is-literal = ?Str(_) + ?Int(_) + ?Real(_)
  constructor-om = is-literal
  cons-type:                    Str(_)              -> StringT()
  cons-type:                    Int(_)              -> IntT()
  cons-type:                    Real(_)              -> RealT()
  specialize-pats(|l):         [<?l + is-wld> | ps*] -> ps*
    where <is-literal> l
  specialize-occ(|<is-literal>) = ![]

  // As-patterns
  constructor-om = ?As(_, <constructor-om>)
  cons-type = ?As(_, <cons-type>)

  // Variables
  is-var = ?Var(_)
  is-wld = ?Wld()
  is-wld-core = ?Anno(<is-wld>, <is-wld>)

  constructor-om = is-wld; fail // by definition
  specialize-pats(|<is-wld>) = fail // by definition

  // Helpers
  prepend(|t, n) = repeat(![t | <id>] | n)
