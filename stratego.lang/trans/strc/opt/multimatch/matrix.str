module matrix

imports
  signatures/core/terms-sig

  strj/multimatch/decompose

signature
  sorts Matrix Row
  constructors
    Matrix  : List(Path) * List(Row) -> Matrix
    Row     : List(Term) * Strategy  -> Row

strategies
  row-not-all-wildcards = ?Row(<not-all-wildcards>, _)

  /*
   * Succeeds on a list if at least one element is not a wildcard.
   */
  not-all-wildcards = retain-all(not(is-wld + is-var)); ?[_ | _]

  /*
   * Get the `i`th column from a Matrix.
   */
  col(|i): Matrix(_, rows) ->
    <map(?Row(<id>, _); index(|i))> rows

  width = ?Matrix(_, <map(?Row(<length>, _)); foldr1(max)>)
  height = ?Matrix(_, <id>); length

  /*
   * Find index of first element in list for which `s` succeeds.
   * Index starts at 1.
   */
  find-first-row-index(s) = id
  ; ?Matrix(_, <id>)
  ; find-first-index(s)

  find-first-col-index(s) = id
  ; ?Matrix(_, <id>)
  ; map(?Row(<id>, _))
  ; matrix-transpose
  ; find-first-index(s)

  find-first-index(s) = id
  ; is-list
  ; split-fetch(s)
  ; Fst
  ; length
  ; inc

  swap-cols(|m, n) = Matrix(swap(|m, n), map(swap-row-el(|m, n)))

  swap-row-el(|m, n) = Row(swap(|m, n), id)

  /*
   * Swap elements `m` and `n` in a list.
   * Index starts at 1.
   */
  swap(|m, n): xs -> xs''
  with
    <is-list> xs
  ; elM := <index(|m)> xs
  ; elN := <index(|n)> xs
  ; xs' := <set-index> (<dec> m, elN, xs)
  ; xs'' := <set-index> (<dec> n, elM, xs')
