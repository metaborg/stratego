module dead-def-elim
imports signatures/Stratego strc/lib/stratlib
strategies

  only-local-option = 
    Option("--only-local"
	  ,where(<set-config>("--only-local", ()))
	  ,!"--only-local        do not eliminate top-level definitions")

  if-only-local(s1, s2) =
    if <get-config> "--only-local" then s1 else s2 end

strategies
   
  dead-def-elim-spec = 
    Specification(
      [id,
       Strategies(
         if-only-local(id, dead-def-elim)
         ; map(local-dead-def-elim)
       )
      ]
    )

  dead-def-elim =
    where(map(RegisterDefinition))
    ; where(
        <mark-needed-defs> "main_0_0"
      ; try(<mark-needed-defs> "DYNAMIC_CALLS_0_0")
      ; bagof-AlwaysNeeded
      ; list-loop(\(x, s, t) -> <mark-needed-defs> x\)
      )
    ; filter(
        AnnoDef(one(Override + Extend), id)
      <+
        ignore-anno-def(
           SDefT(DefNeeded,id,id,id) 
        <+ ExtSDefInl(DefNeeded,id,id,id)
        <+ ExtSDef(DefNeeded,id,id)
        )
      )

  RegisterDefinition =
    ?sdef
    ; where( ignore-anno-def(?SDefT(f,_,_,_) <+ ?ExtSDefInl(f,_,_,_) <+ ?ExtSDef(f,_,_)) )
    ; rules( NameToDefinition : f -> sdef )
  
  mark-needed-defs = 
    DefNeeded 
    <+ ?f; rules( DefNeeded : f -> f )
        ; NameToDefinition
        ; rec x(alltd(CallT(SVar(mark-needed-defs),x,x) <+ ProxyT(id, id, id, id, SVar(mark-needed-defs))))

strategies 
  
  local-dead-def-elim =
    Let(id,id)
    ; {| DefDead
       : DeclareLetDead
       ; Let(local-dead-def-elim, local-dead-def-elim)
       ; DeleteDeadDefinitions
       |}
    <+ try(DeclareNotDead)
       ; all(local-dead-def-elim)

  DeclareLetDead =
    Let(list-loop(DeclareDefDead), id)

  DeclareDefDead =
    ?SDefT(f, _, _, _)
    ; rules( DefDead+f : SDefT(f, x, y, z) -> "1" )

  DeleteDeadDefinitions =
     Let(filter(not(DefDead => "1")), id)

  DeclareNotDead =
    ?CallT(SVar(f), _, _)
    ; rules( DefDead.f : SDefT(f, x, y, z) -> "0" )

  DeclareNotDead =
    ?ProxyT(_, _, _, _, SVar(f))
    ; rules( DefDead.f : SDefT(f, x, y, z) -> "0" )
  
