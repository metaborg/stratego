module bind-laws
imports signatures/Stratego strc/match/automaton
strategies
rules

  LetNoDefs :
    Let([], s) -> s

  LetHoist :
    Let([SDefT(f, [], [], s)], CallT(SVar(f), [], [])) -> s
    where <not(oncetd(?CallT(SVar(f),[],[]) <+ ?ProxyT(_, _, _, _, SVar(f))))> s

  LetHoist :
    Let(defs1, Let(defs2, s)) -> Let(<conc>(defs1, defs2), s)

rules

  // inlining with contextual rules

/*

  InlineC1 : 
    Let([SDef(f, [], s1)], s2[Call(SVar(f), [])]) ->
    Let([SDef(f, [], s1)], s2[<strename> s1])

  InlineC2 : 
    Let([SDef(f, xs@[_|_], s1)], s2[Call(SVar(f), ss)]) ->
    Let([SDef(f, xs, s1)], 
	s2[<ssubs; strename> (xs, ss, s1)])

  InlineC3 : 
    Let([SDef(f, xs@[_|_], s1)], s2[Call(SVar(f), ss)]) ->
    Let([SDef(f, xs, s1)], 
	s2[<zip(\ (x, s) -> SDef(x, [], s)\ ); 
            foldr(!s1, \ (def, s) -> Let(def, s)\ ); 
	    strename> (xs, ss)])

*/

  // inlining with hand-made contextual traversal

  Inline1 :
    Let([SDef(f, [], s)], Call(SVar(f), [])) -> s

//  InlineOld :
//    Let([SDef(f, [], s1)], s2) -> s2'
//    where <oncetd-stop(?Call(SVar(f),[]); !s1, 
//                  Case(id,id,id,id) + Matrix(id,id))> s2 => s2';
//          <not(is-subterm)> (Call(SVar(f),[]), s2')

  Inline :
    Let(defs1, s1) -> Let(defs2, s2)
    where <at-suffix(\ [SDef(f, [], s)|defs] -> defs
                       where <oncetd(?Call(SVar(f),[]); !s)> s1 => s2
			   ; <not(is-subterm)> (Call(SVar(f),[]), s2) \ )
          > defs1 => defs2        

//  InlineDont :
//    Let([SDef(f, [], s1)], s2) -> 
//    Let([SDef([DontInline], f, [], s1)], s2)

  // dead code elimination

  Dead : 
    Let([SDef(f, xs, s1)], s2) -> s2
    where <not(is-subterm)> (SVar(f), s2)

  // hoisting let bindings

  HoistLet :
    Seq(s1, Let(sdefs, s2)) ->
    Let(sdefs, Seq(s1, s2))

  HoistLetFromCase :
    Case(lab, t, alts, def) ->
    Let(sdefs, Case(lab, t, alts', def))
    where <map(AltGiveSDefs); concat> alts => sdefs => [_|_];
          <map(AltDropLet)> alts => alts'

  AltDropLet :
    Alt(c, args, ann, Let(sdefs, s)) -> Alt(c, args, ann, s)
  
  AltGiveSDefs :
    Alt(c, args, ann, Let(sdefs, s)) -> sdefs

//
//rules
//
//  CopyPropagation :
//    Seq(Build(t), Scope(xs, Seq(Assign(Var(x)), s))) ->
//    Seq(Build(t), Scope(ys, <tsubs> ([x], [t], s)))
//    where (<Var(id)> t ) // + <leq> (<nrofoccs(?Var(x))> s, 1))
//        ; <is-subterm> (x, xs); <diff> (xs, [x]) => ys          
//
//  CopyPropagation :
//    Seq(Build(t), Scope(xs, Seq(Assign(Var(x)), s))) ->
//    Seq(Build(t), Scope(ys, <tsubs> ([x], [t], s)))
//    where <Var(id)> t; <is-subterm> (x, xs); <diff> (xs, [x]) => ys          
//
//  CopyPropagation :
//    Scope(xs, Seq(Assign(Var(x), Var(y)), s)) ->
//    Scope(ys, <tsubs> ([x], [Var(y)], s))
//    where <is-subterm> (x, xs); <diff> (xs, [x]) => ys
//
//  CopyPropagation :
//    Scope(xs, Seq(Assign(Var(x)), Seq(Assign(Var(y)), s))) ->
//    Scope(ys, Seq(Assign(Var(x)), <tsubs> ([y], [Var(x)], s)))
//    where <is-subterm> (x, xs); <is-subterm> (y, xs); <diff> (xs, [y]) => ys
//
//  CopyPropagation :
//    Scope(xs, Seq(Assign(Var(x)), Seq(Assign(Var(y), Var(x)), s))) ->
//    Scope(ys, Seq(Assign(Var(x)), <tsubs> ([y], [Var(x)], s)))
//    where <is-subterm> (x, xs); <is-subterm> (y, xs); <diff> (xs, [y]) => ys
//
//  CopyPropagation :
//    Seq(Assign(Var(x)), Seq(Build(Var(x)), s)) ->
//    Seq(Assign(Var(x)), s)
//
//  CopyPropagationNotValid :
//    Seq(Assign(x), Seq(Assign(y,x), s)) ->
//    Seq(Assign(x), Seq(Assign(y), s))
//
