/**
 * @TODO: Use new abstract syntax for annotations.
 */

module congruence-laws
imports signatures/Stratego-Sugar signatures/Stratego-Sugar-MetaTransition 
	strc/front/desugar

rules

  MatchingCongruence :
    Cong(f, ss) -> Match(Anno(Op(f, ts), Wld()))
    where <map(\ Match(t) -> t \ + \ Id() -> Wld() \ )> ss => ts

  MatchingCongruence :
    Cong(f, []) -> Match(Anno(Op(f, []), Wld()))

  TransformingCongruence :
    Cong(f, ss) -> 
    Scope([a | <conc>(xs, ys)], 
          Seq(Match(Anno(Op(f, xs'), Var(a))),
          Seq(<seqs> ss',
              Build(Anno(Op(f, ys'), Var(a))))))
    where <map(<tnewvar> "trans_cong")> ss => xs
        ; <map(!Var(<id>))> xs => xs'
        ; a := <tnewvar> "trans_cong"
        ; <map(<tnewvar> "trans_cong")> ss => ys
        ; <map(!Var(<id>))> ys => ys';
          <zip(\ ((x,y), s) -> 
	         Seq(Build(Var(x)), 
		 Seq(s, Match(Var(y)))) \ )> (<zip(id)>(xs,ys), ss) => ss'

  TransformingAnnoCongruence :
    Call(SVar("Anno_Cong__"), [Cong(f, ss), s]) -> 
    Scope([a, b | <conc>(xs,ys)], 
          Seq(Match(Anno(Op(f, xs'), Var(a))),
          Seq(<seqs> ss',
              Build(Anno(Op(f, ys'), Var(b))))))
    where <map(<tnewvar> "trans_cong")> [s | ss] => [a | xs]; map(!Var(<id>)) => xs';
	  <map(<tnewvar> "trans_cong")> [s | ss] => [b | ys]; map(!Var(<id>)) => ys';
          <zip(\ ((x,y), s) -> Seq(Build(Var(x)), Seq(s, Match(Var(y)))) \ )> 
            (<zip(id)>(xs,ys), [s | ss]) => ss'

/*
  Canon :
    Cong(c, ss) -> 
    Scope(<conc>(xs,ys), 
          Seq(Match(Op(c, <map(\ x -> Var(x)\ )> xs)), 
              Seq(Where(<foldr(!Id,\ (s1,s2) -> Seq(s1,s2) \ )> ss'),
                  Build(Op(c, <map(\ x -> Var(x)\ )> ys)))))
    where <unzip(ApplyStrat)> ss => (xys, ss')
        ; <unzip(id)> xys => (xs, ys)

  ApplyStrat : 
    s -> ((x,y),Seq(Build(Var(x)), Seq(s, Match(Var(y)))))
    where x := <tnewvar> "apply_b"
        ; y := <tnewvar> "apply_m"
*/
