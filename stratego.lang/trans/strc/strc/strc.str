/**
 * This module glues together the components that make up the Stratego
 * compiler. It is based on XTC, the transformation tool composition
 * model.
 */

module strc

imports
  libstratego-lib
  libstratego-xtc
  libstratego-gpp

  strc/strc/strc-options
  strc/strc/format-check
  strc/strc/compile-c

strategies

	// UNDONE. VladVergu. Not needed for bootstrapping to Java
  // strc-strc =
  //   strc-command-line-options
  //   ; log-timed(strc-compile | "Compilation succeeded", 1)
  //   ; <exit> 0
  //  <+ log(|Error(),["Compilation failed (", <run-time ; real-to-string(|2)>, " secs)"])
  //   ; <exit> 1

strategies
	// UNDONE. VladVergu. Not needed for bootstrapping to Java
  // strc-compile =
  //   xtc-input(
  //     strc-front-end
  //     ; strc-optimize
  //     ; strc-export-external-defs
  //     ; strc-output-frontend
  //     ; strc-back-end
  //     ; strc-c-compile
  //   )

  strc-front-end =
    log-timed(
      strc-get-infile
      ; strc-pack-stratego-trm
      ; tfc1(|"Stratego-Sugar-Cong", "pack")
      ; strc-output-ast
      ; frontend
    | "Front-end succeeded"
    , 1
    )

  strc-optimize =
    log-timed(
      dbg(|"starting optimizer")
      ; optimizer
    | <concat-strings>["Optimization succeeded -O ",<get-config; int-to-string>"-O"]
    , 1
    )

  strc-export-external-defs =
    strc-if-lib(where(
      if <eq> (<get-config> "baseout", <get-config> "basein") then
        <get-config> "baseout"
        ; warn(|<concat-strings>["Could not export library signature: name for library same as name for base file"])
      else
        log-timed(
          defs-to-external-defs
          ; if not(<get-config> "--no-concrete-syntax-externals" + <get-config> "-F") then
              where(
                pp-stratego-string
              ; print-to
              ; copy-to(strc-getoutfile(!".str") => file2)
              ; log(|Info(), ["Concrete syntax in '", file2, "'"])
              )
            end
          ; write-to
          ; copy-to(strc-getoutfile(!".rtree") => file1)
          ; log(|Info(), ["Abstract syntax in '", file1, "'"])
        | "Export of externals succeeded"
        , 1
        )
      end
    ))

strategies
	// UNDONE. Not needed for Java bootstrapping.
  // strc-back-end =
  //   log-timed(
  //     lift-definitions
  //     ; tfc2(|"Stratego-Core", "be-lift")
  //     ; canonicalize
  //     ; tfc2(|"Stratego-Core", "be-can")
  //     ; simplify1
  //     ; tfc3(|"Stratego-Core", "be-sim")
  //     ; mark-bound-unbound-vars
  //     ; tfc2(|"Stratego-Core", "be-buv")
  //     ; escaping-variables
  //     ; tfc2(|"Stratego-Core", "be-esc")
  //     ; expand-term-imports-trm(|<get-config> "-I")
  //     ; stratego-to-c
  //     ; tfc-c(|1,"be-c")
  //     ; log-timed(
  //         if not(<get-config> "--old-pp") then
  //           strc-ac2text
  //         else
  //           strc-ac2abox; strc-abox2text
  //         end
  //       |"Pretty print", 2)
  //     ; rename-to(strc-getoutfile(!".c"))
  //   | "Back-end succeeded"
  //   , 1
  //   )

strategies

  // building a library

  strc-if-lib(s1, s2) = where(<get-config>"--library") < s1 + s2
  strc-if-lib(s)      = strc-if-lib(s, id)
  strc-if-not-lib(s)  = strc-if-lib(id, s)
  strc-pass-library   = strc-if-lib(!["--library"], ![])

strategies

  log-timed(s|msg,level) =
    if <geq>(<get-config> "--statistics", level) then
      where(times => starttime)
    ; s
    ; where(
        <diff-times>(<times>,starttime)
      ; <concat-strings>[ <align-left>(' ', msg, 27)
                        , " : [user/system] = ["
                        , <self-children-user-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s/"
                        , <self-children-sys-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s]"
                        ]
      ; log(|Info(),<id>)
      )
    else
      s
    end

  // save intermediate results

  save-as(ext) =
    where(
      copy-to(strc-getoutfile(<conc-strings> (".sci", <ext>)) => file1)
      ; log(|Info(), ["abstract syntax in '", file1, "'"] )
      ; xtc-transform(!"stratego-parenthesize", pass-verbose)
      ; xtc-transform(!"stratego2abox", pass-verbose)
      ; xtc-transform(!"abox2text", pass-verbose)
      ; copy-to(<conc-strings> (file1, ".txt") => file2)
      ; log(|Info(), ["concrete syntax in '", file2, "'"])
    )

  save-as1(ext) = if-keep1(save-as(ext))
  save-as2(ext) = if-keep2(save-as(ext))
  save-as3(ext) = if-keep3(save-as(ext))
  save-as4(ext) = if-keep4(save-as(ext))
  save-as5(ext) = if-keep5(save-as(ext))
  save-as6(ext) = if-keep6(save-as(ext))
  save-as7(ext) = if-keep7(save-as(ext))
//  save-as8(ext) = if-keep8(save-as(ext))

  strc-output-ast =
    if <get-config> "--ast" then
       write-to
       ; copy-to(strc-getoutfile(!".ast") => file)
       ; notice(|<concat-strings>["Abstract syntax saved in file `", file, "'"])
       ; xtc-io-exit
    end

  strc-output-frontend =
    if <get-config> "-F" then
      write-to
      ; xtc-io-exit
    end

strategies

  strc-get-infile :
    FILE(file) -> FILE(file)
    where <remove-extension> file => basein
        ; log(|Debug(),["Basename of input file: ",basein])
        ; <set-config> ("basein",  basein)
        ; (<get-config; remove-extension> "-o"
           <+ !basein; strc-if-lib(<conc-strings> ("lib", <id>))) => baseout
	; log(|Debug(),["Basename of output file: ",baseout])
        ; <set-config> ("baseout", baseout)

  strc-getoutfile(suffix) =
    <conc-strings>(<get-config> "baseout", <suffix>)

  /**
   * @todo Support for $(EXE)?
   */
  strc-get-final-suffix =
    strc-if-lib(!".la", !"")

  strc-dep-name =
    !["--dep", <<get-config> "-o" <+ <get-config> "baseout">]

strategies // COMPILER COMPONENTS

  comp-out(|f) =
    log-timed(
      xtc-transform(!f, pass-verbose)
      | <comp-msg>f, 2)

  comp(|f) =
    log-timed(
       xtc-transform(!f, !["-b" | <pass-verbose> ])
       | <comp-msg>f, 2)

  comp(|f,args) =
    log-timed(
      xtc-transform(!f, <concat>[["-b"], <pass-verbose>, args])
      | <comp-msg>f, 2)

  comp-msg = <concat-strings>["  ",<id>]

// FRONTEND

  strc-pack-stratego-trm =
    pack-stratego-trm(|<concat> [
      <strc-dep-name>, <strc-get-include-dirs>, <pass-keep>,
      <get-config < !["--asfix"] + ![]> "--asfix",
      <get-config < !["--format-check", <int-to-string>] + ![]> "--format-check",
      <get-config < !["--prefer-str"] + ![]> "--prefer-str"
    ])

// BACK-END

//  strc-ac2text =
//    if where(<get-config>"--indent-c") then
//      pp-c-pretty
//    else
//      pp-c
//    end

  external pp-c(|)
  external pp-c-pretty(|)

  strc-ac2abox =
    where(
      if <get-config>"--indent-c" then
        !"C-pretty.pp.af"
      else
        !"C.pp.af"
      end => pp-table
      ; pptbl := <xtc-find; ReadFromFile> pp-table
    )
  ; ast2box(|[pptbl])

  strc-abox2text =
    where(id
      ; file := <xtc-new-file>
      ; fout := <fopen>(file,"w")
    )
    ; box2text-stream(|80, fout)
    ; <fputs> ("\n", fout)

    ; where(<fclose> fout)
    ; !FILE(file)

  //; comp(|"ast2abox", ["-p", <xtc-find> pp-table ])
    // comp-out(|"abox2text")
