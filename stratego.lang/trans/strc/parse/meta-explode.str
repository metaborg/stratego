module meta-explode
imports libstratego-lib signatures/Stratego-Amb signatures/Stratego-MetaTransition gradual-types/utils
signature
  constructors
    AsFix        : Option
    appl         : Term * List(Term)        -> Term
    prod         : List(Term) * Term * Term -> Term
    cf           : Term                     -> Term
    opt          : Term                     -> Term
    layout       : Term

    ConsAux      : a * List(a) -> List(a)

rules

  // There is no Wld/0 in asfix so this not buggy.

  Clean :
    Op("Wld",[]) -> Wld()

  Clean : 
    Op(i,[]) -> NoAnnoList(Int(<int-to-string> i))
    where <is-int> i

strategies

  // It replaces layouts by the right variable.

  ImplodeLayout(build) = 
    rec x(alltd(
      BA(ImplodeLayout(fail), ImplodeLayout(id))
      <+ Build(ImplodeLayout(id))
      <+ ToBuild(ImplodeLayout(id))
      <+ AM(x, ImplodeLayout(id))
      <+ RuleNoCond(x, ImplodeLayout(id))
      <+ Rule(x, ImplodeLayout(id), x)
      <+ (appl(prod(id, cf(opt(layout())), id), id)
         ; {layout_var:
             appl(prod([cf(layout())], cf(opt(layout())), id),
                  oncetd(?meta-var(layout_var)))
           < !meta-var(layout_var) + try(not(build); !Wld())})
    ))
                                                                               
  asfix-option =
    Option( "--asfix",
       <set-config> ("--asfix", ()); !AsFix(),
       !"--asfix          treat concrete syntax parts as AsFix trees")

  io-meta-explode =
    io-wrap(
      asfix-option
    , if <get-config>"--asfix" then
        ImplodeLayout(fail) ; MetaExplode ; topdown(try(Clean))
      else
        MetaExplode
      end
    )
    
  meta-explode(asfix) = 
    if asfix then
      ImplodeLayout(fail) ; MetaExplode ; topdown(try(Clean))
    else
      MetaExplode
    end

  MetaExplode =
    otf(
      alltd(
          Anno(\o@ToTerm(t) -> <otf(<pretrm-explode> t)> o\, MetaExplode)
        + AnnoList(\o@ToTerm(t) -> <otf(<pretrm-explode> t)> o\, MetaExplode)
        + NoAnnoList(\o@ToTerm(t) -> <otf(<pretrm-explode> t)> o\)
        + \o@ToTerm(t) -> <otf(<trm-explode> t)> o\
        + \o@ToMetaExpr(e) -> <otf(<trm-explode> e)> o\
        + \o@ToMetaListExpr(e) -> <otf(<trm-explode> e)> o\
        + \o@ToBuild(t) -> <otf(!Build(<trm-explode> t))> o\
        + \o@ToStrategy(s) -> <otf(<str-explode> s)> o\
      )
    )

  trm-explode =
    otf(
       ToTermToTerm
    <+ TrmMetaVar 
    <+ LstMetaVar 
    <+ TrmFromTerm 
    <+ TrmFromApp
    <+ TrmFromStr 
    <+ TrmAnno
    <+ otf(ConcAssocR); trm-explode
    <+ otf(ConcCons); trm-explode
    <+ otf(ConcNil); trm-explode
    <+ !NoAnnoList(<otf(
          TrmInt 
          <+ TrmStr 
          <+ TrmConc 
          <+ TrmNil 
          <+ TrmCons 
          <+ TrmOp
        )>)
    )

  pretrm-explode = 
    otf(
       ToTermToTerm
    <+ TrmMetaVar 
    <+ LstMetaVar 
    <+ TrmInt 
    <+ TrmStr 
    <+ TrmFromTerm 
    <+ TrmFromApp
    <+ TrmFromStr 
    <+ TrmAnno; fatal-err(|"anno in anno")
    <+ otf(ConcAssocR); pretrm-explode
    <+ otf(ConcCons); pretrm-explode
    <+ otf(ConcNil); pretrm-explode
    <+ TrmConc
    <+ TrmNil 
    <+ TrmCons 
    <+ TrmOp
    )

// match ToTerm nested in ToTerm; take structure literally

  // todo: what do various combinations mean
  // ToTerm(ToTerm(A(FromTerm(x))))
  // ToTerm(ToTerm(A(FromTerm(FromTerm(x)))))

  // todo: does not cover all variants of quotation constructors 
 
  ToTermToTerm = 
    ?ToTerm(t); quoted-trm-explode

  quoted-trm-explode =
    otf(QuotedOp) 

  QuotedOp :
    t@op#(ts) -> Op(<otf(!op)> t, <map(quoted-trm-explode)> ts)

// regular explode

  TrmOp :	
    t@op#(ts) -> Op(<otf(!op)> t, <map(trm-explode)> ts)

  TrmMetaVar :
    meta-var(x) -> Var(x)

  LstMetaVar :
    meta-listvar(x) -> Var(y)
    where if <explode-string; last> x => '*' then
	    !ListVar(x)
	  else
	    !x 
          end => y

  TrmInt = 
    !Int(<is-int; int-to-string>)

  TrmStr = 
    !Str(<is-string>)

  TrmFromTerm = 
    ?FromTerm(<MetaExplode>)

  TrmFromTerm = 
    ?FromMetaExpr(<MetaExplode>)

  TrmFromTerm = 
    ?FromMetaListExpr(<MetaExplode>)

  TrmFromStr =	
    ?FromStrategy(<MetaExplode>)

  TrmFromApp =
    ?FromApp(<!RootApp(<MetaExplode>)>)

  TrmAnno : 
    WithAnno(t1, t2) -> Anno(t1', t2')
    where <trm-explode; try(?NoAnnoList(<id>))> t1 => t1'
        ; (<is-list>t2 <+ ![t2])
        ; foldr(!NoAnnoList(Op("Nil",[]))
	       ,!NoAnnoList(Op("Cons", [<Fst>, <Snd>]))
	       , MetaExplode)
        ; try(?NoAnnoList(<id>)) => t2'

  TrmNil :
    [] -> Op("Nil", [])

  TrmCons :
    [FromTerm(v@Var(ListVar(_)))] -> v

  TrmCons :
    [mv@meta-listvar(x)] -> <LstMetaVar> mv

  TrmCons :
    [x | xs] -> 
    Op("Cons",[<trm-explode>x, <trm-explode> xs])

  TrmCons :
    ConsAux(x, xs) -> 
    Op("Cons",[<trm-explode>x, <trm-explode> xs])

  ConcAssocR : 
    Conc(Conc(t1, t2), t3) -> "Conc"#([t1, "Conc"#([t2, t3])])

  ConcCons :
    Conc([t1 | t2], t3) -> ConsAux(t1, "Conc"#([t2, t3]))

  ConcCons :
    Conc(ConsAux(t1, t2), t3) -> ConsAux(t1, "Conc"#([t2, t3]))

  ConcNil :
    Conc([], t) -> t

  ConcNil :
    Conc(t, []) -> t
   
  TrmConc :
    Conc(t1, t2) -> Op("Conc", [<trm-explode>t1, <trm-explode>t2])

/*
  TrmConc :
    Conc(ts1,ts2) -> t
    where <try(![<LstMetaVar>])
	   ; foldr(!<TrmLMetaVar <+ trm-explode> ts2, 
		   !NoAnnoList(Op("Cons", [<Fst>, <Snd>])), 
		   trm-explode)> ts1 => t
*/

  TrmFromMangle : 
    ManglePrefix(x, y) -> App(Call(SVar("conc-strings"),[]), Tuple([Str(x), Var(y)]))

  TrmFromMangle : 
    MangleSuffix(x, y) -> App(Call(SVar("conc-strings"),[]), Tuple([Var(x), Str(y)]))

  str-explode =
    otf(
    \ meta-var(x) -> Match(Var(x)) \
    <+ TrmFromTerm
    <+ TrmFromStr
    <+ ?FromApp(<MetaExplode>)
    <+ \ [] -> Cong("Nil", []) \
    <+ \ [t | ts] -> Cong("Cons", [<str-explode>t,<str-explode>ts]) \
    <+ is-string; !Match(NoAnnoList(Str(<id>)))
    <+ \ op#(ts) -> Cong(op, <map(str-explode)> ts) \
    )

signature
  constructors
    ToMetaExpr       : a -> b
    ToMetaListExpr   : a -> b
    FromMetaExpr     : a -> StrategoTerm
    FromMetaListExpr : a -> StrategoTerm
