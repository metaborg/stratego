module strc/model/model

imports
  signatures/Stratego-Sugar
  

signature
  constructors
    Definitions         : Label
    ExternalDefinitions : Label
    LocalDefinitions    : Label
    Constructors        : Label
    Overlays            : Label

  constructors
    Inj : Constructor
    Q   : String -> Constructor


strategies

  set-from-list(|lst) =
    set := <new-iset>
    ; iset-addlist(|lst)
    ; iset-elements 
    ; where(<iset-destroy> set)

  // TODO: use sets for indices instead of extended rules
  // remove signatures from these sets when removing elements

strategies // strategy definitions

  // m-add-def uses :+. Later bagof- gives a list in reverse insertion order,
  // therefore we always reverse the list coming out of bagof before doing
  // anything with it. Usually the list is used to then remove the key and
  // add the list again later after a transformation on each definition.
  // By always using this strategy, the order of insertion is always the same,
  // and the list out of bagof- is always the reverse. 
  bagof-ModDefinition-insertion-order = bagof-ModDefinition; reverse

  /**
   * Add mapping from a definition signature to the full definition,
   * and maintain a collection of all definitions, all external, and
   * all local definitions.
   *
   * Note: a definition is only added to the Definitions() collection
   * if no definition with the same signature was already added (to
   * ensure that each signature is listed only once). It is assumed
   * that definitions for a signature are all either local or external.
   * If this is not the case the ExternalDefinitions() and LocalDefinitions()
   * collections become inconsistent.

     Note: Instead of maintaining an index of keys (signatures), the model
     now relies on the dynamic rule left-hand sides using
     dr-all-keys. It turned out undoable to maintain an index
     containing *only* the currently active definitions. It might be
     doable with a separate iset, but then dynamic rule scopes would
     no longer be usable. The use of dr-all-keys does simplify the
     implementation a lot though. A slight disadvantage is that keys
     that have been undefined stay in the dynamic rule set as
     undefined, hence the key shows up in the dr-all-keys list; but
     the list can be simply filtered by checking if the rule is
     defined on the key. (It might be useful to build this into the
     semantics of dynamic rules.)

   */

  m-add-def = ?def
    ; where( sig := <m-def-signature> )
    ; if <is-external> def then
        rules( IsExternal : sig )
      else
        rules( IsLocal : sig )
      end
    ; if AnnoDef(one(Override + Extend), id) then
        rules( AlwaysNeeded :+= sig )
      end
    ; rules( ModDefinition :+ sig -> def )

  mark-always-needed(|name,sarity,tarity) =
    rules( AlwaysNeeded :+= (name,sarity,tarity) )

  /**
   * Remove all definitions for a given signature.
   *
   * @type : Signature or Def
   *
   * note that sig is not removed from index!
   */ 

  m-rm-def = 
    where( sig := <try(m-def-signature)> )
    ; rules( 
        ModDefinition :- sig
        IsLocal :- sig
        IsExternal :- sig
      )

  m-get-all-def-sigs =
    dr-all-keys(|"ModDefinition")
    ; filter(where(ModDefinition))

  m-get-all-local-def-sigs =
    dr-all-keys(|"ModDefinition")
    ; filter(IsLocal; where(ModDefinition))

  m-get-all-external-def-sigs =
    dr-all-keys(|"ModDefinition")    
    ; filter(IsExternal; where(ModDefinition))

  m-get-all-definitions =
    dr-all-keys(|"ModDefinition")
    ; filterconcat(bagof-ModDefinition-insertion-order)

  m-get-all-local-definitions =
    dr-all-keys(|"ModDefinition")    
    ; filterconcat(IsLocal; bagof-ModDefinition-insertion-order)

  m-get-all-external-definitions =
    dr-all-keys(|"ModDefinition")
    ; filterconcat(IsExternal; bagof-ModDefinition-insertion-order)

  filterconcat(s) =
    mapconcat(s <+ ![])

  m-reset-defs =
    where(dr-new-rule-set; dr-set-rule-set(|"ModDefinition"))

strategies

  m-call-signature =
    try(Desugar)
    ; (  \CallT(SVar(f), as1, as2) -> [(f, <length> as1, <length> as2)]\
      <+ \ProxyT(as1, as2, _, _, SVar(f)) -> [(f, <length> as1, <length> as2)]\)

  m-def-signature =
    try(Desugar)
    ; (  \ SDefT(f, xs, ys, s)      -> (f, <length>xs, <length>ys) \
      <+ \ ExtSDef(f, xs, ys)       -> (f, <length>xs, <length>ys) \
      <+ \ ExtSDefInl(f, xs, ys, s) -> (f, <length>xs, <length>ys) \
      <+ \ RDefT(f, xs, ys, s)      -> (f, <length>xs, <length>ys) \
      <+ \ DefHasType(f, FunTType(xs, ys, _, _)) -> (f, <length>xs, <length>ys) \
      <+ \ AnnoDef(a*, def)         -> <m-def-signature> def\)

  is-external =
    ?ExtSDef(_, _, _)
    <+ ?ExtSDefInl(_, _, _, _)

strategies // constructors

  m-add-constructor = ?cdec
    ; where( csig := <m-constr-signature> )
    ; where( try(
        cdec' := <ModConstructor> csig 
        ; if <not(eq)> (cdec, cdec') then
            warn(|<concat-strings>[
               "Declaration of constructor ", <Fst>csig, "/", <Snd>csig,
	       " overrides external constructor declaration"])
          end
      ) )
    ; rules( ModConstructor : csig -> cdec )

  m-rm-constructor = id
    ; where( csig := <try(m-constr-signature)> )
    ; rules( ModConstructor :- csig )

  m-get-all-constructors-sigs =
    dr-all-keys(|"ModConstructor")
    ; filter(where(ModConstructor))

  m-get-all-constructors =
    dr-all-keys(|"ModConstructor")
    ; filter(ModConstructor)

strategies

  m-constr-signature :
    OpDeclInj(FunType(ts,_))   -> (Inj(), <length> ts)

  m-constr-signature :
    OpDeclInj(ConstType(_))    -> (Inj(), 0)

  m-constr-signature :
    OpDeclInj(DynT(_))    -> (Inj(), 0)

  m-constr-signature :
    OpDeclQ(c, ConstType(x))   -> (Q(c), 0)

  m-constr-signature :
    OpDeclQ(c, DynT(x))   -> (Q(c), 0)

  m-constr-signature :
    OpDeclQ(c, FunType(ts, t)) -> (Q(c), <length> ts)

  m-constr-signature :
    OpDecl(c,  ConstType(x))   -> (c,    0)

  m-constr-signature :
    OpDecl(c,  DynT(x))   -> (c,    0)

  m-constr-signature :
    OpDecl(c,  FunType(ts, t)) -> (c,    <length> ts)

strategies

  m-constr-signature :
    ExtOpDeclInj(FunType(ts,_))   -> (Inj(), <length> ts)

  m-constr-signature :
    ExtOpDeclInj(ConstType(_))    -> (Inj(), 0)

  m-constr-signature :
    ExtOpDeclInj(DynT(_))    -> (Inj(), 0)

  m-constr-signature :
    ExtOpDeclQ(c, ConstType(x))   -> (Q(c), 0)

  m-constr-signature :
    ExtOpDeclQ(c, DynT(x))   -> (Q(c), 0)

  m-constr-signature :
    ExtOpDeclQ(c, FunType(ts, t)) -> (Q(c), <length> ts)

  m-constr-signature :
    ExtOpDecl(c,  ConstType(x))   -> (c,    0)

  m-constr-signature :
    ExtOpDecl(c,  DynT(x))   -> (c,    0)

  m-constr-signature :
    ExtOpDecl(c,  FunType(ts, t)) -> (c,    <length> ts)


strategies // overlays
 
  m-add-overlay = ?odec
   ; where( osig := <m-overlay-signature> )
   ; rules( ModOverlay : osig -> odec )

  m-overlay-signature =
    try(Desugar)
    ; \ Overlay(c, xs, t) -> (c, <length> xs) \

  m-get-all-overlays =
    dr-all-keys(|"ModOverlay")
    ; filter(ModOverlay)

strategies

  /**
   * Turn current term into model, apply transformation s in the
   * context of the model, and replace the original term with the
   * specification consisting of the transformed model.
   */

  m-transform(s) =
    {| ModDefinition, ModConstructor, ModOverlay, IsExternal, IsLocal
     : to-model
     ; s
     ; model-to-spec
     |}

  m-transform-no-overlays(s) =
    {| ModDefinition, ModConstructor, ModOverlay, IsExternal, IsLocal
     : to-model
     ; s
     ; model-to-spec-no-overlays
     |}

  m-transform-local-defs(s) = id
    ; m-get-all-local-def-sigs
    ; filter(not(m-transform-def(s))
             ; dbg(|"*** warning (m-transform-local-defs): "))
    ; ?[]

  m-transform-external-defs(s) = id
    ; m-get-all-external-def-sigs
    ; filter(not(m-transform-def(s))
             ; dbg(|"*** warning (m-transform-external-defs): "))
    ; ?[]

  m-transform-def(s) =
    where(id
    ; bagof-ModDefinition-insertion-order
    ; where(Hd;m-rm-def)
    ; s
    ; map(m-add-def)
    )

  m-transform-overlays(s) =
    m-get-all-overlays
    ; filter(not(m-transform-overlay(s))) => []

  m-transform-overlay(s) =
    where(s; m-add-overlay)

  m-transform-constructors(s) =
    m-get-all-constructors
    ; filter(not(m-transform-constructor(s))) => []

  m-transform-constructor(s) =
    where(m-rm-constructor; s; m-add-constructor)

  m-declare-constructors(s) =
    m-get-all-constructors
    ; map(s)

strategies

  model-to-spec =
    !Specification(
       [Signature([Constructors(<m-get-all-constructors>)]),
        Overlays(<m-get-all-overlays>),
        Strategies(<m-get-all-definitions>)]
     )

  model-to-spec-no-overlays = 
    !Specification(
       [Signature([Constructors(<m-get-all-constructors>)]),
        Strategies(<m-get-all-definitions>)]
     )

  /**
   * Create source model from AST.
   *
   * Note: Imports are currently not supported; assumed to be flattened
   * (e.g, by pack-stratego). In the future this could be extended to
   * represent a model of program modules and import relations.
   */

  to-model =
    Specification(map(to-model))

    <+ Signature(map(to-model))
    <+ Sorts(id) // map(to-model))
    <+ Constructors(map(to-model))

    <+ Overlays(map(to-model))
    <+ Rules(map(to-model))
    <+ Strategies(map(to-model))

    <+ constructor-to-model
    <+ strategy-def-to-model
    <+ overlay-to-model

    <+ ignore-defhastype
    <+ ignore-overlaydecl

    <+ fatal-err(|"*** to-model: don't know how to model this: ")
 
  strategy-def-to-model =
    m-add-def

  constructor-to-model =
    m-add-constructor

  overlay-to-model =
    m-add-overlay

  ignore-defhastype =
    ?DefHasTypeNoArgs(_, _) <+ ?DefHasType(_, _, _) <+ ?DefHasTType(_, _, _, _)

  ignore-overlaydecl =
    ?OverlayDecl(_, _, _) <+ ?OverlayDeclNoArgs(_, _)

strategies

  constr-sig-to-string = (is-string, is-int); split(Fst, !$[[<Fst>]_[<Snd>]]); origin-set-relation
  constr-sig-to-string: (Q(c), len) -> <origin-set-relation> (c, $[[<escape> c]_[len]])
  constr-sig-to-string: (Inj(), 0) -> <fail>

  strategy-sig-to-string = split(Fst, !$[[<Fst;cify>]_[<Snd>]_[<Third>]]); origin-set-relation

  internal origin-track-forced(s) =
    ![<id>]; all(s); ?[<id>]

  internal origin-set-relation:
    (origin-node, new-node) -> origin-tracked-node
    where
      origin-tracked-node := <!Some(<id>); all(!new-node); ?Some(<id>)> origin-node
