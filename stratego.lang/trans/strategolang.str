module strategolang

imports

  completion/completion
  pp
  outline
  analysis
  signatures/core/modules-sig
  signatures/-

  strc
  strc/front/frontend

  strj
  strj/s2j
  strj/strj-options

  libjava-front
  libstratego-gpp

  strj/multimatch/multimatch2java

rules // Debugging

  debug-show-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path
    ; result   := node

  debug-show-desugared:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"ctree.aterm")> path
    ; <set-config> ("--library", ()) // no main strategy necessary this way
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend-sep-comp
    ; ?result

  debug-show-ctree:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"ctree.aterm")> path
    ; <set-config> ("--library", ()) // no main strategy necessary this way
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend
    ; ?result

  debug-show-core:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"core.stra")> path
    ; <set-config> ("--library", ()) // no main strategy necessary this way
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend
    ; pp-debug
    ; ?result

  debug-show-core-optimized:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"core.opt.stra")> path
    ; <set-config> ("--library", ()) // no main strategy necessary this way
    ; <set-config> ("-O", 3) // set optimisation level to 3
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend
    ; strc-optimize
    ; pp-debug
    ; ?result

  debug-show-java:
    (node, _, _, path, project-path) -> (filename*, result*)
    with
      <set-config> ("--library", ()) // no main strategy necessary this way
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend-sep-comp
    ; Specification(map(try(Strategies(remove-all(?ExtSDef(_, _, _))))))
    ; debug1
    ; where(
        <set-config> ("-o", <guarantee-extension(|"java")> path) // required output file path
      ; <set-config> ("--single-strategy", ())
      ; <set-config> ("--fusion", "off")
      ; <set-config> ("--cache-dir", ".")
      ; <set-config> ("-p", "test")
      ; strj-preinit-options
      ; <dirname> path
      ; rules(OutputDirName := <id>)
      )
    ; s2j
    ; ?ast*
    ; filename* := <map(output-filename)> ast*
    ; result* := <map(pp-java5-to-abox; box2text-string(|80))> ast*

  debug-show-java-optimized:
    (node, _, _, path, project-path) -> (filename*, result*)
    with
      <set-config> ("--library", ()) // no main strategy necessary this way
    ; <set-config> ("-O", 3) // set optimisation level to 3
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend
    ; where(
        <set-config> ("-o", <guarantee-extension(|"opt.java")> path) // required output file path
      ; strj-preinit-options
      ; <dirname> path
      ; rules(OutputDirName := <id>)
      )
    ; strc-optimize
    ; s2j
    ; ?ast*
    ; filename* := <map(output-filename)> ast*
    ; result* := <map(pp-java5-to-abox; box2text-string(|80))> ast*

  debug-show-dfa:
    (node, _, _, path, project-path) -> (filename, result)
    with
      <set-config> ("--library", ()) // no main strategy necessary this way
    ; filename := <guarantee-extension(|"dfa.aterm")> path
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend
    ; where(
        <set-config> ("-o", <guarantee-extension(|"dfa.aterm")> path) // required output file path
      ; strj-preinit-options
      ; <dirname> path
      ; rules(OutputDirName := <id>)
      )
    ; collect-all(multimatch2dfa)
    ; ?result
