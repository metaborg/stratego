module strategolang

imports

  completion/completion
  pp
  outline
  analysis
  signatures/core/modules-sig
  signatures/-

  strc
  strc/front/desugar
  strc/front/frontend

  strj
  strj/s2j
  strj/strj-options

  libjava-front
  libstratego-gpp

  strj/multimatch/multimatch2java

rules
  translate-core-mm-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"dfa.aterm")> path
    ; result := <desugar; alltd(multimatch2dfa)> node

  translate-core-mm-pp:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"dfa.stra")> path
    ; result := <desugar; alltd(multimatch2dfa); pp-stratego-core> node

  translate-core(|path) = translate-core(|path, 2)

  translate-core(|path, O) = id
    ; local-pre-desugar-all
    ; try(\ Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*) \)
    ; where(
        <set-config> ("-o", <guarantee-extension(|$[opt[O].java])> path) // required output file path
      ; strj-preinit-options
      ; <set-config> ("-O", O)
      ; <dirname> path
      ; rules(OutputDirName := <id>)
      )
    ; frontend
    ; strc-optimize

rules // Debugging

  debug-show-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path
    ; result   := node

  debug-show-desugared:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"ctree.aterm")> path
    ; <set-config> ("--library", ()) // no main strategy necessary this way
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend-sep-comp
    ; ?result

  debug-show-ctree:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"ctree.aterm")> path
    ; <set-config> ("--library", ()) // no main strategy necessary this way
    ; <translate-core(|path)> node => result

  debug-show-core:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"core.stra")> path
    ; <set-config> ("--library", ()) // no main strategy necessary this way
    ; <translate-core(|path); pp-stratego-core> node => result

  debug-show-core-optimized-O0 = debug-show-core-optimized(|0)
  debug-show-core-optimized-O1 = debug-show-core-optimized(|1)
  debug-show-core-optimized-O2 = debug-show-core-optimized(|2)
  debug-show-core-optimized-O3 = debug-show-core-optimized(|3)
  debug-show-core-optimized-O4 = debug-show-core-optimized(|4)
  debug-show-core-optimized-O5 = debug-show-core-optimized(|5)
  debug-show-core-optimized(|O):
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|$[core.opt[O].stra])> path
    ; <set-config> ("--library", ()) // no main strategy necessary this way
    ; <translate-core(|path, O); pp-stratego-core> node => result

  debug-show-java:
    (node, _, _, path, project-path) -> (filename*, result*)
    with
      <set-config> ("--library", ()) // no main strategy necessary this way
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend-sep-comp
    ; Specification(map(try(Strategies(remove-all(?ExtSDef(_, _, _))))))
    ; debug1
    ; where(
        <set-config> ("-o", <guarantee-extension(|"java")> path) // required output file path
      ; <set-config> ("--single-strategy", ())
      ; <set-config> ("--fusion", "off")
      ; <set-config> ("--cache-dir", ".")
      ; <set-config> ("-p", "test")
      ; strj-preinit-options
      ; <dirname> path
      ; rules(OutputDirName := <id>)
      )
    ; s2j
    ; ?ast*
    ; filename* := <map(output-filename)> ast*
    ; result* := <map(pp-java5-to-abox; box2text-string(|80) <+ where(pp-aterm; debug(|"Pretty printing Java failed: ")); fail)> ast*

  debug-show-java-unoptimized:
    (node, _, _, path, project-path) -> (filename*, result*)
    with
      <set-config> ("--library", ()) // no main strategy necessary this way
    ; !node
    ; local-pre-desugar-all
    ; \Module(_, d*) -> Specification(<remove-all(?Imports(_))> d*)\
    ; frontend
    ; where(
        <set-config> ("-o", <guarantee-extension(|"java")> path) // required output file path
      ; strj-preinit-options
      ; <set-config> ("-O", 0) // set optimisation level to 0
      ; <dirname> path
      ; rules(OutputDirName := <id>)
      )
    ; strc-optimize
    ; s2j
    ; ?ast*
    ; filename* := <map(output-filename)> ast*
    ; result* := <map(pp-java5-to-abox; box2text-string(|80))> ast*

  debug-show-dfa-pp-O0 = debug-show-pp-dfa(|0)
  debug-show-dfa-pp-O1 = debug-show-pp-dfa(|1)
  debug-show-dfa-pp-O2 = debug-show-pp-dfa(|2)
  debug-show-dfa-pp-O3 = debug-show-pp-dfa(|3)
  debug-show-dfa-pp-O4 = debug-show-pp-dfa(|4)
  debug-show-dfa-pp-O5 = debug-show-pp-dfa(|5)

  debug-show-dfa-ctree-O0 = debug-show-ctree-dfa(|0)
  debug-show-dfa-ctree-O1 = debug-show-ctree-dfa(|1)
  debug-show-dfa-ctree-O2 = debug-show-ctree-dfa(|2)
  debug-show-dfa-ctree-O3 = debug-show-ctree-dfa(|3)
  debug-show-dfa-ctree-O4 = debug-show-ctree-dfa(|4)
  debug-show-dfa-ctree-O5 = debug-show-ctree-dfa(|5)

  debug-show-ctree-dfa(|O):
    (node, _, _, path, project-path) -> (filename, result)
    with
      <set-config> ("--library", ()) // no main strategy necessary this way
    ; filename := <guarantee-extension(|"dfa.stra")> path
    ; <translate-core(|path, O)> node
    ; alltd(multimatch2dfa)
    ; ?result

  debug-show-pp-dfa(|O) =
    debug-show-ctree-dfa(|O); (id, pp-stratego-core)
