module gradual-types/main

imports

libstratego-lib

libspoofax/term/annotation
libspoofax/stratego/debug

signatures/sugar/modules-sig
signatures/sugar/rules-sig
signatures/core/modules-sig
signatures/gradual-types/signatures-sig
signatures/gradual-types/internal-sig
signatures/Stratego-Sugar

gradual-types/utils
gradual-types/environment
gradual-types/signatures
gradual-types/defs
gradual-types/modules

strc/incr/fix-new-grammar

strategies // entry-points from Java

/**
 * insert-casts/0 inserts casts into a Stratego strategy/rule definition based on a gradual type system.
 * strats: map of top-level-definition names to the type description of the strategy
 * constrs: map of constructor definition names to type description
 * injection-closure: map of injections from one type to another (the transitive closure)
 * lub-map: map representing the least-upper-bound of the type lattice
 * aliases: map of sorts that are aliases by virtue of having only one injection rule and no constructors
 * asts: the stratego strategy/rule definitions
 */
// insert-casts ::
//    Map(String * Int * Int, SType) *
//    Rel(String * Int, ConstrType) *
//    Rel(String, String) *
//    Map(Type * Type, Type) *
//    Rel(String * Int, ConstrType) *
//    Module ->
//    Module * List(Message)
stratego2-insert-casts:
  (strats, constrs, srts, injection-closure, lub-map, aliases, ast) ->
    (asts', errs, warns, notes)
  with {| CanCoerce, CanCoerceSType, LUB:
    asts' := <insertCasts(|strats, constrs, srts, injection-closure, aliases, lub-map)> ast
    ; msg* := <bagof-Message>
    ; errs := <filter(?(MTError(), <id>))> msg*
    ; warns := <filter(?(MTWarning(), <id>))> msg*
    ; notes := <filter(?(MTNote(), <id>))> msg*
  |}

/**
 * Some strange "backward compatibility" rules in the grammar give these rule alternatives.
 * This strategy normalized those.
 */
fix-old-grammar = bottomup(try(otf(
    \RuleNoCond(t1,t2) -> Rule(t1, t2, <otf(![])> t2)\
  + \Rule(t1, t2, s) -> Rule(t1, t2, <otf(![<otf(!WhereClause(s))> s])> s) where <not(is-list)> s\
  + \ParenStrat(x) -> x\
  + \StrategyCurly(s2) -> s2\
  + \StringQuotation1("", sqp) -> StringQuotation1(sqp)\
  + \StringQuotation2("", sqp) -> StringQuotation2(sqp)\
  + \StringQuotation3("", sqp) -> StringQuotation3(sqp)\
  + \StringQuotation4("", sqp) -> StringQuotation4(sqp)\
  + \StringEscape1("", sqp) -> StringEscape1(sqp)\
  + \StringEscape2("", sqp) -> StringEscape2(sqp)\
  + \StringEscape3("", sqp) -> StringEscape3(sqp)\
  + \StringEscape4("", sqp) -> StringEscape4(sqp)\
)))

// insertCasts(|
//    Map(String * Int * Int, SType) *
//    Rel(String * Int, ConstrType) *
//    Set(String * Int) *
//    Rel(String, String) *
//    Map(Type * Type, Type) *
//    Rel(String * Int, ConstrType) )
//    Module ->
//    Module
insertCasts(|strats, constrs, srts, injection-closure, aliases, lub-map): ast -> ast'
  with id
  ; rules(CanCoerce: p -> <can-coerce(|injection-closure, aliases)> p)
  ; rules(CanCoerceSType: p -> <can-coerce-stype(|injection-closure)> p)
  ; rules(LUB: (pair, tve) -> <lub(|tve, lub-map)> pair)

  ; e := <new-env> (strats, constrs, srts)
  ; st := <new-st>
  ; let
      process-defs = map(fix-old-grammar;fix-new-grammar;insertCasts-Def(|e, st); Fst)
      process-constrs = map(sort-check-Opdecl(|e))
      process-sections = map(origin-track-forced(
           Imports(id)
        <+ Signature(map(Sorts(id) <+ Constructors(process-constrs)))
        <+ Overlays(id)
        <+ Strategies(process-defs)
        <+ Rules(process-defs)
        ))
      process = origin-track-forced(Module(id, process-sections) <+ Specification(process-sections))
    in
      ast' := <process> ast
    end


strategies

can-coerce(|injection-closure, aliases): ((from, to), _) -> <id>
  where
    <imrel-contains(|from, to)> aliases

can-coerce(|injection-closure, aliases): ((from, to), _) -> <id>
  where
    <imrel-contains(|from, to)> injection-closure

can-coerce(|injection-closure, aliases) = ?((ErrT(), _), _)
can-coerce(|injection-closure, aliases): ((t1, ErrT()), st1) -> ((t1, t1), st1)
can-coerce(|injection-closure, aliases) = ?((_, DynT()), _)
can-coerce(|injection-closure, aliases): ((SortVar(x), SortVar(x)), st1) -> <id>
  where
    not(<type-var-lookup(|x)> st1)

// We assume co-variant type parameters
can-coerce(|injection-closure, aliases): ((a@Sort(x, t1*), b@Sort(x, t2*)), st1) -> ((a', b'), st2)
  where
    (pairs, st2) := <thread-map(CanCoerce)> (<zip> (t1*, t2*), st1)
  ; (t3*, t4*) := <unzip> pairs
  ; (a', b') := (<otf(!Sort(x, t3*))> a, <otf(!Sort(x, t4*))> b)

can-coerce(|injection-closure, aliases):
  ((t1@SortVar(x), t2@SortVar(y)), st1) -> result
  where
    if t3 := <type-var-lookup(|x)> st1
    then result := <CanCoerce> ((t3, t2), st1)
    else if t3 := <type-var-lookup(|y)> st1
      then result := <CanCoerce> ((t1, t3), st1)
      else not(<eq> (x,y))
         ; result := ((t2, t2), <type-var-put(|x, t2)> st1)
      end
    end

can-coerce(|injection-closure, aliases):
  ((SortVar(x), t1), st1) -> result
  where
    if t2 := <type-var-lookup(|x)> st1
      then result := <CanCoerce> ((t2, t1), st1)
      else st2 := <type-var-put(|x, t1)> st1
        ; result := ((t1, t1), st2)
    end

can-coerce(|injection-closure, aliases):
  ((t1, SortVar(x)), st1) -> result
  where
    if t2 := <type-var-lookup(|x)> st1
      then result := <CanCoerce> ((t1, t2), st1)
      else st2 := <type-var-put(|x, t1)> st1
        ; result := ((t1, t1), st2)
    end

can-coerce(|injection-closure, aliases):
  ((t, t), st1) -> ((t, t), st1)

// dead code, why is this here? instantiating variables?
can-coerce(|injection-closure, aliases):
  ((a@Sort(x, t1*), DynT()), st1) -> ((a', DynT()), st2)
  where
    (pairs, st2) := <thread-map(CanCoerce)> (<map-pair-right(|DynT())> t1*, st1)
  ; (t3*, t4*) := <unzip> pairs
  ; a' := <otf(!Sort(x, t3*))> a

// dyn on left only succeeds if right is variable. Here for instantiating variables?
can-coerce(|injection-closure, aliases):
  ((DynT(), b@Sort(x, t1*)), st1) -> ((DynT(), b'), st2)
  where
    (pairs, st2) := <thread-map(CanCoerce)> (<map-pair-left(|DynT())> t1*, st1)
  ; (t3*, t4*) := <unzip> pairs
  ; b' := <otf(!Sort(x, t4*))> b

// TODO: are these necessary, and if so, how do we make sure they don't cause infinite recursion, because aliases can go back and forth
//can-coerce(|injection-closure, aliases): ((from, to), st1) ->
//  <imrel-get(|from);imset-remove(|from);imset-to-list;getfirst(\from2 -> <CanCoerce> ((from2, to), st1)\)> aliases

can-coerce(|injection-closure, aliases): ((from, to), st1) ->
  <imrel-get(|from);imset-remove(|from);imset-to-list;getfirst(\from2 -> <CanCoerce> ((from2, to), st1)\)> injection-closure

can-coerce-stype(|injection-closure) = ?((SErrT(), _), _)
can-coerce-stype(|injection-closure) = ?((_, SErrT()), _)

can-coerce-stype(|injection-closure):
  ((FunTType(st1*, tt1*, t1, t2), SDyn()), st1) ->
    ((FunTType(st2*, tt2*, t3, t5), SDyn()), st5)
  where
    ((t3, t4), st2) := <CanCoerce> ((t1, DynT()), st1)
  ; ((st2*, st3*), st3) := <thread-map(can-coerce-stype(|injection-closure))> (<map-pair-right(|SDyn())> st1*, st2)
  ; ((tt2*, tt3*), st4) := <thread-map(CanCoerce)> (<map-pair-right(|DynT())> tt1*, st3)
  ; ((t5, t6), st5) := <CanCoerce> ((t2, DynT()), st4)

can-coerce-stype(|injection-closure):
  ((SDyn(), FunTType(st1*, tt1*, t1, t2)), st1) ->
    ((SDyn(), FunTType(st3*, tt3*, t4, t6)), st5)
  where
    ((t3, t4), st2) := <CanCoerce> ((DynT(), t1), st1)
  ; ((st2*, st3*), st3) := <thread-map(can-coerce-stype(|injection-closure))> (<map-pair-left(|SDyn())> st1*, st2)
  ; ((tt2*, tt3*), st4) := <thread-map(CanCoerce)> (<map-pair-left(|DynT())> tt1*, st3)
  ; ((t5, t6), st5) := <CanCoerce> ((DynT(), t2), st4)

can-coerce-stype(|injection-closure):
  ((FunTType(st1*, tt1*, t1, t2), FunTType(st2*, tt2*, t3, t4)), st1) ->
    ((FunTType(st3*, tt3*, t5, t7), FunTType(st4*, tt4*, t6, t8)), st5)
  where
    ((t5, t6), st2) := <CanCoerce> ((t1, t3), st1)
  ; ((st3*, st4*), st3) := <thread-map(can-coerce-stype(|injection-closure))> (<zip> (st1*, st2*), st2)
  ; ((tt3*, tt4*), st4) := <thread-map(CanCoerce)> (<zip> (tt1*, tt2*), st3)
  ; ((t7, t8), st5) := <CanCoerce> ((t2,t4), st4)

itv(|st1) = instantiate-type-vars(id|<type-var-env> st1)
itv-tve(|tve) = instantiate-type-vars(id|tve)
itv-err(|st1, subj) = instantiate-type-vars(\SortVar(tv) -> <report-Err;!ErrT()> (subj, CannotCastToRigidTypeVar(subj, tv))\|<type-var-env> st1)

instantiate-type-vars(s|tve): t1 -> t2
  with t2 := <bottomup({x,t: ?t@SortVar(x) < type-var-lookup(|x, tve) <+ <s> t + id})> t1

fresh-type-vars(newvars): t1{LocalDef()} -> t1 with <newvars> []

fresh-type-vars(newvars): t1 -> <alltd(SortVar(\x -> <lookup> (x, tvmap)\))> t1
  with
    tvmap := <collect(?SortVar(<id>));map(!(<id>, <newname>))> t1
  ; <unzip;Snd;newvars> tvmap

strategies

lub: (p, st1) -> (t, st2)
  where
    st2 := <type-var-env(\tve -> <LUB;?(t, <id>)> (<itv-tve(|tve)> p, tve)\)> st1

lub(|tve, lub-map): (x, x) -> (x, tve)
lub(|tve, lub-map): (ErrT(), x) -> (x, tve)
lub(|tve, lub-map): (x, ErrT()) -> (x, tve)
lub(|tve, lub-map): (DynT(), _) -> (DynT(), tve)
lub(|tve, lub-map): (_, DynT()) -> (DynT(), tve)
lub(|tve, lub-map): (SortVar(tv), t) -> (t, <immap-put(|tv, t)> tve)
lub(|tve, lub-map): (t, SortVar(tv)) -> (t, <immap-put(|tv, t)> tve)
// pointwise lift LUB over type parameters
lub(|tve1, lub-map): (Sort(x, t1*), Sort(x, t2*)) -> (<otf(!Sort(x, t3*))> x, tve2)
  where
    (t3*, tve2) := <thread-map(\(p, tve) -> <itv-tve(|tve);lub(|tve, lub-map)> p\)> (<zip> (t1*, t2*), tve1)
lub(|tve, lub-map): pair -> (<immap-get(|pair) <+ immap-get(|<Swap> pair)> lub-map, tve)

st-lub-type(|st0): st1 -> st3
  where
    (t, st2) := <lub> ((<current-type> st1, <current-type> st0), st1)
  ; st3 := <current-type(|t)> st2

constr-lookup-from(st|name, arity, t1, st1) =
    constr-env
  ; imrel-get(|(name, arity))
  ; if not(DynT() := t1 <+ IllFormedTermT(_, _) := t1 <+ ErrT() := t1)
      then imset-filter(constr-lookup-filter(|t1, st1))
    end
  ; imset-to-list

constr-lookup-to(|name, arity, t1, st1) =
    constr-env
  ; imrel-get(|(name, arity))
  ; imset-filter(constr-lookup-filter(|t1, st1))
  ; imset-to-list

constr-lookup-filter(|t1, st1):
  t@ConstrType(_, t2) -> (t, st2)
  where (_, st2) := <CanCoerce> ((t2, t1), st1)
