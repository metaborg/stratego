module gradual-types/dynamic-rules

imports

libstratego-lib

libspoofax/term/annotation
libspoofax/stratego/debug

signatures/sugar/modules-sig
signatures/sugar/dynamic-rules-sig
signatures/gradual-types/signatures-sig
signatures/gradual-types/strategies-sig
signatures/gradual-types/internal-sig

gradual-types/utils
gradual-types/environment
gradual-types/signatures
gradual-types/strategies
gradual-types/terms
gradual-types/main

strategies // Strategy (dynamic-rules)

//  DynRuleScope             : ScopeLabels * Strategy -> Strategy

insertCasts-Strategy-(|e1, st1):
  DynRuleScope(l1, s1) -> (DynRuleScope(l2, s2), st3)
  with
    (l2, st2) := <insertCasts-ScopeLabels(|e1, st1)> l1
  ; (s2, st3) := <insertCasts-Strategy(|e1, st2)> s1


insertCasts-ScopeLabels(|e1, st1) = otf12(insertCasts-ScopeLabels-(|e1, st1))

//                           : List(DynRuleScopeId) -> ScopeLabels

insertCasts-ScopeLabels(|e1, st1) =
    is-list
  ; !(<id>, st1)
  ; thread-map(insertCasts-DynRuleScopeId(|e1))

//  ScopeLabels              : Term -> ScopeLabels

insertCasts-ScopeLabels-(|e1, st1):
  ScopeLabels(t1) -> (ScopeLabels(t2), st2)
  with
    (t2, st2) := <insertCasts-BuildTerm(|e1, st1)> t1


insertCasts-DynRuleScopeId(|e1):
  (drsi, st1) -> <insertCasts-DynRuleScopeId(|e1, st1)> drsi

insertCasts-DynRuleScopeId(|e1, st1) = otf12(insertCasts-DynRuleScopeId-(|e1, st1))

//  LabeledDynRuleScopeId    : Id * Term -> DynRuleScopeId

insertCasts-DynRuleScopeId-(|e1, st1):
  LabeledDynRuleScopeId(v, t1) -> (LabeledDynRuleScopeId(v, t2), st2)
  with
    (t2, st2) := <insertCasts-BuildTerm(|e1, st1)> t1

//  DynRuleScopeId           : Id -> DynRuleScopeId

insertCasts-DynRuleScopeId-(|e1, st1):
  DynRuleScopeId(v) -> (DynRuleScopeId(v), st1)

strategies // Strategy (dynamic-rules, continued)

//  GenDynRules              : List(DynRuleDef) -> Strategy

insertCasts-Strategy-(|e1, st1):
  GenDynRules(d1*) -> (GenDynRules(d2*), <current-type-of(|st1)> st2)
  with
    (d2*, st2) := <thread-map(insertCasts-DynRuleDef-Type(|e1, DynT()))> (d1*, st1)


insertCasts-DynRuleDef-Type(|e1, t1): (d1, st1) -> <insertCasts-DynRuleDef(|e1, <current-type(|t1)> st1)> d1

insertCasts-DynRuleDef(|e1, st1) = otf12(insertCasts-DynRuleDef-(|e1, st1))

//  AddScopeLabel            : Id * Term -> DynRuleDef

insertCasts-DynRuleDef-(|e1, st1):
  AddScopeLabel(v, t1) -> (AddScopeLabel(v, t2), st2)
  with
    (t2, st2) := <insertCasts-BuildTerm(|e1, st1)> t1

//  UndefineDynRule          : DynRuleId * Term -> DynRuleDef

insertCasts-DynRuleDef-(|e1, st1):
  UndefineDynRule(i1, t1) -> (UndefineDynRule(i2, t2), st3)
  with
    (i2, st2) := <insertCasts-DynRuleId(|e1, st1)> i1
  ; (t2, (st3, s*)) := <insertCasts-MatchTerm(|e1, st2)> t1
  ; if not([] := s*)
      then <report-Err> (t1, UnsupportedCastRequiredInDynamicRule())
    end

//  SetDynRule               : DynRuleId * Rule -> DynRuleDef

insertCasts-DynRuleDef-(|e1, st1):
  SetDynRule(i1, t1) -> (SetDynRule(i2, t2), st3)
  with
    (i2, st2) := <insertCasts-DynRuleId(|e1, st1)> i1
  ; (t2, st3) := <insertCasts-Rule(insertCasts-DynRuleCond|e1, st2)> t1

//  AddDynRule               : DynRuleId * Rule -> DynRuleDef

insertCasts-DynRuleDef-(|e1, st1):
  AddDynRule(i1, t1) -> (AddDynRule(i2, t2), st3)
  with
    (i2, st2) := <insertCasts-DynRuleId(|e1, st1)> i1
  ; (t2, st3) := <insertCasts-Rule(insertCasts-DynRuleCond|e1, st2)> t1

insertCasts-DynRuleCond(|e1) = otf22(insertCasts-DynRuleCond-(|e1))

insertCasts-DynRuleCond-(|e1):
  (WhereClause(s1), st1) -> (WhereClause(s2), st3)
  with
    (s2, st2) := <insertCasts-Strategy(|e1, st1)> s1
  ; st3 := <current-type-of(|st1)> st2

insertCasts-DynRuleCond-(|e1):
  (c@WithClause(s1), st1) -> (WithClause(s2), st3)
  with
    (s2, st2) := <insertCasts-Strategy(|e1, st1)> s1
  ; st3 := <current-type-of(|st1)> st2
  ; <report-Err> (c, WithClauseInDynRule())

//  SetDynRuleMatch          : DynRuleId * Term -> DynRuleDef

insertCasts-DynRuleDef-(|e1, st1):
  SetDynRuleMatch(i1, t1) -> (SetDynRuleMatch(i2, t2), st3)
  with
    (i2, st2) := <insertCasts-DynRuleId(|e1, st1)> i1
  ; (t2, (st3, s*)) := <insertCasts-MatchTerm(|e1, st2)> t1
  ; if not([] := s*)
      then <report-Err> (t1, UnsupportedCastRequiredInDynamicRule())
    end

//  DynRuleAssign            : DynRuleId * Term -> DynRuleDef

insertCasts-DynRuleDef-(|e1, st1):
  DynRuleAssign(i1, t1) -> (DynRuleAssign(i2, t2), st3)
  with
    (i2, st2) := <insertCasts-DynRuleId(|e1, st1)> i1
  ; (t2, st3) := <insertCasts-BuildTerm(|e1, st2)> t1

//  DynRuleAssignAdd         : DynRuleId * Term -> DynRuleDef

insertCasts-DynRuleDef-(|e1, st1):
  DynRuleAssignAdd(i1, t1) -> (DynRuleAssignAdd(i2, t2), st3)
  with
    (i2, st2) := <insertCasts-DynRuleId(|e1, st1)> i1
  ; (t2, st3) := <insertCasts-BuildTerm(|e1, st2)> t1

//  SetDynRuleDepends        : DynRuleId * Rule * Term -> DynRuleDef

insertCasts-DynRuleDef-(|e1, st1):
  SetDynRuleDepends(i1, s1, t1) -> (SetDynRuleDepends(i2, s2, t2), st4)
  with
    (i2, st2) := <insertCasts-DynRuleId(|e1, st1)> i1
  ; (s2, st3) := <insertCasts-Rule(insertCasts-DynRuleCond|e1, st2)> s1
  ; (t2, st4) := <insertCasts-BuildTerm(|e1, st3)> t1

insertCasts-DynRuleId(|e1, st1) = otf12(insertCasts-DynRuleId-(|e1, st1))

//  LabeledDynRuleId         : RuleDec * Term -> DynRuleId

insertCasts-DynRuleId-(|e1, st1):
  LabeledDynRuleId(rd1, t1) -> (LabeledDynRuleId(rd1, t2), st2)
  with
    (t2, st2) := <insertCasts-BuildTerm(|e1, st1)> t1

//  AddLabelDynRuleId        : RuleDec * Term -> DynRuleId

insertCasts-DynRuleId-(|e1, st1):
  AddLabelDynRuleId(rd1, t1) -> (AddLabelDynRuleId(rd1, t2), st2)
  with
    (t2, st2) := <insertCasts-BuildTerm(|e1, st1)> t1

//  DynRuleId                : RuleDec -> DynRuleId

insertCasts-DynRuleId-(|e1, st1):
  DynRuleId(rd1) -> (DynRuleId(rd1), st1)

//  DynRuleIntersectFix      : RuleNames * Strategy -> Strategy

insertCasts-Strategy-(|e1, st1):
  DynRuleIntersectFix(n1, s1) -> (DynRuleIntersectFix(n2, s2), st3)
  with
    (n2, st2) := <insertCasts-RuleNames(|e1, st1)> n1
  ; (s2, st3) := <insertCasts-Strategy(|e1, st2)> s1

//  DynRuleUnionFix          : RuleNames * Strategy -> Strategy

insertCasts-Strategy-(|e1, st1):
  DynRuleUnionFix(n1, s1) -> (DynRuleUnionFix(n2, s2), st3)
  with
    (n2, st2) := <insertCasts-RuleNames(|e1, st1)> n1
  ; (s2, st3) := <insertCasts-Strategy(|e1, st2)> s1

//  DynRuleIntersectUnionFix : RuleNames * RuleNames * Strategy -> Strategy

insertCasts-Strategy-(|e1, st1):
  DynRuleIntersectUnionFix(n1, n2, s1) -> (DynRuleIntersectUnionFix(n3, n4, s2), st4)
  with
    (n3, st2) := <insertCasts-RuleNames(|e1, st1)> n1
  ; (n4, st3) := <insertCasts-RuleNames(|e1, st2)> n2
  ; (s2, st4) := <insertCasts-Strategy(|e1, st3)> s1

//  DynRuleIntersect         : Strategy * RuleNames * Strategy -> Strategy

insertCasts-Strategy-(|e1, st1):
  DynRuleIntersect(s1, n1, s2) -> (DynRuleIntersect(s3, n2, s4), st4)
  with
    (s3, st2) := <insertCasts-Strategy(|e1, st1)> s1
  ; (n2, st3) := <insertCasts-RuleNames(|e1, st2)> n1
  ; (s4, st4) := <insertCasts-Strategy(|e1, st3)> s2

//  DynRuleUnion             : Strategy * RuleNames * Strategy -> Strategy

insertCasts-Strategy-(|e1, st1):
  DynRuleUnion(s1, n1, s2) -> (DynRuleUnion(s3, n2, s4), st4)
  with
    (s3, st2) := <insertCasts-Strategy(|e1, st1)> s1
  ; (n2, st3) := <insertCasts-RuleNames(|e1, st2)> n1
  ; (s4, st4) := <insertCasts-Strategy(|e1, st3)> s2

//  DynRuleIntersectUnion    : Strategy * RuleNames * RuleNames * Strategy -> Strategy

insertCasts-Strategy-(|e1, st1):
  DynRuleIntersectUnion(s1, n1, n2, s2) -> (DynRuleIntersectUnion(s3, n3, n4, s4), st5)
  with
    (s3, st2) := <insertCasts-Strategy(|e1, st1)> s1
  ; (n3, st3) := <insertCasts-RuleNames(|e1, st2)> n1
  ; (n4, st4) := <insertCasts-RuleNames(|e1, st3)> n2
  ; (s4, st5) := <insertCasts-Strategy(|e1, st4)> s2


//                           : List(Id) -> RuleNames

insertCasts-RuleNames(|e1, st1) =
    is-list; !(<id>, st1)

//  RuleNames                : Term -> RuleNames

insertCasts-RuleNames(|e1, st1) = otf12(insertCasts-RuleNames-(|e1, st1))

insertCasts-RuleNames-(|e1, st1):
  RuleNames(t1) -> (RuleNames(t2), st2)
  with
    (t2, st2) := <insertCasts-BuildTerm(|e1, st1)> t1
