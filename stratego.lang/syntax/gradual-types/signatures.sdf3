module gradual-types/signatures

imports
  core/identifiers
  core/signatures

context-free sorts Type SortT Dyn
context-free syntax
  ConstType.ConstDynT = Dyn
  Dyn.Dyn           = [?]
  Type.TupleT       = [[Type] * [{Type " * "}+]]
  Type.DynT         = Dyn
  Type.StringT      = "string"
  Type.IntT         = "int"
  Type.RealT        = "real"
  Type.BlobT        = "blob"
  Type              = [([Type])] {bracket}
  Type              = SortT
  SortT.SortT       = [[Id]([{Type ", "}*])]
  SortT.SortTNoArgs = UCID
  SortT             = "TP" {reject}
  SortT.SortTVar    = SortVar

  SortArg.SATupleT = [[Sort] * [{Sort " * "}+]]
  SortArg.SADynT   = Dyn

context-free priorities
  Type.TupleT <0> .> Type.TupleT,
  {Type "*"}+ = Type <0> .> Type.TupleT,
  {Type "*"}+ = {Type "*"}+ "*" Type <2> .> Type.TupleT

context-free sorts SType SFunType SSimpleFunType FunTType
context-free syntax
  SType.SDyn             = [?]
  SType                  = SFunType

  SSimpleFunType.TP                 = [TP]
  SSimpleFunType.FunNoArgsType      = [[Type] -> [Type]]

  SFunType          = SSimpleFunType
  SFunType.SFunType = [([{SType ", "}*]) [SSimpleFunType]]
  SFunType          = FunTType

  FunTType.FunTType = [([{SType ", "}*] | [{Type ", "}*]) [SSimpleFunType]]
