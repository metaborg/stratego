module core/strategies

imports
  core/terms
  core/constants
  core/signatures
  core/identifiers

template options
  keyword -/- [a-zA-Z0-9\'\-\_]
  tokenize: ")(|"

sorts Def
context-free syntax
  Def = StrategyDef

  SVar.SVar = Id

  Strategy.Let =
<let
  <{Def "\n"}*>
in
  <Strategy>
end>

  Strategy.CallT =
    <<SVar>(<{Strategy ", "}*>|<{Term ", "}*>)>

  Strategy.CallDynamic =
    <call(<Term>|<{Strategy ", "}*>|<{Term ", "}*>)> {deprecated("Dynamic calls are not supported")}

sorts StrategyDef
context-free syntax
  StrategyDef.SDefT =
<<Id>(<{Typedid ", "}*> | <{Typedid ", "}*>) =
  <Strategy>>

  Def.AnnoDef = <<Anno+> <StrategyDef>>

  StrategyDef.ExtSDefInl =
<external <Id>(<{Typedid ", "}*> | <{Typedid ", "}*>) =
  <Strategy>>

  StrategyDef.ExtSDef =
    <external <MaybeEmptyId>(<{Typedid ", "}*> | <{Typedid ", "}*>)>

sorts MaybeEmptyId
lexical syntax
  MaybeEmptyId =
  MaybeEmptyId = Id

sorts Anno
context-free syntax
  Anno.Extend = <extend>
  Anno.Override = <override>
  Anno.Internal = <internal>

sorts Typedid
context-free syntax
  Typedid.VarDec = <<ID> : <OldType>>


sorts Strategy SVar StrategyMid
context-free syntax
  Strategy.Fail  = <fail>
  Strategy.Id    = <id>
  Strategy.ProceedT = <proceed(<{Strategy ", "}*>|<{Term ", "}*>)>
  Strategy.ProceedNoArgs = <proceed>
  Strategy.Match = <?<Term>>
  Strategy.Build = <!<Term>>
  Strategy.Scope = <{<{ID ", "}*>: <Strategy> }>
  Strategy.Seq   = <<Strategy>; <Strategy>> {right}
  Strategy.GuardedLChoice = [[Strategy] < [Strategy] + [Strategy]] {right}
  Strategy.PrimT = <prim(<String>, <{Strategy ", "}*>|<{Term ", "}*>)>
  Strategy.Some  = <some(<Strategy>)>
  Strategy.One   = <one(<Strategy>)>
  Strategy.All   = <all(<Strategy>)>

context-free priorities
  { Strategy.Build
    Strategy.Match
  }
> Strategy.Seq
> Strategy.GuardedLChoice

context-free syntax
  Strategy.ImportTerm = <import-term(<ModName>)>
