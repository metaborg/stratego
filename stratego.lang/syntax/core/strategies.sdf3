module core/strategies

imports
  core/terms
  core/constants
  core/signatures
  core/identifiers

template options
  keyword -/- [a-zA-Z0-9\'\-\_]
  tokenize: ")(|"

context-free sorts Def
context-free syntax
  Def = StrategyDef

context-free sorts StrategyDef SDefT
context-free syntax
  // indirection for SDefP in sugar/strategies
  StrategyDef = SDefT
  SDefT.SDefT =
<<SId>(<{Typedid ", "}*> | <{Typedid ", "}*>) =
  <Strategy>>

  Def.AnnoDef = <<Anno+> <StrategyDef>>

  StrategyDef.ExtSDefInl =
<external <SId>(<{Typedid ", "}*> | <{Typedid ", "}*>) =
  <Strategy>>

  StrategyDef.ExtSDef =
    <external <MaybeEmptySId>(<{Typedid ", "}*> | <{Typedid ", "}*>)>

lexical sorts SId MaybeEmptySId
lexical syntax
  // indirection for highlighting
  SId = Id

  MaybeEmptySId =
  MaybeEmptySId = SId

context-free sorts Anno
context-free syntax
  Anno.Extend = <extend>
  Anno.Override = <override>
  Anno.Internal = <internal>

context-free sorts Typedid
context-free syntax
  Typedid.VarDec = <<ID> : <OldType>>


context-free sorts Strategy SVar
context-free syntax
  Strategy.Fail  = <fail>
  Strategy.Id    = <id>
  Strategy.ProceedT = <proceed(<{Strategy ", "}*>|<{Term ", "}*>)>
  Strategy.ProceedNoArgs = <proceed>
  Strategy.Match = <?<Term>>
  Strategy.Build = <!<Term>>
  Strategy.Scope = <{<{ID ", "}*>: <Strategy> }>
  Strategy.Seq   = <<Strategy>; <Strategy>> {right}
  Strategy.GuardedLChoice = [[Strategy] < [Strategy] + [Strategy]] {right}
  Strategy.PrimT = <prim(<String>, <{Strategy ", "}*>|<{Term ", "}*>)>
  Strategy.Some  = <some(<Strategy>)>
  Strategy.One   = <one(<Strategy>)>
  Strategy.All   = <all(<Strategy>)>

  SVar.SVar = SId

  Strategy.Let =
<let
  <{Def "\n"}*>
in
  <Strategy>
end>

  Strategy.CallT =
    <<SVar>(<{Strategy ", "}*>|<{Term ", "}*>)>

  Strategy.CallDynamic =
    <call(<Term>|<{Strategy ", "}*>|<{Term ", "}*>)> {deprecated("Dynamic calls are not supported")}

  Strategy.ImportTerm = <import-term(<ModName>)>

context-free priorities
  { Strategy.Build
    Strategy.Match
  }
> Strategy.Seq
> Strategy.GuardedLChoice
