module core/strategies

imports
  core/terms
  core/constants
  core/signatures
  core/identifiers

template options
  keyword -/- [a-zA-Z0-9\'\-\_]
  tokenize: ")(|"

context-free sorts Def
context-free syntax
  Def = StrategyDef

context-free sorts StrategyDef SDefT
context-free syntax
  // indirection for SDefP in sugar/strategies
  StrategyDef = SDefT
  SDefT.SDefT =
<<Id>(<{Typedid ", "}*> | <{Typedid ", "}*>) =
  <Strategy>>

  Def.AnnoDef = <<Anno+> <StrategyDef>>

  StrategyDef.ExtSDefInl =
<external <Id>(<{Typedid ", "}*> | <{Typedid ", "}*>) =
  <Strategy>>

  StrategyDef.ExtSDef =
    <external <MaybeEmptyId>(<{Typedid ", "}*> | <{Typedid ", "}*>)>

lexical sorts MaybeEmptyId
lexical syntax
  MaybeEmptyId =
  MaybeEmptyId = Id

context-free sorts Anno
context-free syntax
  Anno.Extend = <extend>
  Anno.Override = <override>
  Anno.Internal = <internal>

context-free sorts Typedid
context-free syntax
  Typedid.VarDec = <<ID> : <OldType>>


context-free sorts Strategy SVar
context-free syntax
  Strategy.Fail  = <fail>
  Strategy.Id    = <id>
  Strategy.ProceedT = <proceed(<{Strategy ", "}*>|<{Term ", "}*>)>
  Strategy.ProceedNoArgs = <proceed>
  Strategy.Match = <?<Term>>
  Strategy.Build = <!<Term>>
  Strategy.Scope = <{<{ID ", "}*>: <Strategy> }>
  Strategy.Seq   = <<Strategy>; <Strategy>> {right}
  Strategy.GuardedLChoice = [[Strategy] < [Strategy] + [Strategy]] {right}
  Strategy.PrimT = <prim(<String>, <{Strategy ", "}*>|<{Term ", "}*>)>
  Strategy.Some  = <some(<Strategy>)>
  Strategy.One   = <one(<Strategy>)>
  Strategy.All   = <all(<Strategy>)>

  SVar.SVar = Id

  Strategy.Let =
<let
  <{Def "\n"}*>
in
  <Strategy>
end>

  Strategy.CallT =
    <<SVar>(<{Strategy ", "}*>|<{Term ", "}*>)>

  Strategy.CallDynamic =
    <call(<Term>|<{Strategy ", "}*>|<{Term ", "}*>)> {deprecated("Dynamic calls are not supported")}

  Strategy.ImportTerm = <import-term(<ModName>)>

// PMC
context-free sorts MatchOrder MatchCase
context-free syntax
  Strategy.MultiMatch =
<match <MatchOrder>
  <{MatchCase "\n"}*>
end>

  MatchOrder.Sequential = <sequential>

  MatchCase.ScopedMatchCase = <case <{ID ", "}*> | <Term>: <Strategy>>
  MatchCase.ScopedGuardedMatchCase = <case <{ID ", "}*> | <Term> where <Strategy>: <Strategy>>

context-free sorts DTree
context-free syntax
  Strategy = DTree // Can be factored out if only one DTree production exists.

  DTree.SwitchT =
<switch <PathTp> {
  <{AltT "\n"}*>
  <Default>
}>

  // IR
  DTree.GuardedLeafs = <<{Guard "\n"}+>>

context-free sorts SwitchV
context-free syntax
  SwitchV.SwitchV =
<switch <PathVF> {
  <{AltV "\n"}*>
  <Default>
}>

context-free sorts AltT AltV Default
context-free syntax
  AltT.AltT =
<alt <PatT>:
  <SwitchV>>

  AltV.AltV =
<alt <PatV>:
  <Strategy>>

  AltV.GuardedAltV =
<alt <PatV>
  <{Guard "\n"}+>>

  Default.Default =
<default:
  <Strategy>>

  Default.GuardedDefault =
<default
  <{Guard "\n"}+>>

context-free sorts Guard
context-free syntax
  Guard.Guard =
<where <Strategy>:
  <Strategy>>

context-free sorts Path PathTrm PathTp PathFld PathVF
context-free syntax
  Path = PathTrm
  Path = PathTp
  Path = PathFld
  
  PathVF = PathTrm
  PathVF = PathFld

  PathTrm.CurP = <current>
//  PathTrm.Var = ID
  PathTrm.SubP = <<PathTrm>.<Int>>
  PathTrm.AnnoP = <<PathTrm>.anno>
  PathTrm.HeadP = <<PathTrm>.head>
  PathTrm.TailP = <<PathTrm>.tail>

  PathTp.TypeP = <<PathTrm>.type>

  PathFld.SizeP = <<PathTrm>.size>
  PathFld.ConP  = <<PathTrm>.con>
  PathFld.IntP  = <<PathTrm>.int>
  PathFld.RealP = <<PathTrm>.real>
  PathFld.StrP  = <<PathTrm>.str>

context-free sorts PatV
context-free syntax
  PatV.FunC = <(<Id>, <Int>)>
  PatV.StrC = String
  PatV.IntC = Int
  PatV.RealC = Real
  PatV.AnnoC = <{_}>
  PatV.TupleC = <(<Int>)>

context-free sorts PatT
context-free syntax
  PatT.ApplT = <APPL>
  PatT.LisT = <LIST>
  PatT.IntT = <INT>
  PatT.RealT = <REAL>
  PatT.StringT = <STRING>
  PatT.CtorT = <CTOR>
  PatT.TupleT = <TUPLE>
  PatT.RefT = <REF>
  PatT.BlobT = <BLOB>
  PatT.PlaceT = <PLACEHOLDER>

context-free priorities
  { Strategy.Build
    Strategy.Match
  }
> Strategy.Seq
> Strategy.GuardedLChoice
