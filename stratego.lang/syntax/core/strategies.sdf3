module core/strategies

imports
  core/terms
  core/constants
  core/signatures
  core/identifiers

template options
  Id = keyword {reject}
  keyword -/- [a-zA-Z0-9\'\-\_]
  tokenize: ")(|"

sorts Def
context-free syntax
  Def = StrategyDef

  SVar.SVar = Id

  Strategy.Let =
<let
  <{Def "\n"}*>
in
  <Strategy>
end>

  Strategy.CallT =
    <<SVar>(<{Strategy ", "}*>|<{Term ", "}*>)>

  Strategy.CallDynamic =
    <call(<Term>|<{Strategy ", "}*>|<{Term ", "}*>)> {deprecated("Dynamic calls are not supported")}

sorts StrategyDef
context-free syntax
  StrategyDef.SDefT =
<<Id>(<{Typedid ", "}*> | <{Typedid ", "}*>) =
  <Strategy>>

  Def.AnnoDef = <<Anno+> <StrategyDef>>

  StrategyDef.ExtSDefInl =
<external <Id>(<{Typedid ", "}*> | <{Typedid ", "}*>) =
  <Strategy>>

  StrategyDef.ExtSDef =
    <external <MaybeEmptyId>(<{Typedid ", "}*> | <{Typedid ", "}*>)>

sorts MaybeEmptyId
lexical syntax
  MaybeEmptyId =
  MaybeEmptyId = Id

sorts Anno
context-free syntax
  Anno.Extend = <extend>
  Anno.Override = <override>
  Anno.Internal = <internal>

sorts Typedid
context-free syntax
  Typedid.VarDec = <<ID> : <OldType>>


sorts Strategy SVar StrategyMid
context-free syntax
  Strategy.Fail  = <fail>
  Strategy.Id    = <id>
  Strategy.ProceedT = <proceed(<{Strategy ", "}*>|<{Term ", "}*>)> {prefer}
  Strategy.ProceedNoArgs = <proceed> {prefer}
  Strategy.Match = <?<Term>>
  Strategy.Build = <!<Term>>
  Strategy.Scope = <{<{ID ", "}*>: <Strategy> }>
  Strategy.Seq   = <<Strategy>; <Strategy>> {right}
  Strategy.GuardedLChoice = [[Strategy] < [Strategy] + [Strategy]] {right}
  Strategy.PrimT = <prim(<String>, <{Strategy ", "}*>|<{Term ", "}*>)>
  Strategy.Some  = <some(<Strategy>)>
  Strategy.One   = <one(<Strategy>)>
  Strategy.All   = <all(<Strategy>)>

// PMC
sorts MatchOrder MatchCase
context-free syntax
  Strategy.MultiMatch =
<match <MatchOrder>
  <{MatchCase "\n"}+>
end>

  MatchOrder.Linear = <linear>
  MatchOrder.Specificity = <specificity>

  MatchCase.MatchCase = <case <Term>: <Strategy>>

sorts DTree Alt
context-free syntax
  Strategy = DTree

  DTree.Leaf = <leaf <Strategy>>
//  DTree.Fail = <fail>
  DTree.Switch =
<switch (<Path>) {
  <{Alt "\n"}*>
  default: <DTree>
}>
  DTree.Swap =
<swap (<Int>)
  <DTree>>

  Alt.Alt =
<alt <Pat>:
  <DTree>>

sorts Path PathEl
context-free syntax
  Path.Path = <<{PathEl ", "}+>>

  PathEl.Sub = <sub <Int>>
  PathEl.Ann = <ann>
  PathEl.Con = <con>
  PathEl.Cur = <cur>

sorts Pat
context-free syntax
  Pat.Fun = <Fun(<Id>, <Int>)>
  Pat.Str = String
  Pat.Int = Int
  Pat.Real = Real
  Pat.Anno = <anno>

context-free priorities
  { Strategy.Build
    Strategy.Match
  }
> Strategy.Seq
> Strategy.GuardedLChoice

context-free priorities
DTree.Leaf <0> > { DTree.Leaf
                   // DTree.Fail
                   DTree.Switch
                   DTree.Swap }

context-free syntax
  Strategy.ImportTerm = <import-term(<ModName>)>
