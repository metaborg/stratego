module core/signatures

imports
  core/identifiers
  core/constants

context-free sorts Kind
context-free syntax
  Kind.Star = <*>

context-free sorts SortDef
context-free syntax
  SortDef.SortVar    = LCID {deprecated("This syntax never had a clear meaning should not be used")}
  SortDef.SortNoArgs = UCID
  SortDef.Sort = [[UCID]([{Kind ", "}*])]
  SortDef.Sort = <<Id>(<{Sort ", "}+>)> {deprecated("This syntax never had a clear meaning should be replaced by the version that uses kinds A(*, *)")}

context-free sorts Sdecl
context-free syntax

  Sdecl.Sorts =
<sorts <SortDef*>>

  Sdecl.Constructors =
<constructors

<{Opdecl "\n"}*>>

context-free sorts Sort SortArg
context-free syntax
  Sort.SortVar    = LCID
  Sort.SortNoArgs = UCID
  Sort.Sort       = <<Id>(<{SortArg ", "}*>)>
  SortArg = Sort
  SortArg.TupleT      = [[Sort] * [{Sort " * "}+]]

context-free sorts Opdecl
context-free syntax
  Opdecl.OpDecl    = <<Id> : <OpType>>
  Opdecl.OpDeclQ   = <<String> : <OpType>>
  Opdecl.OpDeclInj = <: <OpType>>

  Opdecl.ExtOpDecl    = <external <Id> : <OpType>>
  Opdecl.ExtOpDeclQ   = <external <String> : <OpType>>
  Opdecl.ExtOpDeclInj = <external : <OpType>>

context-free sorts OldType OldArgType ConstType FunType RetType OpType
context-free syntax
  ConstType.ConstType = Sort

  FunType.FunType = [[{OldArgType " * "}+] -> [RetType]]

  OldArgType = <(<OldType>)> {bracket}
  OldArgType = ConstType
  RetType = OldType
  RetType = FunType {reject}

  OldType = FunType
  OldType = ConstType

  OpType = ConstType
  OpType.FunType = [[{ConstType " * "}+] -> [ConstType]]

// Restriction is required for the Sort* in Sdecl: List(a) is ambiguous.
context-free restrictions
  Sort -/- [\(]
