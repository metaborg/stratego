module sugar/strategies
imports
  core/identifiers
  core/constants
  core/strategies
  core/terms
  sugar/terms
  sugar/rules
  sugar/constants
  sugar/signatures

template options
  tokenize: ")(|"

context-free syntax
  StrategyDef.SDefNoArgs =
<<Id> =
  <Strategy>>

  StrategyDef.SDef =
<<Id>(<{Typedid ", "}*>) =
  <Strategy>>

  // Strategy definition with pattern matched term parameters
  StrategyDef.SDefP =
<<Id>(<{Typedid ", "}*>|<{TermNoVar ","}+>) =
  <Strategy>>

context-free syntax
  Typedid.DefaultVarDec = ID

  TermNoVar = Term

context-free priorities
  TermNoVar = Term <0> .>
  Term = Var

context-free syntax

  Strategy.Call = <<SVar>(<{Strategy ","}*>)>
  Strategy.ScopeDefault = <{<Strategy>}>
  Strategy.BA = [<[Strategy]> [Term]]
  Strategy.LChoice = [[Strategy] <+ [Strategy]] {right}

  Strategy.Rec        = <rec <Id>( <Strategy> )>
  Strategy.Not        = <not(<Strategy>)>
  Strategy.Where      = <where(<Strategy>)>
  Strategy.With       = <with(<Strategy>)>
  Strategy.Test       = <test(<Strategy>)> {deprecated("Use `where` instead")}
  Strategy.PrimNoArgs = <prim(<String>)>
  Strategy.Prim       = <prim(<String>, <{Term ", "}*>)>

context-free syntax // congruence operators

  Strategy.StrCong        = <<String>>
  Strategy.IntCong        = <<Int>>
  Strategy.RealCong       = <<Real>>
  Strategy.CharCong       = <<Char>>
  Strategy.CongQ          = <<String>(<{Strategy ", "}*>)>
  Strategy.EmptyTupleCong = <( )>
  Strategy                = <(<Strategy>)> {bracket}
  Strategy.TupleCong      = <(<Strategy>, <{Strategy ", "}+> )>
  Strategy.ListCongNoTail = <[<{Strategy ", "}*> ]>
  Strategy.ListCong       = <[<{Strategy ", "}*> | <Strategy> ]>
  Strategy.ExplodeCong    = <<Strategy>#(<Strategy>)>
  Strategy.AM             = [[Strategy] => [Term]]
  Strategy.Assign         = <<Term> := <Term>>

  Strategy.AnnoCong       = <<Strategy>{<Strategy>}>

%% Syntactic sugar sugar

context-free syntax

  Strategy.CallNoArgs = <<SVar>>
  Strategy.LRule      = <\\<Rule>\\>
  Strategy.SRule      = <(<Rule>)>
  Strategy.Choice     = <<Strategy> + <Strategy>> {right}
  Strategy.RChoice    = [[Strategy] +> [Strategy]] {right}
  Strategy.Proceed    = <proceed(<{Strategy ", "}+>)>
  Strategy.CondChoice = <if <Strategy> then <Strategy> else <Strategy> end>
  Strategy.IfThen     = <if <Strategy> then <Strategy> end>

sorts SwitchCase
context-free syntax
  Strategy.SwitchChoiceNoOtherwise =
<switch <Strategy>
  <{SwitchCase "\n"}*>
end>

  Strategy.SwitchChoice =
<switch <Strategy>
  <{SwitchCase "\n"}*>
  otherwise : <Strategy>
end>

  SwitchCase.SwitchCase =
<case <Strategy>:
  <Strategy>>

context-free syntax
  Strategy.MultiMatchTerm =
<match <MatchOrder> <Term>
  <{MatchCase "\n"}+>
end>

  MatchOrder.Specificity = <specificity>

//  MatchCase.MatchCase = <case <Term>: <Strategy>>

context-free priorities
  { Strategy.AnnoCong Strategy.ExplodeCong }
> { Strategy.Match Strategy.Build }
> Strategy.BA
> Strategy.AM
> Strategy.Seq
> {right:
   Strategy.Choice
   Strategy.LChoice
   Strategy.RChoice
   Strategy.GuardedLChoice
  }

context-free priorities
  Strategy.AnnoCong <0>
  .> { Strategy.Match Strategy.Build Strategy.Assign },

  Strategy.ExplodeCong <0>
  .> { Strategy.Match Strategy.Build Strategy.Assign }
