module sugar/dynamic-rules

imports
  core/identifiers
  core/terms
  core/signatures
  core/strategies
  sugar/strategies
  sugar/rules

template options
  tokenize: ")("

context-free sorts ScopeLabels
context-free syntax
  Strategy.DynRuleScope =
<{| <ScopeLabels>
: <Strategy>
|}>

  ScopeLabels = {DynRuleScopeId ", "}*

  ScopeLabels.ScopeLabels = <~<Term>>

context-free sorts DynRuleDef DynRuleId DynRuleScopeId
context-free syntax

  Strategy.GenDynRules =
    <rules(<DynRuleDef*>)>
  DynRuleDef.AddScopeLabel =
    <<SId> + <Term>>
  DynRuleDef.UndefineDynRule =
    <<DynRuleId> :- <Term>>
  DynRuleDef.SetDynRule =
    <<DynRuleId> : <Rule>>
  DynRuleDef.AddDynRule =
    <<DynRuleId> :+ <Rule>>
  DynRuleDef.SetDynRuleMatch =
    <<DynRuleId> : <Term>>
  DynRuleDef.DynRuleAssign =
    <<DynRuleId> := <Term>>
  DynRuleDef.DynRuleAssignAdd =
    <<DynRuleId> :+= <Term>>
  DynRuleDef.SetDynRuleDepends =
    <<DynRuleId> : <Rule> depends on <Term>>
  DynRuleId.LabeledDynRuleId =
    <<RuleDec> . <Term>>
  DynRuleId.AddLabelDynRuleId =
    <<RuleDec> + <Term>>
  DynRuleId.DynRuleId = RuleDec
  DynRuleScopeId.LabeledDynRuleScopeId =
    <<Id> . <Term>>
  DynRuleScopeId.DynRuleScopeId = Id

context-free sorts RuleDec
context-free syntax

  RuleDec.RDecNoArgs = SId
  RuleDec.RDec = <<SId>(<{Typedid ", "}*> )>
  RuleDec.RDecT = <<SId>(<{Typedid ", "}*> | <{Typedid ", "}*>)>

context-free sorts RuleNames
context-free syntax

  RuleNames = {SId ", "}*
  RuleNames.RuleNames = <~<Term>>
  Strategy.DynRuleIntersectFix = </<RuleNames>\\* <Strategy>>

syntax
  // no space after RuleNames
  Strategy-CF.DynRuleUnionFix =
  "\\" LAYOUT?-CF RuleNames-CF "/*" LAYOUT?-CF Strategy-CF


  // 1 space after RuleNames
  Strategy-CF.DynRuleUnionFix1 =
  "\\" LAYOUT?-CF RuleNames-CF " /*" LAYOUT?-CF Strategy-CF

  // no space after RuleNames
  Strategy-CF.DynRuleIntersectUnionFix =
  "/"  LAYOUT?-CF RuleNames-CF LAYOUT?-CF "\\"
      LAYOUT?-CF RuleNames-CF "/*" LAYOUT?-CF Strategy-CF

  // 1 space after RuleNames
  Strategy-CF.DynRuleIntersectUnionFix1 =
  "/" LAYOUT?-CF RuleNames-CF LAYOUT?-CF "\\"
      LAYOUT?-CF RuleNames-CF " /*" LAYOUT?-CF Strategy-CF

context-free syntax

  Strategy.DynRuleIntersect =
    <<Strategy> /<RuleNames>\\ <Strategy>> {right}
  Strategy.DynRuleUnion =
    <<Strategy> \\<RuleNames>/ <Strategy>> {right}
  Strategy.DynRuleIntersectUnion =
    <<Strategy> /<RuleNames>\\<RuleNames>/ <Strategy>> {right}

context-free priorities
     Strategy.BA
   > { Strategy.DynRuleIntersectFix Strategy.DynRuleUnionFix }
   > Strategy.AM
   > Strategy.DynRuleIntersect
   > Strategy.DynRuleUnion
   > Strategy.DynRuleIntersectUnion
   > Strategy.Seq

