module type-preserving

language StrategoLang

fixture [[
  module test

  signature
    sorts
      List(*)
      Option(*)
      PolyType(a)
      Tuple(*, *)
      Tuple()
    constructors
      One : a -> PolyType(a)
      Cons : a * List(a) -> List(a)
      Nil : List(a)
      Some : a -> Option(a)
      None : Option(a)

  rules
  [[...]]
]]

test Type preserving generic traversal with explicit recursion [[
  spinetd(TP) :: TP
  spinetd(s) =
    s; try(one(spinetd(s)))

  try(a -> a) :: a -> a
  try(s) = s <+ id
]] 0 errors
   0 warnings
   has origin locations

test Type preserving generic traversal with Rec construct [[
  somespinetd(TP) :: TP
  somespinetd(s) =
    rec x(s; try(some(x)))

  try(a -> a) :: a -> a
  try(s) = s <+ id
]] 0 errors
   0 warnings
   has origin locations

test Simple type preserving tracking [[
  at-depth(Tuple() -> int, TP) :: TP
  at-depth(depth, s) =
      !(<depth> (), <id>)
    ; ?(_, <id>)

  topdown(TP) :: TP
  topdown(s) = fail
]] 0 errors
   0 warnings
   has origin locations

//test Complicated type preserving tracking [[
//  at-depth(Tuple() -> int, TP) :: TP
//  at-depth(depth, s) =
//      !(<depth> (), <id>)
//    ; topdown(
//        {d :
//           ?(0, <s> )
//        <+ ?(d, <id>); all(!(<dec> d, <id>))
//        }
//      )
//
//  topdown(TP) :: TP
//  topdown(s) = fail
//]] 0 errors
//   0 warnings
//   has origin locations