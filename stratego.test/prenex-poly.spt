module prenex-poly

language StrategoLang

fixture [[
  module test

  signature
    sorts
      PolyType(a)
    constructors
      One : a -> PolyType(a)

  rules
  [[...]]
]]

test untyped map [[
    internal map(s) = [s | map(s)] <+ ?[]

    test-map :: ? -> List(string)
    test-map = ![1,2,3]; map(!"hi!")
]] 0 errors
   0 warnings
   has origin locations

test typed map [[
    internalmap(a -> b) :: List(a) -> List(b)
    internalmap(s) = [s | internalmap(s)] <+ ?[]

    test-map :: ? -> List(string)
    test-map = ![1,2,3]; internalmap(!"hi!")
    // `map`'s type is ideally instantiated as `(int -> string) List(int) -> List(string)`
    // but `(? -> string) List(?) -> List(string)` is also possible, since `!"hi!" :: ? -> string` by itself
]] 0 errors
   0 warnings
   has origin locations

test untyped collect-all [[
    internal mapconcat(s) = fail

    internal collect-all(s) = ?t@_#(<id>); mapconcat(collect-all(s)); (![<s> t | <id>] <+ id)

    test-collect-all :: ? -> List(string)
    test-collect-all = ![1,2,3]; collect-all(!"hi!")
]] 0 errors
   0 warnings
   has origin locations

test typed collect-all [[
    internalconc :: List(a) * List(a) -> List(a)
    internalconc = fail

    internalmapconcat(a -> List(b)) :: List(a) -> List(b)
    internalmapconcat(s): [t@_#(c*) | t] -> <internalconc> (<s> t, <internalmapconcat(s)> c*)
    internalmapconcat(s): [] -> []

    internalcollect-all(? -> b) :: ? -> List(b)
    internalcollect-all(s) = ?t@_#(<id>); internalmapconcat(internalcollect-all(s)); (![<s> t | <id>] <+ id)

    test-collect-all :: ? -> List(string)
    test-collect-all = ![1,2,3]; internalcollect-all(!"hi!")
]] 0 errors
   0 warnings
   has origin locations

test build an option [[
    MkSome :: b -> Option(b)
    MkSome: c -> Some(c)
]] 0 errors
   0 warnings
   has origin locations

test build an option with wrong type [[
    MkSome :: a -> Option(b)
    MkSome: c -> [[Some]](c)
]] 1 error at #1
   0 warnings
   has origin locations

test type-ascribe local type variable [[
    MkSome :: b -> Option(b)
    MkSome: c -> Some(c :: b)
]] 0 errors
   0 warnings
   has origin locations

test Same type variable in type, strategy type, and local variable should not interfere [[
    MkPolyType :: a -> PolyType(a)
    MkPolyType: a -> One(a)
]] 0 errors
   0 warnings
   has origin locations

test Cannot cast to type variable [[
    MkPolyType :: ? -> PolyType(a)
    MkPolyType: a -> One([[a]])
]] 1 error at #1
   0 warnings
   has origin locations
