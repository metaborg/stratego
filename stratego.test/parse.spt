module parse

language StrategoLang

test parse [[

]] parse fails

test specification [[
  specification
]] parse succeeds

test As and Explode 1 [[
  specification
  
  strategies

  a = ?a@a#(a){}
]] parse to
  Specification([
    Strategies([
      SDefNoArgs("a",
        Match(
          As(Var("a"),
          AnnoList(Explode(Var("a"),Var("a")), []))))
    ])
  ])

test As and Explode [[
  specification
  
  strategies
  
  a = ?a@a#(a)
]] parse to
  Specification([
    Strategies([
      SDefNoArgs("a",
        Match(
          As(Var("a"),
          NoAnnoList(Explode(Var("a"),Var("a"))))))
    ])
  ])

test Tuple type [[
  specification
  
  strategies
  
  a :: ? * ? * ? -> ? * ? * ?
]] parse succeeds

test As and Anno [[
  specification
  
  strategies
  
  a = ?a@a{a}
]] parse to
  Specification([
    Strategies([
      SDefNoArgs("a",
        Match(
          As(Var("a"),
          AnnoList(Var("a"),[Var("a")]))))
    ])
  ])

test As and Anno [[
  specification
  
  strategies
  
  a = ?a@a{^a}
]] parse to
  Specification([
    Strategies([
      SDefNoArgs("a",
        Match(
          As(Var("a"),
          Anno(Var("a"),Var("a")))))
    ])
  ])

test As and Anno [[
  specification
  
  strategies
  
  insertCasts-Call-:
    (c@Call(s, s1*), FunTType(st*, tt*, t1, t2)) -> c
]] parse to
  Specification([
    Strategies([
      RDefNoArgs("insertCasts-Call-",
        Rule(
          NoAnnoList(Tuple([
            As(Var("c"), NoAnnoList(Op("Call", [Var("s"), Var(ListVar("s1*"))])))
          , NoAnnoList(Op("FunTType", [Var(ListVar("st*")), Var(ListVar("tt*")), Var("t1"), Var("t2")]))]))
        , Var("c"),[])
      )
    ])
  ])

test BuildDefault [[
  specification
  
  strategies
  
  a = ?_()
]] parse to
  Specification([
    Strategies([
      SDefNoArgs("a",
        Match(
          BuildDefault(NoAnnoList(Tuple([])))))
    ])
  ])

test BuildDefault [[
  specification
  
  strategies
  
  a = ?_(); !_()
]] parse to
  Specification([
    Strategies([
      SDefNoArgs("a",
        Seq(
          Match(
            BuildDefault(NoAnnoList(Tuple([])))),
          Build(
            BuildDefault(NoAnnoList(Tuple([]))))))
    ])
  ])

test BuildDefault [[
  specification

  overlays

  A(a) = _ a
]] parse to
  Specification([
    Overlays([
      Overlay("A", ["a"],
        BuildDefault(Var("a")))
    ])
  ])

test BuildDefault, not Var("_a") [[
  specification

  overlays

  A(a) = _a
]] parse to
  Specification([
    Overlays([
      Overlay("A", ["a"],
        BuildDefault(Var("a")))
    ])
  ])

test SDefT, not SDefP, when no term arguments are given [[
  specification
  
  strategies
  
  a(|) = ![]
]] parse to
  Specification([
    Strategies([
      SDefT("a", [], [],
        Build(NoAnnoList(List([]))))
    ])
  ])

test SDefP with a mix of term patterns [[
  specification
  
  strategies
  
  a(|_, b, Cons(_, _)) = ![]
]] parse succeeds

test the with strategy [[
  specification
  
  strategies
  
  a(|) = with(![])
]] parse to
  Specification([
    Strategies([
      SDefT("a", [], [],
        With(Build(NoAnnoList(List([])))))
    ])
  ])

test a with strategy call [[
  specification
  
  strategies
  
  a(|) = with(![], ![])
]] parse to
  Specification([
    Strategies([
      SDefT("a", [], [],
        Call(SVar("with"), [Build(NoAnnoList(List([]))), Build(NoAnnoList(List([])))]))
    ])
  ])

test between type ascription and assign [[
  specification
  
  strategies
  
  a(|) = (a := b :: C())
]] parse to
  Specification([
    Strategies([
      SDefT("a", [], [],
        Assign(Var("a"), TypeAscription(Var("b"), Sort("C", []))))
    ])
  ])

test between type ascription, assign and app [[
  specification
  
  strategies
  
  a(|) = (a := <a> b :: C())
]] parse to
  Specification([
    Strategies([
      SDefT("a", [], [],
        Assign(Var("a"), TypeAscription(App(CallNoArgs(SVar("a")), Var("b")), Sort("C", []))))
    ])
  ])

test between annotation congruence and App [[
  specification
  
  strategies
  
  a(|) = (a := <a> C(){"hi"})
]] parse to
  Specification([
    Strategies([
      SDefT("a", [], [],
        Assign(Var("a"), App(CallNoArgs(SVar("a")), AnnoList(Op("C", []), [NoAnnoList(Str("\"hi\""))]))))
    ])
  ])

test between annotation congruence and BA [[
  specification
  
  strategies
  
  a(|) = <a> C(){"hi"}
]] parse to
  Specification([
    Strategies([
      SDefT("a", [], [],
        BA(CallNoArgs(SVar("a")), AnnoList(Op("C", []), [NoAnnoList(Str("\"hi\""))])))
    ])
  ])

test between explode congruence and App [[
  specification
  
  strategies
  
  a(|) = (a := <a> c#("hi"))
]] parse to
  Specification([
    Strategies([
      SDefT("a", [], [],
        Assign(Var("a"), App(CallNoArgs(SVar("a")), NoAnnoList(Explode(Var("c"), NoAnnoList(Str("\"hi\"")))))))
    ])
  ])

test between explode congruence and BA [[
  specification
  
  strategies
  
  a(|) = <a> c#("hi")
]] parse to
  Specification([
    Strategies([
      SDefT("a", [], [],
        BA(CallNoArgs(SVar("a")),NoAnnoList(Explode(Var("c"),NoAnnoList(Str("\"hi\""))))))
    ])
  ])
