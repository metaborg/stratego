module desugar

imports
  libstratego-lib
  libstrc
  libspoofax/term/origin

signature constructors

  FromMetaExpr     : Term -> Term
  ToMetaExpr       : Term -> Term
  FromTerm         : Term -> Term
  ToTerm           : Term -> Term
  FromMetaListExpr : Term -> Term
  ToMetaListExpr   : Term -> Term
  FromBuild        : Term -> Term
  ToBuild          : Term -> Term
  FromStrategy     : Term -> Term
  ToStrategy       : Term -> Term
  meta-var         : String -> Term
  meta-listvar     : String -> Term

rules

  basic-desugar-top =
    topdown(try(origin-track-forced(basic-desugar)))

  basic-desugar:
    SDef(x, a*, s) -> SDefT(x, a*, [], s)

  basic-desugar:
    SDefP(x, s*, t*, s) -> SDefT(x, s*, t'*, s')
  where
    (t'*, s') := <transform-P-to-T-s(|s)> t*

  basic-desugar:
    RDef(x, a*, s) -> SDefT(x, a*, [], SRule(s))

  basic-desugar:
    RDefP(x, s*, t*, RuleNoCond(a, b)) -> SDefT(x, s*, t'*, Rule(a, b, [w*]))
  where
    (t'*, w*) := <transform-P-to-T-r> t*

  basic-desugar:
    RDefP(x, s*, t*, Rule(a, b, r*)) -> SDefT(x, s*, t'*, Rule(a, b, [w*, r*]))
  where
    <is-list> r*;
    (t'*, w*) := <transform-P-to-T-r> t*

  basic-desugar:
    RDefP(x, s*, t*, Rule(a, b, r)) -> SDefT(x, s*, t'*, Rule(a, b, [w*, WhereClause(r)]))
  where
    <not(is-list)> r;
    (t'*, w*) := <transform-P-to-T-r> t*

  basic-desugar:
    RDefT(x, s*, t*, s) -> SDefT(x, s*, t*, SRule(s))

  basic-desugar:
    RDec(x, a*) -> RDecT(x, a*, [])

  basic-desugar:
    SDefNoArgs(x, s) -> SDefT(x, [], [], s)

  basic-desugar:
    RDefNoArgs(x, s) -> SDefT(x, [], [], SRule(s))

  basic-desugar:
    Rule(x, y, z) -> Rule(x, y, [WhereClause(z)])
    where
    	<not(is-list)> z

  basic-desugar:
    OverlayNoArgs(x, o) -> Overlay(x, [], o)

  basic-desugar:
    RDecNoArgs(x) -> RDecT(x, [], [])

  basic-desugar:
    Call(x, s*) -> CallT(x, s*, [])

  basic-desugar:
    CallNoArgs(x) -> CallT(x, [], [])

  basic-desugar:
    ListVar(x) -> x

  basic-desugar:
    DefaultVarDec(x) -> VarDec(x, ConstType(SortNoArgs("ATerm")))

  basic-desugar:
    RuleNoCond(t1, t2) -> Rule(t1, t2, [])

  basic-desugar: //TODO: resugar rule for pretty-printing?
    LRule(rule) -> Scope(lhs-vars, SRule(desugared-rule))
    where 
    	desugared-rule@Rule(lhs,_,_) := <basic-desugar-top> rule;
    	lhs-vars := <collect-all(?Var(<id>))> lhs 

  basic-desugar:
    Choice(s1, s2) -> <try(basic-desugar)> GuardedLChoice(s1, Id(), s2)

  basic-desugar:
    LChoice(s1, s2) -> <try(basic-desugar)> GuardedLChoice(s1, Id(), s2)

  basic-desugar:
    RChoice(s1, s2) -> <try(basic-desugar)> GuardedLChoice(s2, Id(), s1)

  basic-desugar:
    CondChoice(c, s1, s2) -> <try(basic-desugar)> GuardedLChoice(Where(c), s1, s2)

  basic-desugar:
    IfThen(c, s1) -> <try(basic-desugar)> GuardedLChoice(Where(c), s1, Id())

  basic-desugar:
    GuardedLChoice(Where(Not(c)), s1, s2) -> GuardedLChoice(Where(c), s2, s1)

  basic-desugar:
    GuardedLChoice(Not(c), s1, s2) -> GuardedLChoice(Where(c), s2, s1)

  basic-desugar:
    ToMetaExpr(t) -> ToMetaExpr(<extract-meta-expr-escapes> t)

  basic-desugar:
    ToBuild(t) -> ToBuild(<extract-meta-expr-escapes> t)

  basic-desugar:
    ToTerm(t) -> ToTerm(<extract-meta-expr-escapes> t)

  basic-desugar:
    ToMetaListExpr(t) -> ToMetaListExpr(<extract-meta-expr-escapes> t)

  basic-desugar:
    ToStrategy(t) -> ToStrategy(<extract-meta-expr-escapes> t)
  
  basic-desugar:
    SwitchChoiceNoOtherwise(init, c*) ->
    <basic-desugar> SwitchChoice(init, c*, Fail())

  basic-desugar:
    SwitchChoice(init, [SwitchCase(c, s) | c*], o) ->
    Seq(init, GuardedLChoice(c, s, SwitchChoice(Id(), c*, o)))

  basic-desugar:
    SwitchChoice(init, [], o) -> Seq(init, o)

  // HACK: eliminate embedded languages
  extract-meta-expr-escapes:
    t -> t'
    with
      t' := <collect-om(?FromTerm(_) + ?FromMetaExpr(_) + ?FromBuild(_)
                      + ?FromMetaListExpr(_) + ?FromStrategy(_)
                      + \meta-var(x) -> Var(x)\
                      + \meta-listvar(x) -> Var(x)\, conc)> t

