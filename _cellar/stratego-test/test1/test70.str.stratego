module switch-semantics-test
imports libstratego-lib
strategies

  main =
  test-suite(!"switch construct testsuite",
    test-woow
  ; test-wow
  ; test-failbranch
  ; test-nested
  ; test-switch-in-let
  )

  test-woow =
    apply-test(
      switch-woow
    | "switch-woow int",
      3,
      101)
  ; apply-test(
      switch-woow
    | "switch-woow string",
      "three",
      "string case failed")
  ; apply-and-fail(
      switch-woow
    | "switch-woow real",
      3.5)

  test-wow =
    apply-test(
      switch-wow
    | "switch-wow int",
      3,
      101)
  ; apply-test(
      switch-wow
    | "switch-wow string",
      "three",
      "string case failed")
  ; apply-test(
      switch-wow
    | "switch-wow real",
      3.5,
      "otherwise case")

  test-failbranch =
    apply-and-fail(
      switch-intfail
    | "switch-intfail int",
      3)
  ; apply-test(
      switch-intfail
    | "switch-intfail string",
      "three",
      "string case failed")
  ; apply-test(
      switch-intfail
    | "switch-intfail real",
      3.5,
      "otherwise case")

  test-nested =
    apply-test(
      switch-nested
    | "switch-nested int",
      3,
      101)
  ; apply-test(
      switch-nested
    | "switch-nested string",
      "three",
      "otherwise case")

  test-switch-in-let =
    apply-test(
      switch-in-let
    | "switch-in-let"
    , [1,2]
    , [2,2]
    )

  switch-woow =
    ?x
  ; !100
  ; switch !x
      case is-int : <add> (<id>, 1) <+ !-1
      case is-string : <strcat> (<id>, "should fail") <+ !"string case failed"
    end

  switch-wow =
    ?x
  ; !100
  ; switch !x
      case is-int : <add> (<id>, 1) <+ !-1
      case is-string : <strcat> (<id>, "should fail") <+ !"string case failed"
      otherwise : !"otherwise case"
    end

  switch-intfail =
    ?x
  ; !100
  ; switch !x
      case is-int : fail
      case is-string : <strcat> (<id>, "should fail") <+ !"string case failed"
      otherwise : !"otherwise case"
    end

  switch-nested =
    ?x
  ; !100
  ; switch !x
      case
        switch !"foo"
          case is-int : fail
          case is-string : fail
        end          : !"nested case condition"
      case is-int : <add> (<id>, 1) <+ !-1
      otherwise : !"otherwise case"
    end

  switch-in-let =
    let asd = switch id 
                case 1    : !2
		otherwise : id
              end
    in map(asd)
    end
