module test72
imports libstratego-lib
signature
  constructors
    Program : Block -> Program
    Call    : Id * List(Exp) -> Call
    Stats   : List(Stat) -> Stats
    Block   : Stats -> Block
    Proc    : Call -> Stat
            : Block -> Stat
    Assign  : Id * Exp -> Stat
    VarDecl : Id * Type -> Stat
    Void    : Type
            : Call -> Exp
    Var     : Id -> Exp
            : String -> Id
    Int     : String -> Exp
    TpInt   : Type
    Add     : Exp * Exp -> Exp

strategies

  propconst-program =
    Program(propconst)

  propconst = 
    propconst-special
    <+ all(propconst); try(propconst-eval)

  propconst-special =
    PropConst
    <+ propconst-stats
    <+ propconst-declaration
    <+ propconst-assign 
    <+ EvalAdd

  propconst-stats = 
    Stats({| PropConst : map(propconst) |})

  propconst-declaration = 
    ?VarDecl(x, t)
    ; rules( PropConst+x :- Var(x) )

  propconst-assign = 
    Assign(?x, propconst => e)
    ; debug(!"propconst-assign: ")
    ; if <is-value> e then
        rules( PropConst.x : Var(x) -> e )
      else
        rules( PropConst.x :- Var(x) )
      end
    ; dr-print-rule-set(|"PropConst")

  is-value = 
    ?Int(_)

  propconst-eval = 
    EvalAdd

  EvalAdd :
    Add(Int(i), Int(j)) -> Int(<addS>(i, j))

strategies

  main = 
    test-suite(!"test72",
      test1
    )

  test1 = 
    apply-test(!"test1"
	, propconst
	, !Stats([VarDecl("a", TpInt), 
		  Assign("a", Int("2")),
		  Assign("a", Add(Var("a"), Call("readInt", ()))),
		  Assign("b", Var("a"))])
	, !Stats([VarDecl("a", TpInt), 
		  Assign("a", Int("2")),
		  Assign("a", Add(Int("2"), Call("readInt", ()))),
		  Assign("b", Var("a"))])
	)
		  
