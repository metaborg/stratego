module stratego/core/signatures

imports nabl2-lib

rules

  Sdecl[[ Sorts(srts) ^ (s_mod) ]] :=
    Map(Sort)[[ srts ^ (s_mod) ]].
  
  Sdecl[[ Constructors(opdecls) ^ (s_mod) ]] :=
    Map(OpDecl)[[ opdecls ^ (s_mod) ]].

rules // sorts
    
  Sort[[ SortVar(x) ^ (s_mod)  ]] :=
    Sort{x} <- s_mod,
    false | warning $[sorts should start with uppercase letter] @x.
    
  Sort[[ SortNoArgs(x) ^ (s_mod) ]] :=
    Sort{x} <- s_mod.
    
  Sort[[ Sort(x, srts) ^ (s_mod) ]] :=
    Sort{x} <- s_mod,
    false | warning $[sort arguments not supported yet] @srts.

rules // sort references

  SortRef[[ SortVar(x) ^ (s_mod) : x ]] :=
    Sort{x} -> s_mod,
    Sort{x} |-> d,
    false | warning $[sorts should start with uppercase letter] @x.
    
  SortRef[[ SortNoArgs(x) ^ (s_mod) : x ]] :=
    Sort{x} -> s_mod,
    Sort{x} |-> d.
    
  SortRef[[ Sort(x, srts) ^ (s_mod) : x ]] :=
    Sort{x} -> s_mod,
    Sort{x} |-> d,
    false | warning $[sort arguments not supported yet] @srts.

rules // constructor declarations
    
  OpDecl[[ OpDecl(c, t) ^ (s_mod) ]] :=
    Op{c} <- s_mod,
    Op{c} : ty,
    Type[[ t ^ (s_mod) : ty ]].
    
  OpDecl[[ OpDeclQ(c, t) ^ (s_mod) ]] :=
    Op{c} <- s_mod,
    Op{c} : ty,
    Type[[ t ^ (s_mod) : ty ]]. 
    
//  OpDecl[[ OpDeclInj(t) ^ (s_mod) ]] :=
//    Op{c} <- s_mod,
//    Op{c} : ([], t). // to do: process type
//  to do: deal with injections

//    Opdecl.ExtOpDecl    = <external <Id> : <Type>>
//    Opdecl.ExtOpDeclQ   = <external <String> : <Type>>
//    Opdecl.ExtOpDeclInj = <external : <Type>>
    
rules // types

  Type[[ ConstType(srt) ^ (s_mod) : ConstType(ty)]] :=
    SortRef[[ srt ^ (s_mod) : ty ]].
    
  Type[[ FunType(args, t) ^ (s_mod) : FunType(tys, ty) ]] :=
    MapTy(Type)[[ args ^ (s_mod) : tys ]],
    Type[[ t ^ (s_mod) : ty]].
    

    
 
    
    