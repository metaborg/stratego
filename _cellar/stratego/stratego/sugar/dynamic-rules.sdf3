module stratego/sugar/dynamic-rules

imports
  stratego/core/identifiers
  stratego/core/terms
  stratego/core/signatures
  stratego/sugar/strategies
  stratego/sugar/rules
 
  sorts ScopeLabels
  templates
    Strategy.DynRuleScope = 
      <{| <ScopeLabels> 
        : <Strategy>  
        |}>
    
    ScopeLabels = 
      <<DynRuleScopeId*; separator=",">>
      
    ScopeLabels.ScopeLabels = <~ <Term>>
  
  context-free syntax

    "{|" ScopeLabels ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}

    {DynRuleScopeId ","}*   -> ScopeLabels
    "~" Term		    -> ScopeLabels {cons("ScopeLabels")}

  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
  
  templates
  
    Strategy.GenDynRules = 
      <rules ( <DynRuleDef*> )>
    DynRuleDef.AddScopeLabel = 
      <<Id> + <Term>>
    DynRuleDef.UndefineDynRule = 
      <<DynRuleId> :- <Term>>
    DynRuleDef.SetDynRule = 
      <<DynRuleId> : <Rule>>
    DynRuleDef.AddDynRule = 
      <<DynRuleId> :+ <Rule>>
    DynRuleDef.SetDynRuleMatch = 
      <<DynRuleId> : <Term>>
    DynRuleDef.DynRuleAssign = 
      <<DynRuleId> := <Term>>
    DynRuleDef.DynRuleAssignAdd = 
      <<DynRuleId> :+= <Term>>
    DynRuleDef.SetDynRuleDepends =  
      <<DynRuleId> : <Rule> depends on <Term>>
    DynRuleId.LabeledDynRuleId = 
      <<RuleDec> . <Term>>
    DynRuleId.AddLabelDynRuleId = 
      <<RuleDec> + <Term>>
    DynRuleId.DynRuleId = 
      <<RuleDec>>
    DynRuleScopeId.LabeledDynRuleScopeId = 
      <<Id> . <Term>>
    DynRuleScopeId.DynRuleScopeId = 
      <<Id>>
 
  templates
  
    RuleDec.RDecNoArgs = <<Id>>
    RuleDec.RDec = <<Id>(<Typedid*; separator=", "> )>
    RuleDec.RDecT = <<Id>(<Typedid*; separator=", "> | <Typedid*; separator=", ">)>

  sorts RuleNames
  
  templates
  
    RuleNames = <<Id*; separator=",">>
    RuleNames.RuleNames = <~ <Term>>
    Strategy.DynRuleIntersectFix = </ <RuleNames> \\* <Strategy>>  
  
  context-free syntax
    {Id ","}*				  -> RuleNames
    "~" Term				  -> RuleNames {cons("RuleNames")}

    "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}

  syntax
    %% no space after RuleNames
    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
      -> <Strategy-CF> {cons("DynRuleUnionFix")}

    %% 1 space after RuleNames
    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
      -> <Strategy-CF> {cons("DynRuleUnionFix")}

    %% no space after RuleNames
    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}

    %% 1 space after RuleNames
    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}

  templates 
  
    Strategy.DynRuleIntersect = 
      <<Strategy> / <RuleNames> \\ <Strategy>> {right}
    Strategy.DynRuleUnion = 
      <<Strategy> \\ <RuleNames> / <Strategy>> {right}
    Strategy.DynRuleIntersectUnion = 
      <<Strategy> / <RuleNames> \\ <RuleNames> / <Strategy>> {right}

  priorities
    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")}
  > {

    %% no space after RuleNames
    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
      -> <Strategy-CF> {cons("DynRuleUnionFix")}

    %% 1 space after RuleNames
    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
      -> <Strategy-CF> {cons("DynRuleUnionFix")}

    %% no space after RuleNames
    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}

    %% 1 space after RuleNames
    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}

    }
  > <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("AM")}

  // context-free priorities
  //   Strategy.BA
  // > Strategy.DynRuleIntersectFix
  // > Strategy.AM
  // > Strategy.DynRuleIntersect
  // > Strategy.DynRuleUnion
  // > Strategy.DynRuleIntersectUnion
  // > Strategy.Seq

