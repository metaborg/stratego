module stratego/core/strategies

imports
  stratego/core/terms
  stratego/core/constants
  stratego/core/signatures
  stratego/core/identifiers

  sorts Def
  templates
    Def = <<StrategyDef>>
    
    SVar.SVar = <<Id>>
    
    Strategy.Let = <
      let <Def*> 
        in <Strategy> 
       end
    >
        
    Strategy.CallT = 
      <<SVar>(<Strategy*; separator=", ">|<Term*; separator=", ">)>
      
    Strategy.CallDynamic = 
      <call(<Term>|<Strategy*; separator=", ">|<Term*; separator=", ">)>
    
  sorts StrategyDef
  templates
    StrategyDef.SDefT = <
      <Id>(<Typedid*; separator=", "> | <Typedid*; separator=", ">) = 
         <Strategy>
    >
  
    Def.AnnoDef = 
      <<Anno+> <StrategyDef>>
  
    StrategyDef.ExtSDefInl = <
      external <Id>(<Typedid*; separator=", "> | <Typedid*; separator=", ">) = 
         <Strategy>
    >
  
    StrategyDef.ExtSDef = 
      <external <Id>(<Typedid*; separator=", "> | <Typedid*; separator=", ">)>
  
    StrategyDef.ExtSDef = 
      <external <EmptyId>(<Typedid*; separator=", "> | <Typedid*; separator=", ">)> 
  

  sorts EmptyId
  lexical syntax 
    EmptyId =

  sorts Anno  
  templates
    Anno.Extend = <extend>
    Anno.Override = <override>
    Anno.Internal = <internal>
    %%  "sealed"      -> Anno {cons("Sealed")}
    %%  "extensible"  -> Anno {cons("Extensible")}
    %%  "overridable" -> Anno {cons("Overridable")}

  lexical syntax   
    "extend"      -> Keyword
    "override"    -> Keyword
    "internal"    -> Keyword
    "sealed"      -> Keyword
    "extensible"  -> Keyword
    "overridable" -> Keyword

  lexical restrictions 
    "extend"
    "override"
    "internal"
    "sealed"
    "extensible"
    "overridable" -/- [a-zA-Z0-9\'\-\_]

  sorts Typedid
  templates
    Typedid.VarDec = <<ID> : <Type>>


  sorts Strategy SVar StrategyParen StrategyMid 
  templates
	  StrategyParen.ParenStrat = <(<Strategy>)>
	  Strategy.Fail = <fail>
	  Strategy.Id = <id>
	  Strategy.ProceedT = <proceed ( <Strategy*; separator=","> | <Term*; separator=","> )> {prefer}
	  Strategy.ProceedNoArgs = <proceed> {prefer}
	  Strategy.Match = <?<Term>>
	  Strategy.Build = <!<Term>>
	  Strategy.Scope = <{<ID*; separator=",">: <Strategy> }>
	  Strategy.Seq = <<Strategy>; <Strategy>> {right}
	  Strategy.GuardedLChoice = [[Strategy] < [StrategyMid] + [Strategy]] {right}
	  StrategyMid = <<Strategy>>
	  Strategy.PrimT = <prim( <String> , <Strategy*; separator=","> | <Term*; separator=","> )>
	  Strategy.Some = <some( <Strategy> )>
	  Strategy.One = <one( <Strategy> )>
	  Strategy.All = <all( <Strategy> )>
	  
  context-free priorities
    { Strategy.Build
      Strategy.Match
    }
  > Strategy.Seq
  > {right: 
     Strategy.GuardedLChoice }

  templates
    Strategy.ImportTerm = <import-term ( <ModName> )>
    
    