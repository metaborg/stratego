// https://github.com/MetaBorgCube/metaborg-fsharp/blob/257ce9189b2e6c635cf0e8d72bc4b9a95b3e9922/spoofax/minifsharp/trans/desugar/desugar.str

module desugar

strategies
  concat = id

imports
  src-gen/signatures/minifsharp-sig
  src-gen/signatures/expression-logic-sig
  src-gen/signatures/expression-sig
  src-gen/signatures/pattern-sig
  src-gen/signatures/type-sig

signature
sorts

  BinaryOperation BinaryOperand
  UnaryOperation  UnaryOperand
  PatternTuple  TypeTuple     ExpTuple

constructors

  // Binary Operations

  BinaryOperation       : BinaryOperand * Expression * Expression -> Expression


  PlusOp            : BinaryOperand
  MinOp           : BinaryOperand
  MultOp            : BinaryOperand
  AndOp           : BinaryOperand
  OrOp            : BinaryOperand
  EqualOp           : BinaryOperand
  SmallerOp         : BinaryOperand

  // Unary Operations

  UnaryOperation        : UnaryOperand * Expression -> Expression

  NegativeOp          : BinaryOperand
  NotOp           : BinaryOperand

  // Tuple

  PatternTuple        : PatternTuple -> Pattern
  TypeTuple         : TypeTuple -> Type
  ExpTuple          : ExpTuple -> Expression
  
  // Rule

  Rule            : OuterPattern * Expression -> Rule
  
  // List
  
  EmptyList         : List
  EmptyPatternList            : PatternList
  
  // Argument
  
  Argument          : Identifier * Option(OuterType)-> Argument
  
  // Type
  
  Union             : List(TypedID) -> TypeDefinition

rules

  // Binary Operations

  desugar: Plus(a, b)         -> BinaryOperation(PlusOp(), a, b)
  desugar: Min(a, b)          -> BinaryOperation(MinOp(), a, b)
  desugar: Mult(a, b)         -> BinaryOperation(MultOp(), a, b)
  desugar: And(a, b)          -> BinaryOperation(AndOp(), a, b)
  desugar: Or(a, b)         -> BinaryOperation(OrOp(), a, b)
  desugar: Equal(a, b)        -> BinaryOperation(EqualOp(), a, b)
  desugar: NotEqual(a, b)       -> UnaryOperation(NotOp(), BinaryOperation(EqualOp(), a, b))
  desugar: Smaller(a, b)        -> BinaryOperation(SmallerOp(), a, b)
  desugar: Greater(a, b)        -> BinaryOperation(SmallerOp(), b, a)
  desugar: SmallerEqual(a, b)     -> BinaryOperation(OrOp(), BinaryOperation(SmallerOp(), a, b), BinaryOperation(EqualOp(), a, b))
  desugar: GreaterEqual(a, b)     -> BinaryOperation(OrOp(), BinaryOperation(SmallerOp(), b, a), BinaryOperation(EqualOp(), a, b))
  
  // If Expressions

  desugar: If(condition, a, b)    -> Match(condition, [ Rule(Const(Bool(True())), a)
                                        , Rule(Const(Bool(False())), b)])
  
  // Unary Operations

  desugar: Negative(a)        -> UnaryOperation(NegativeOp(), a)
  desugar: Not(a)           -> UnaryOperation(NotOp(), a)

  // Match Rules

  desugar: Rules(a)           -> a
  desugar: RuleFirst(a, b)      -> Rule(a, b)
  desugar: RulesEscaped(a, None())  -> [a]
  desugar: RulesEscaped(a, Some(b)) -> <concat> [[a], b]
  desugar: RawRule(a,b,None())    -> [Rule(a,b)]
  desugar: RawRule(a,b,Some(c))     -> <concat>[[Rule(a,b)], c]
   
  // List expressions
  
  desugar: List([a|b])          -> Concat(a, <desugar>List(b))
  desugar: List([])           -> EmptyList()
  
  desugar: PatternList([a|b])         -> PatternConcat(a, <desugar>PatternList(b))
  desugar: PatternList([])            -> EmptyPatternList()
  
  // Let Expressions
  
  desugar: LetExp(a @ LetConst(_, _, _))  -> a
  desugar: LetExp(a @ Let(_, _, _, _, _)) -> a
  
  // Tuple

  desugar: OuterPatternTuple(RawPatternTuple(a,b))    -> PatternTuple(<concat> [[a], b])
  desugar: NestedPatternTuple(RawPatternTuple(a,b))     -> PatternTuple(<concat> [[a], b])
  desugar: OuterTypeTuple(RawTypeTuple(a,b))        -> TypeTuple(<concat> [[a], b])
  desugar: NestedTypeTuple(RawTypeTuple(a,b))       -> TypeTuple(<concat> [[a], b])
  desugar: OuterExpTuple(RawExpTuple(a,b))        -> ExpTuple(<concat> [[a], b])
  desugar: NestedExpTuple(RawExpTuple(a,b))         -> ExpTuple(<concat> [[a], b])

  // Arguments
  
  desugar: ArgIdentifier(name)              -> Argument(name, None())
  desugar: TypedArgIdentifier(name, ty)           -> Argument(name, Some(ty))
  
  // Types
  
  desugar: TypeEscaped(x,y)                 -> <desugar>Type(x,y)
  desugar: Type(x,y)                    -> Union(<concat> [[x], y])
  desugar: SingleID(x)                  -> Union([x])
  desugar: SingleEscapedID(x)               -> Union([x])
  
  