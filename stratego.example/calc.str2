module calc

imports
  libstratego-lib

signature
  sorts
    Nat
  constructors
    O : Nat
    S : Nat -> Nat

    Plus : Nat * Nat -> Nat
    Minus : Nat * Nat -> Nat
    Mul : Nat * Nat -> Nat
    Exp : Nat * Nat -> Nat

strategies
  calc: Plus(O(), n) -> n
  calc: Plus(n, O()) -> n
  calc: Plus(S(m), n) -> S(Plus(m, n))

  calc: Minus(O(), O()) -> O()
  calc: Minus(S(n), O()) -> S(n)
  calc: Minus(S(m), S(n)) -> Minus(m, n)
  calc =
    ?Minus(O, S(n))
  ; fatal-err(|"Negative result!")

  calc: Mul(O(), _) -> O()
  calc: Mul(_, O()) -> O()
  calc: Mul(S(m), n) -> Plus(n, Mul(m, n))

  calc: Exp(_, O()) -> S(O())
  calc: Exp(O(), _) -> O()
  calc: Exp(m, S(n)) -> Mul(m, Exp(m, n))

  calculate = innermost(calc)

// extension: Python-esque multiplication of strings
signature
  sorts
    Str
  constructors
    String : string -> Str

    Mul : Nat * Str -> Str
    Append : Str * Str -> Str

strategies
  calc: Mul(O(), String(_)) -> String("")
  calc: Mul(S(n), s@String(_)) -> Append(s, Mul(n, s))

  calc:
    Append(String(s1), String(s2)) -> s3
  where
    s3 := <conc-strings> (s1, s2)
