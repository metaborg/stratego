module example14

signature
  sorts Exp constructors 
    Var  : string -> Exp
    Int  : string -> Exp
    Add  : Exp * Exp -> Exp
    Sub  : Exp * Exp -> Exp
    Lt   : Exp * Exp -> Exp
    Min  : Exp -> Exp         // sugar
    Inc  : Exp -> Exp         // sugar
    Stat : Stat * Exp -> Exp  // statement expressions
  sorts Stat constructors
    Exp    : Exp -> Stat
    Assign : string * Exp -> Stat
    Seq    : Stat * Stat -> Stat
    While  : Exp * Stat -> Stat
    For    : string * Exp * Exp * Stat -> Stat // sugar 
    
rules
  
  desugar : 
    Min(e) -> Sub(Int("0"), e)
  
  desugar : 
    For(x, e1, e2, stat) -> 
    Seq(
      Assign(x, e1),
      While(Lt(Var(x), e2), 
        Seq(stat, Assign(x, Add(Var(x), Int("1"))))
      )
    )
    
  desugar : 
    Inc(Var(x)) -> Stat(Assign(x, Add(Var(x), Int("1"))), Var(x))
    
  desugar : // lifting statement expressions
    stat@<is-simple-stat> -> Seq(stat1, stat2)
    where <oncetd-hd((Stat(stat1, e) -> e))> stat => stat2
    
//rules // errors that are caught by current compiler
//
//  desugar : // constructor with wrong arity
//    Inc(Var(x)) -> Stat(Assign(x, Add(Var(x), Int("1"))))  
    
//rules // rules with typical errors
//
//  desugar : // expression replaced with statement
//    Add(e1, e2) -> Assign("x", e2) 
//    
//  desugar : // expression replace with statement
//    Stat(stat, e) -> stat 
//    
//  desugar : // lifting also applied to expressions
//    stat -> Seq(stat1, stat2)
//    where <oncetd((Stat(stat1, e) -> e))> stat => stat2
//    
//  desugar : // terms with type errors
//    For(x, e1, e2, stat) -> 
//    Seq(
//      Assign(x, e1),
//      While(Gt(Var(x), e2), 
//        Seq(stat, 
//          Assign(
//            Var(x),           // Exp instead of string
//            Add(x,            // string instead of Exp
//                Int(1))))     //  int instead of string
//      )
//    )
    
strategies // 'type' strategies

  is-exp = 
    ?Var(_) <+ ?Int(_) <+ ?Add(_,_) <+ ?Sub(_,_) <+ ?Lt(_,_)
    <+ ?Inc(_) <+ ?Stat(_,_)

  is-stat = 
    ?Assign(_,_) <+ ?Seq(_,_) <+ ?While(_,_) <+ ?For(_,_,_,_) <+ ?Exp(_)
    
  is-simple-stat = is(Stat); 
    (?Assign(_,_) <+ ?Exp(_) <+ ?While(_,_) <+ ?For(_,_,_,_))

rules // 'type' strategies with errors

  is-stat = 
    ?Assign(_,_) <+ ?Seq(_,_) <+ ?While(_,_) <+ ?For(_,_,_,_) <+ ?Exp(_)
    <+ ?Inc(_) // is not a statement

strategies // traversal strategies

  desugar-all = topdown(try(desugar))
  
//  topdown(TP) :: TP
  topdown(? -> ?) :: ? -> ?
  topdown(s|) = s; all(topdown(s))
  
  try(s|) = s <+ id  
  
  oncetd(s|) = s <+ one(oncetd(s))
  
  oncetd-hd(s|) = 
    While(oncetd(s), id) <+ For(oncetd(s),id,id,id) 
    <+ For(id,oncetd(s),id,id) <+ Exp(oncetd(s)) 
    <+ Assign(id, oncetd(s))
  
rules // a typing for the above rules 

  //desugar :: Exp -> Exp
  //desugar :: Stat -> Stat
  
//  desugar :: TP 
//  desugar-all :: TP 
//  topdown(TP) :: TP
//  try(TP) :: TP
 
  //is-stat :: Stat -> Stat
  
  //topdown(? -> ?) :: ? -> ?
  //try(? -> ?) :: ? -> ?
  //try(a -> ?) :: ? -> ?
  
  
//rules 
//
//  Fst :: a * b * c -> a 
//  
//  Fst : (x, y, z) -> x 
//  
//  
//  Snd :: int * string * int -> string
//  
//  Snd : (x, y, z) -> y 
//  
//  foo = <Snd>(1, "b", 3)
  
  
  
  
