module analysis/defs

imports

libstratego-lib
libstrc

libspoofax/term/annotation
libspoofax/stratego/debug

signatures/strategoGT-sig
signatures/sugar/modules-sig
signatures/gradual-types/modules-sig

analysis/utils
analysis/environment
analysis/signatures
analysis/strategies
analysis/terms

strategies // Def

local-insertCasts-Def(|e1):
  (d, st1) -> <local-insertCasts-Def(|e1, st1)> d

local-insertCasts-Def(|e1, st1) = otf12(local-insertCasts-Def-(|e1, st1))

// local-insertCasts-Def :: (|Environment, Store) Def -> Def
local-insertCasts-Def-(|e1, st1):
  AnnoDef(annos, sr) -> (AnnoDef(annos, s'), st2)
  with
    (n, sn, tn) := <nameOf-StrategyDef-RuleDef> sr
  ; if <fetch(?Extend() + ?Override())> annos
      // Leaving this in the env for ProceedT/2 and ProceedNoArgs/0 handling
      then e2 := <local-strat-copy-type(|n, sn, tn, ProceedNoArgs())> e1
      else e2 := e1
    end
  ; (s', st2) := <local-insertCasts-Def(|e2, st1)> sr

local-insertCasts-Def-(|e1, st1):
  d@AnnoDef(_, ExtSDef(_, _, _)) -> (d, st1)

local-insertCasts-Def-(|e1, st1) = local-insertCasts-StrategyDef(|e1, st1)

local-insertCasts-Def-(|e1, st1) = local-insertCasts-RuleDef(|e1, st1)
local-insertCasts-Def-(|e1, st1):
  d@DefHasType(_, _) -> (d, st1)

strategies // StrategyDef

local-insertCasts-StrategyDef(|e1, st1) = otf12(local-insertCasts-StrategyDef-(|e1, st1))

// local-insertCasts-StrategyDef :: (|Environment, Store) Decl -> (Decl, Store)
local-insertCasts-StrategyDef-(|e1, st1):
  SDefT(x, s1*, t1*, s1) -> (SDefT(x, s1*, t1*, s3), st3)
  with
    FunTType(st*, tt*, t1, t2) := <local-strat-lookup(|x{}, <length> s1*, <length> t1*)> e1
  ; s2* := <map(?DefaultVarDec(<id>) <+ ?VarDec(<id>, _))> s1*
  ; t2* := <map(?DefaultVarDec(<id>) <+ ?VarDec(<id>, _))> t1*
  ; e2 := <local-strat-merge-env(local-keep-right)> (e1, <strat-zip-local-new-env> (s2*, st*))
  ; st2 := <local-term-merge-env(local-keep-right);local-current-type(|t1)> (st1, <local-term-zip-local-new-env> (t2*, tt*))
  ; (s2, st3) := <local-insertCasts-Strategy(|e2, st2)> s1
  ; s3 := <insertCastAfter(|<local-current-type> st3, t2)> s2

local-insertCasts-StrategyDef-(|e1, st1):
  SDef(x, s1*, s1) -> (SDef(x, s1*, s3), st3)
  with
    FunTType(st*, [], t1, t2) := <local-strat-lookup(|x{}, <length> s1*, 0)> e1
  ; s2* := <map(?DefaultVarDec(<id>) <+ ?VarDec(<id>, _))> s1*
  ; e2 := <local-strat-merge-env(local-keep-right)> (e1, <strat-zip-local-new-env> (s2*, st*))
  ; st2 := <local-current-type(|t1)> st1
  ; (s2, st3) := <local-insertCasts-Strategy(|e2, st2)> s1
  ; s3 := <insertCastAfter(|<local-current-type> st3, t2)> s2

local-insertCasts-StrategyDef-(|e1, st1):
  SDefNoArgs(x, s1) -> (SDefNoArgs(x, s3), st3)
  with
    FunTType([], [], t1, t2) := <local-strat-lookup(|x{}, 0, 0)> e1
  ; st2 := <local-current-type(|t1)> st1
  ; (s2, st3) := <local-insertCasts-Strategy(|e1, st2)> s1
  ; s3 := <insertCastAfter(|<local-current-type> st3, t2)> s2

local-insertCasts-StrategyDef-(|e1, st1) =
    \ExtSDefInl(name, sargs, targs, body) -> SDefT(name, sargs, targs, body)\
  ; local-insertCasts-StrategyDef(|e1, st1)
  ; (\SDefT(name, sargs, targs, body) -> ExtSDefInl(name, sargs, targs, body)\, id, id)

local-insertCasts-StrategyDef-(|e1, st1):
  d@ExtSDef(_, _, _) -> (d, st1)

strategies // RuleDef

local-insertCasts-RuleDef(|e1, st1) = otf12(local-insertCasts-local-RuleDef-(|e1, st1))

local-insertCasts-local-RuleDef-(|e1, st1):
  RDefNoArgs(x, Rule(trm1, trm2, cs1)) -> (RDefNoArgs(x, Rule(trm3, trm4, cs3)), st4)
  with
    FunTType([], [], t1, t2) := <local-strat-lookup(|x{}, 0, 0)> e1
  ; (trm3, (st2, s*)) := <local-insertCasts-MatchTerm(|e1, <local-current-type(|t1)> st1)> trm1
  ; t3 := <local-current-type> st2
  ; (trm4, st3) := <local-insertCasts-BuildTerm(|e1, st2, t2)> trm2
  ; (cs2, st4)  := <thread-map(local-insertCasts-RuleCond(|e1))> (cs1, <local-current-type(|t3)> st3)
  ; cs3 := <local-RuleDef-local-after-match> (s*, cs2)

local-insertCasts-local-RuleDef-(|e1, st1):
  RDef(x, s1*, Rule(trm1, trm2, cs1)) -> (RDef(x, s1*, Rule(trm3, trm4, cs3)), st4)
  with
    FunTType(st*, [], t1, t2) := <local-strat-lookup(|x{}, <length> s1*, 0)> e1
  ; s2* := <map(?DefaultVarDec(<id>) <+ ?VarDec(<id>, _))> s1*
  ; e2 := <local-strat-merge-env(local-keep-right)> (e1, <strat-zip-local-new-env> (s2*, st*))
  ; (trm3, (st2, s*)) := <local-insertCasts-MatchTerm(|e2, <local-current-type(|t1)> st1)> trm1
  ; t3 := <local-current-type> st2
  ; (trm4, st3) := <local-insertCasts-BuildTerm(|e2, st2, t2)> trm2
  ; (cs2, st4)  := <thread-map(local-insertCasts-RuleCond(|e2))> (cs1, <local-current-type(|t3)> st3)
  ; cs3 := <local-RuleDef-local-after-match> (s*, cs2)

local-insertCasts-local-RuleDef-(|e1, st1):
  RDefT(x, s1*, t1*, Rule(trm1, trm2, cs1)) -> (RDefT(x, s1*, t1*, Rule(trm3, trm4, cs3)), st5)
  with
    FunTType(st*, tt*, t1, t2) := <local-strat-lookup(|x{}, <length> s1*, <length> t1*)> e1
  ; s2* := <map(?DefaultVarDec(<id>) <+ ?VarDec(<id>, _))> s1*
  ; t2* := <map(?DefaultVarDec(<id>) <+ ?VarDec(<id>, _))> t1*
  ; e2 := <local-strat-merge-env(local-keep-right)> (e1, <strat-zip-local-new-env> (s2*, st*))
  ; st2 := <local-term-merge-env(local-keep-right)> (st1, <local-term-zip-local-new-env> (t2*, tt*))
  ; (trm3, (st3, s*)) := <local-insertCasts-MatchTerm(|e2, <local-current-type(|t1)> st2)> trm1
  ; t3 := <local-current-type> st3
  ; (trm4, st4) := <local-insertCasts-BuildTerm(|e2, st3, t2)> trm2
  ; (cs2, st5)  := <thread-map(local-insertCasts-RuleCond(|e2))> (cs1, <local-current-type(|t3)> st4)
  ; cs3 := <local-RuleDef-local-after-match> (s*, cs2)

local-RuleDef-local-after-match: ([], cs) -> cs
local-RuleDef-local-after-match: (s*, cs) -> [WhereClause(<seqs> s*) | cs]

local-insertCasts-RuleCond(|e1) = otf22(local-insertCasts-RuleCond-(|e1))

local-insertCasts-RuleCond-(|e1):
  (WhereClause(s1), st1) -> (WhereClause(s2), st3)
  with
    (s2, st2) := <local-insertCasts-Strategy(|e1, st1)> s1
  ; st3 := <local-current-type(|<local-current-type> st1)> st2

local-insertCasts-RuleCond-(|e1):
  (WithClause(s1), st1) -> (WithClause(s2), st3)
  with
    (s2, st2) := <local-insertCasts-Strategy(|e1, st1)> s1
  ; st3 := <local-current-type(|<local-current-type> st1)> st2