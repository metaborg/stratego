module analysis/terms

imports

libstratego-lib
libstrc
libstratego-aterm

libspoofax/term/annotation
libspoofax/stratego/debug

signatures/strategoGT-sig
signatures/sugar/modules-sig
signatures/gradual-types/signatures-sig
signatures/gradual-types/terms-sig

analysis/utils
analysis/environment
analysis/signatures
analysis/defs
analysis/strategies
analysis/main
immutable/map
immutable/set

strategies // Terms in match position (core)

insertCasts-MatchTerm(|e1, st1) =
    insertCasts-StMatchTerm(|e1, <stMatchTerm-from-st> st1)
  ; (id, st-from-stMatchTerm)

insertCasts-StMatchTerm-Type(|e1):
  ((trm, t), st1) -> <insertCasts-StMatchTerm(|e1, <current-type(|t)> st1)> trm

insertCasts-StMatchTerm-Type(|e1, t):
  (trm, st1) -> <insertCasts-StMatchTerm(|e1, <current-type(|t)> st1)> trm

insertCasts-StMatchTerm(|e1, st1) = otf12(insertCasts-StMatchTerm-(|e1, st1))

insertCasts-StMatchTerm(|e1, st1):
  trm@Var(v) -> (trm, st2)
  with
    t1 := <current-type> st1
  ; if t2 := <term-lookup(|v{})> st1
      then if not(st2 := <term-put(|v{}, <LUB> (t1, t2))> st1)
        then
          <report-Err> (v, VariableBoundToIncompatibleType(t2, t1))
        ; st2 := st1
        end // TODO: do this for both unresolved names and unbound names
      else st2 := <term-put(|v{}, t1)> st1
    end

insertCasts-StMatchTerm(|e1, st1):
  trm@Wld() -> (trm, st1)

insertCasts-StMatchTerm-(|e1, st1):
  Anno(trm1, trm2) -> (trm6, st4)
  with
    (trm3, st2) := <insertCasts-StMatchTerm(|e1, st1)> trm1
  ; (trm4, st3) := <insertCasts-StMatchTerm(|e1, <current-type(|ListT())> st2)> trm2
  ; st4 := <current-type(|<current-type> st2)> st3
  ; if App(c@Cast(_), trm5) := trm3
      then trm6 := App(c, Anno(trm5, trm4))
      else trm6 := Anno(trm3, trm4)
    end

insertCasts-StMatchTerm-(|e1, st1):
  As(v1, trm1) -> (As(v2, trm2), st3)
  with
    (v2, st2) := <insertCasts-StMatchTerm(|e1, st1)> v1
  ; (trm2, st3) := <insertCasts-StMatchTerm(|e1, st2)> trm1

insertCasts-StMatchTerm(|e1, st1):
  Int(_) -> <insertCasts-StMatchTerm-Lit(|e1, st1, IntT())>

insertCasts-StMatchTerm(|e1, st1):
  Real(_) -> <insertCasts-StMatchTerm-Lit(|e1, st1, RealT())>

insertCasts-StMatchTerm(|e1, st1):
  Str(_) -> <insertCasts-StMatchTerm-Lit(|e1, st1, StringT())>

insertCasts-StMatchTerm-Lit(|e1, st1, t1):
  trm -> (trm, <current-type(|t1)> st1)
  with
    t2 := <current-type> st1
  ; if not(<CanCoerce>(t1, t2))
      then <report-Err> (trm, TypeMismatch(t1, t2))
    end

insertCasts-StMatchTerm-(|e1, st1):
  Op(cnstr, trm1*) -> (Op(cnstr, trm2*), st3)
  with
    t1 := <current-type> st1
  ; t* := <constr-lookup(|cnstr, <length> trm1*, t1)> e1
  ; if [ConstrType(t1*, t2)] := t*
    then
      if not(<CanCoerce> (t2, t1))
        then <report-Err> (cnstr, TypeMismatch(t2, t1))
      end
    ; if DynT() := t1
        then t2* := <map(!DynT(<id>))> t1*
        else t2* := t1*
      end
    else if [] := t*
        then err := UnresolvedConstructor(<length> trm1*, t1)
        else err := AmbiguousConstructorUse(<map(?ConstrType(_, <id>))> t*)
      end
    ; <report-Err> (cnstr, err)
    ; t2 := ErrT()
    ; t2* := <map(!ErrT())> trm1*
    end
  ; (trm2*, st2) := <thread-map(insertCasts-StMatchTerm-Type(|e1))> (<zip> (trm1*, t2*), st1)
  ; st3 := <current-type(|t2)> st2

insertCasts-StMatchTerm(|e1, st1) =
    otf(\OpQ(c, c*) -> Op(c, c*)\)
  ; insertCasts-StMatchTerm(|e1, st1)
  ; (otf(\Op(c, c*) -> OpQ(c, c*)\), id)

insertCasts-StMatchTerm-(|e1, st1):
  Explode(trm1, trm2) -> (Explode(trm3, trm4), st4)
  with
    // Note that constructors can be strings (in case of applications and tuples) or the empty list (in case of a list)
    (trm3, st2) := <insertCasts-StMatchTerm(|e1, <current-type(|DynT())> st1)> trm1
  ; (trm4, st3) := <insertCasts-StMatchTerm(|e1, <current-type(|ListT())> st2)> trm2
  ; st4 := <current-type(|DynT())> st3

strategies // Terms in build position (core)

insertCasts-BuildTerm(|e1, st1, t1) =
    insertCasts-StBuildTerm(|e1, <stBuildTerm-from-st;current-type(|t1)> st1)
  ; (id, st-from-stBuildTerm)

insertCasts-BuildTerm(|e1, st1) = insertCasts-BuildTerm(|e1, st1, DynT())

insertCasts-StBuildTerm(|e1):
  (trm, st1) -> <insertCasts-StBuildTerm(|e1, st1)> trm

insertCasts-StBuildTerm-Type(|e1, t1):
  (trm, st1) -> <insertCasts-StBuildTerm(|e1, <current-type(|t1)> st1)> trm

insertCasts-StBuildTerm(|e1, st1) = otf12(insertCasts-StBuildTerm-(|e1, st1))

insertCasts-StBuildTerm-(|e1, st1):
  trm1@Var(v) -> (trm2, st4)
  with
    t1 := <current-type> st1
  ; if t2 := <term-lookup(|v{})> st1
      then st2 := st1
      else
        st2 := <term-put(|v{}, t1)> st1
      ; t2 := t1
    end
  ; (trm2, st3) := <insertCastApp(|t2, t1)> (trm1, st2)
  ; if DynT() := t2; not(DynT() := t1)
      then
        // Strengthen the type of a variable that was previously dynamic
        st4 := <term-put(|v{}, t1)> st3
      else
        st4 := st3
    end

insertCasts-StBuildTerm(|e1, st1):
  trm@Wld() -> (trm, <current-type(|ErrT())> st1)
  with
    <report-Err> (trm, WldInBuildTerm())

insertCasts-StBuildTerm-(|e1, st1):
  Anno(trm1, trm2) -> (trm6, st4)
  with
    (trm3, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; (trm4, st3) := <insertCasts-StBuildTerm(|e1, <current-type(|DynT())> st2)> trm2
  ; if not(<CanCoerce> (<current-type> st3, ListT()))
      then <report-Err> (trm2, NonListInAnno(<current-type> st3))
    end
  ; st4 := <current-type(|<current-type> st2)> st3
  ; if App(c@Cast(_), trm5) := trm3
      then trm6 := App(c, Anno(trm5, trm4))
      else trm6 := Anno(trm3, trm4)
    end

insertCasts-StBuildTerm-(|e1, st1):
  trm1@As(Var(v), trm2) -> (As(Var(v), trm3), <current-type(|ErrT())> st2)
  with
    (trm3, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm2
  ; <report-Err> (trm1, AsInBuildTerm())

insertCasts-StBuildTerm-(|e1, st1):
  trm1@Int(_) -> <insertCasts-StBuildTerm-Lit(|st1, IntT())>

insertCasts-StBuildTerm(|e1, st1):
  trm@Real(_) -> <insertCasts-StBuildTerm-Lit(|st1, RealT())>

insertCasts-StBuildTerm(|e1, st1):
  trm@Str(_) -> <insertCasts-StBuildTerm-Lit(|st1, StringT())>

insertCasts-StBuildTerm-Lit(|st1, t1):
  trm1 -> (trm2, st2)
  with
    t2 := <current-type> st1
  ; (trm2, st2) := <insertCastApp(|t1, t2)> (trm1, st1)

insertCasts-StBuildTerm-(|e1, st1):
  trm1@Op(cnstr, trm1*) -> (trm2, st3)
  with
    t1 := <current-type> st1
  ; t* := <constr-lookup(|cnstr, <length> trm1*, t1)> e1
  ; if [ConstrType(t1*, t2)] := t*
    then id
    else if [] := t*
        then err := UnresolvedConstructor(<length> trm1*, DynT())
        else err := AmbiguousConstructorUse(<map(?ConstrType(_, <id>))> t*)
      end
    ; <report-Err> (cnstr, err)
    ; t2 := ErrT()
    ; t1* := <map(!ErrT())> trm1*
    end
  ; b* := <zip> (trm1*, t1*)
  ; if DynT() := t1
    then
      let
        set-type(|t) = current-type(|DynT(t))
      in (trm2*, t2*, st2) := <map-st-LUB(StBuildTerm-Op-threader(set-type|e1))> (b*, st1)
      ; if <zip(CanCoerce)> (t2*, t1*)
        then
          st3 := <current-type(|t2)> st2
        ; trm2 := Op(cnstr, trm2*)
        else
          if <zip(CanCoerce <+ ?(DynT(), _))> (t2*, t1*)
            then
              (trm2, st3) := <insertCastApp(|DynT(t2), t1)> (<otf(!Op(cnstr, trm2*))> trm1, st2)
            else
              st3 := <current-type(|IllFormedTermT(cnstr, t2*))> st2
            ; trm2 := Op(cnstr, trm2*)
          end
        end
      end
    else
      let
        // defined to disambiguate between current-type/0/0 and current-type/0/1
        set-type(|t) = current-type(|t)
      in (trm2*, _, st2) := <map-st-LUB(StBuildTerm-Op-threader(set-type|e1))> (b*, st1)
      ; st3 := <current-type(|t2)> st2
      ; trm2 := Op(cnstr, trm2*)
      end
    end

StBuildTerm-Op-threader(set-type|e1):
  ((trm1, t), st1) -> (trm2, st2)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, <set-type(|t)> st1)> trm1

insertCasts-StBuildTerm(|e1, st1) =
    otf(\OpQ(c, c*) -> Op(c, c*)\)
  ; insertCasts-StBuildTerm(|e1, st1)
  ; (otf(\Op(c, c*) -> OpQ(c, c*)\), id)

insertCasts-StBuildTerm-(|e1, st1):
  Explode(trm1, trm2) -> (Explode(trm3, trm5), st5)
  with
    (trm3, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; (trm4, st3) := <insertCasts-StBuildTerm(|e1, st2)> trm2
    // Note that constructors can be strings (in case of applications and tuples) or the empty list (in case of a list)
  ; if not(<CanCoerce> (<current-type> st2, StringT()) + <CanCoerce> (<current-type> st2, ListT()))
      then <report-Err> (trm1, NonStringOrListInExplodeConsPosition(<current-type> st2))
    end
    // TODO: support cast to string-or-list for the constructor
  ; (trm5, st4) := <insertCastApp(|<current-type> st3, ListT())> (trm4, st3)
  ; st5 := <current-type(|DynT())> st4

strategies // Terms in match position (sugar)

insertCasts-StMatchTerm(|e1, st1):
  trm@BuildDefault(_) -> (trm, st1)
  with
    <report-Err> (trm, BuildDefaultInMatchTerm())

insertCasts-StMatchTerm-(|e1, st1):
  AnnoList(trm1, trm1*) -> (trm4, st4)
  with
    (trm2, st2) := <insertCasts-StMatchTerm(|e1, st1)> trm1
  ; (trm2*, st3) := <thread-map(insertCasts-StMatchTerm-Type(|e1, DynT()))> (trm1*, st2)
  ; st4 := <current-type(|<current-type> st2)> st3
  ; if App(c@Cast(_), trm3) := trm2
      then trm4 := App(c, AnnoList(trm3, trm2*))
      else trm4 := AnnoList(trm2, trm2*)
    end

insertCasts-StMatchTerm-(|e1, st1):
  NoAnnoList(trm1) -> (trm4, st2)
  with
    (trm2, st2) := <insertCasts-StMatchTerm(|e1, st1)> trm1
  ; if App(c@Cast(_), trm3) := trm2
      then trm4 := App(c, NoAnnoList(trm3))
      else trm4 := NoAnnoList(trm2)
    end

insertCasts-StMatchTerm-(|e1, st1):
  App(s1, trm1) -> (App(s2, trm2), st5)
  with
    (trm2, st2) := <insertCasts-BuildTerm(|e1, st1)> trm1
  ; (s2, st3) := <insertCasts-Strategy(|e1, st2)> s1
  ; st4 := <term-env(<term-env> st3)> st1
  ; if not(st5 := <output-type(|<current-type> st3)> st4)
      then
          <report-Warn> (s1, MultipleAppsInMatch())
        ; st5 := st4
    end

insertCasts-StMatchTerm-(|e1, st1):
  RootApp(s1) -> (RootApp(s2), st4)
  with
    (s2, st2) := <insertCasts-Strategy(|e1, st1)> s1
  ; st3 := <term-env(<term-env> st2)> st1
  ; if not(st4 := <output-type(|<current-type> st2)> st3)
      then
          <report-Warn> (s1, MultipleAppsInMatch())
        ; st4 := st3
    end

insertCasts-StMatchTerm(|e1, st1):
  Char(_) -> <insertCasts-StMatchTerm-Lit(|e1, st1, IntT())>

insertCasts-StMatchTerm-(|e1, st1):
  Tuple(trm1*) -> (Tuple(trm2*), st3)
  with
    t1 := <current-type> st1
  ; t1* := <map(!DynT())> trm1*
  ; t2 := TupleT(t1*)
  ; if not(<CanCoerce> (t2, t1))
      then <report-Err> ("", TypeMismatch(t2, t1))
    end
  ; (trm2*, st2) := <thread-map(insertCasts-StMatchTerm-Type(|e1))> (<zip> (trm1*, t1*), st1)
  ; st3 := <current-type(|t2)> st2

insertCasts-StMatchTerm-(|e1, st1):
  List(trm1*) -> (List(trm2*), st3)
  with
    t1 := <current-type> st1
  ; t1* := <map(!DynT())> trm1*
  ; t2 := ListT()
  ; if not(<CanCoerce> (t2, t1))
      then <report-Err> ("", TypeMismatch(t2, t1))
    end
  ; (trm2*, st2) := <thread-map(insertCasts-StMatchTerm-Type(|e1))> (<zip> (trm1*, t1*), st1)
  ; st3 := <current-type(|t2)> st2

insertCasts-StMatchTerm-(|e1, st1):
  ListTail(trm1*, trm1) -> (ListTail(trm2*, trm2), st4)
  with
    t1 := <current-type> st1
  ; t1* := <map(!DynT())> trm1*
  ; t2 := ListT()
  ; if not(<CanCoerce> (t2, t1))
      then <report-Err> ("", TypeMismatch(t2, t1))
    end
  ; (trm2*, st2) := <thread-map(insertCasts-StMatchTerm-Type(|e1))> (<zip> (trm1*, t1*), st1)
  ; (trm2, st3) := <insertCasts-StMatchTerm(|e1, <current-type(|ListT())> st2)> trm1
  ; st4 := <current-type(|t2)> st3

insertCasts-StMatchTerm(|e1, st1):
  trm@BuildDefaultPT(_) -> (trm, st1)
  with
    <report-Err> (trm, BuildDefaultInMatchTerm())

strategies // Terms in build position (sugar)

insertCasts-StBuildTerm-(|e1, st1):
  trm@BuildDefault(trm1) -> (BuildDefault(trm2), st2)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; <report-Err> (trm, BuildDefaultInBuildTerm())

insertCasts-StBuildTerm-(|e1, st1):
  AnnoList(trm1, trm1*) -> (trm4, st4)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; (trm2*, st3) := <thread-map(insertCasts-StBuildTerm-Type(|e1, DynT()))> (trm1*, st2)
  ; st4 := <current-type(|<current-type> st2)> st3
  ; if App(c@Cast(_), trm3) := trm2
      then trm4 := App(c, AnnoList(trm3, trm2*))
      else trm4 := AnnoList(trm2, trm2*)
    end

insertCasts-StBuildTerm-(|e1, st1):
  NoAnnoList(trm1) -> (trm4, st2)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; if App(c@Cast(_), trm3) := trm2
      then trm4 := App(c, NoAnnoList(trm3))
      else trm4 := NoAnnoList(trm2)
    end

insertCasts-StBuildTerm-(|e1, st1):
  App(s1, trm1) -> (App(s2, trm2), st5)
  with
    st2 := <st-from-stBuildTerm-input> st1
  ; (trm2, st3) := <insertCasts-BuildTerm(|e1, st2)> trm1
  ; (s2, st4) := <insertCasts-Strategy(|e1, st3)> s1
  ; st5 := <term-env(<term-env> st4);current-type(|<current-type> st4)> st1

insertCasts-StBuildTerm-(|e1, st1):
  RootApp(s1) -> (RootApp(s2), st4)
  with
    st2 := <st-from-stBuildTerm-input> st1
  ; (s2, st3) := <insertCasts-Strategy(|e1, st2)> s1
  ; st4 := <term-env(<term-env> st3);current-type(|<current-type> st3)> st1

insertCasts-StBuildTerm(|e1, st1):
  trm@Char(_) -> <insertCasts-StBuildTerm-Lit(|st1, IntT())>

// TODO: extract types from expected type to support the type parameters properly here
insertCasts-StBuildTerm-(|e1, st1):
  Tuple(trm1*) -> (Tuple(trm2*), st3)
  with
    (trm2*, t*, st2) := <thread-map-LUB(insertCasts-StBuildTerm-Type(|e1, DynT()))> (trm1*, st1)
  ; t1 := TupleT(t*)
  ; st3 := <current-type(|t1)> st2

// TODO: extract types from expected type to support the type parameters properly here
insertCasts-StBuildTerm-(|e1, st1):
  List(trm1*) -> (List(trm2*), st3)
  with
    (trm2*, t*, st2) := <thread-map-LUB(insertCasts-StBuildTerm-Type(|e1, DynT()))> (trm1*, st1)
  ; t1 := ListT(<foldr1(?[<id>], LUB <+ !DynT())> t*)
  ; st3 := <current-type(|t1)> st2

// TODO: extract types from expected type to support the type parameters properly here
insertCasts-StBuildTerm-(|e1, st1):
  ListTail(trm1*, trm1) -> (ListTail(trm2*, trm3), st5)
  with
    (trm2*, t*, st2) := <thread-map-LUB(insertCasts-StBuildTerm-Type(|e1, DynT()))> (trm1*, st1)
  ; (trm2, st3) := <insertCasts-StBuildTerm(|e1, st2)> trm1
  // TODO: Use returned current types to inform list type
  // Cannot use the same as before. <current-type> st3 must be a list and cast to it if DynT().
  // But if not <CanCoerce> (<current-type> st3, t1), current-type in st4 should be ListT()
  ; t1 := ListT() //<foldr1(?[<id>], LUB <+ !DynT())> t*
  ; (trm3, st4) := <insertCastApp(|<current-type> st3, t1)> (trm2, st3)
  ; st5 := <current-type(|t1)> st4

insertCasts-StBuildTerm-(|e1, st1):
  trm@BuildDefaultPT(trm1) -> (BuildDefaultPT(trm2), st2)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; <report-Err> (trm, BuildDefaultInBuildTerm())

strategies // Terms in match position (string quotations)

insertCasts-StMatchTerm-(|e1, st1):
  trm@StringQuotation1(p, sqp1*) -> (StringQuotation1(p, sqp2*), st2)
  with
    (sqp2*, st2) := <thread-map(insertCasts-Match-StringQuotedPart(|e1))> (sqp1*, st1)
  ; <report-Err> (trm, StringQuotationInMatchTerm())

insertCasts-StMatchTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation2(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StMatchTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation2(p, sqp*)\)

insertCasts-StMatchTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation3(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StMatchTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation3(p, sqp*)\)

insertCasts-StMatchTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation4(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StMatchTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation4(p, sqp*)\)

insertCasts-Match-StringQuotedPart(|e1) = otf22(insertCasts-Match-StringQuotedPart-(|e1))

insertCasts-Match-StringQuotedPart-(|e1):
  (StringEscape1(p, trm1), st1) -> (StringEscape1(p, trm2), st2)
  with
    (trm2, st2) := <insertCasts-StMatchTerm(|e1, <current-type(|StringT())> st1)> trm1

insertCasts-Match-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape2(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Match-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape2(p, sqp*)\)

insertCasts-Match-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape3(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Match-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape3(p, sqp*)\)

insertCasts-Match-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape4(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Match-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape4(p, sqp*)\)

strategies // Terms in build position (string quotations)

insertCasts-StBuildTerm-(|e1, st1):
  trm@StringQuotation1(p, sqp1*) -> (StringQuotation1(p, sqp2*), st2)
  with
    t1 := StringT()
  ; t2 := <current-type> st1
  ; if not(<CanCoerce>(t1, t2))
      then <report-Err> (trm, TypeMismatch(t1, t2))
    end
  ; (sqp2*, st2) := <thread-map(insertCasts-Build-StringQuotedPart(|e1))> (sqp1*, <current-type(|StringT())> st1)

insertCasts-StBuildTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation2(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StBuildTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation2(p, sqp*)\)

insertCasts-StBuildTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation3(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StBuildTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation3(p, sqp*)\)

insertCasts-StBuildTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation4(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StBuildTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation4(p, sqp*)\)

insertCasts-Build-StringQuotedPart(|e1) = otf22(insertCasts-Build-StringQuotedPart-(|e1))

insertCasts-Build-StringQuotedPart-(|e1):
  (StringEscape1(p, trm1), st1) -> (StringEscape1(p, trm3), st4)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; (trm3, st3) := <insertCastApp(|<current-type> st2, StringT())> (trm2, st2)
  ; st4 := <current-type(|<current-type> st2)> st3

insertCasts-Build-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape2(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Build-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape2(p, sqp*)\)

insertCasts-Build-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape3(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Build-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape3(p, sqp*)\)

insertCasts-Build-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape4(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Build-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape4(p, sqp*)\)

strategies

insertCasts-StMatchTerm-(|e1, st1):
  ta@TypeAscription(trm1, t1) -> (As(trm3, trm2), st3)
  with
    t2 := <desugar-Type> t1
  ; t3 := <current-type> st1
  ; (trm2, st2) := <insertCasts-StMatchTerm(|e1, <current-type(|t2)> st1)> trm1
  ; if ErrT() := <current-type> st2
    then trm3 := trm2; st3 := st2
    else
      c := <computeCoercion(|t3, t2)> ta
    ; if Id() := c
        then trm3 := trm2; st3 := st2
        else
          trm3 := Var(<newname> "typeAscribed")
        ; st3 := <after-match(|BA(Cast(c), trm3))> st2
      end
    end

insertCasts-StBuildTerm-(|e1, st1):
  trm1@TypeAscription(trm2, t1) -> (trm3, st2)
  with
    t2 := <desugar-Type> t1
  ; t3 := <current-type> st1
  ; if not(<CanCoerce> (t2, t3) + DynT() := t2)
      then <report-Err> (trm1, TypeMismatch(t2, t3))
    end
  ; (trm3, st2) := <insertCasts-StBuildTerm(|e1, <current-type(|t2)> st1)> trm2
//  ; (trm4, st3) := <insertCastApp(|<current-type> st2, t2)> (trm3, st2)
  ; if not(<CanCoerce> (t2, <current-type> st2) + DynT() := t2)
      then
        st3 := <current-type(|t2)> st2
      else
        st3 := <current-type(|t2)> st2
    end

