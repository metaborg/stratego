module analysis/terms

imports

libstratego-lib
libstratego-aterm

libspoofax/term/annotation
libspoofax/stratego/debug

signatures/core/terms-sig
signatures/strategoGT-sig
signatures/sugar/modules-sig
signatures/sugar/strategies-sig
signatures/sugar/terms-sig
signatures/sugar/string-quotations-sig
signatures/gradual-types/signatures-sig 
signatures/gradual-types/strategies-sig
signatures/gradual-types/terms-sig
signatures/gradual-types/internal-sig

analysis/utils
analysis/environment
analysis/signatures
analysis/defs
analysis/strategies
analysis/main

strategies // Terms in match position (core)

insertCasts-MatchTerm(|e1, st1) =
    insertCasts-StMatchTerm(|e1, <stMatchTerm-from-st> st1)
  ; (id, st-from-stMatchTerm)

insertCasts-StMatchTerm-Type(|e1):
  ((trm, t), st1) -> <insertCasts-StMatchTerm(|e1, <current-type(|t)> st1)> trm

insertCasts-StMatchTerm-Type(|e1, t):
  (trm, st1) -> <insertCasts-StMatchTerm(|e1, <current-type(|t)> st1)> trm

insertCasts-StMatchTerm(|e1, st1) = otf12(insertCasts-StMatchTerm-(|e1, st1))

insertCasts-StMatchTerm(|e1, st1):
  trm1@Var(v) -> (trm1, st3)
  with
    t1 := <current-type> st1
  ; if t2 := <term-lookup(|v{})> st1
      then
        (c, st2) := <computeCoercion(|trm1, st1)> (t1, t2)
      ; if Id() := c
          then st3 := st2
          // Doing a cast after the fact in case the var was unbound before the match,
          //    but already had a type due to its use in the rhs of a rule def
          else st3 := <after-match(|<otf(!BA(<otf(!Cast(c{}))> trm1, trm1))> trm1)> st2
        end
      else st3 := <term-put(|v{}, t1)> st1
    end

insertCasts-StMatchTerm(|e1, st1):
  trm@Wld() -> (trm, st1)

insertCasts-StMatchTerm-(|e1, st1):
  Anno(trm1, trm2) -> (trm6, st4)
  with
    (trm3, st2) := <insertCasts-StMatchTerm(|e1, st1)> trm1
  ; (trm4, st3) := <insertCasts-StMatchTerm(|e1, <current-type(|ListT())> st2)> trm2
  ; st4 := <current-type(|<current-type> st2)> st3
  ; if App(c@Cast(_), trm5) := trm3
      then trm6 := App(c, Anno(trm5, trm4))
      else trm6 := Anno(trm3, trm4)
    end

insertCasts-StMatchTerm-(|e1, st1):
  As(v1, trm1) -> (As(v2, trm2), st3)
  with
    (trm2, st2) := <insertCasts-StMatchTerm(|e1, st1)> trm1
  ; (v2, st3) := <insertCasts-StMatchTerm(|e1, st2)> v1

insertCasts-StMatchTerm(|e1, st1):
  Int(_) -> <insertCasts-StMatchTerm-Lit(|e1, st1, IntT())>

insertCasts-StMatchTerm(|e1, st1):
  Real(_) -> <insertCasts-StMatchTerm-Lit(|e1, st1, RealT())>

insertCasts-StMatchTerm(|e1, st1):
  Str(_) -> <insertCasts-StMatchTerm-Lit(|e1, st1, StringT())>

insertCasts-StMatchTerm-Lit(|e1, st1, t1):
  trm -> (trm, <current-type(|t1)> st2)
  with
    t2 := <current-type> st1
  ; (_, st2) := <computeCoercion(|trm, st1)> (t1, t2)

insertCasts-StMatchTerm-(|e1, st1):
  Op(cnstr, trm1*) -> (Op(cnstr, trm2*), st5)
  with
    t1 := <current-type> st1
  ; t* := <constr-lookup-to(|cnstr, <length> trm1*, t1, st1)> e1
  ; if [(ConstrType(t1*, t2), st2)] := t*
    then
      (c, st3) := <computeCoercion(|cnstr, st2)> (t2, t1)
    ; if not(Fail() := c)
        then if DynT() := t1
               then t2* := <map(!DynT(<id>))> t1*
               else t2* := t1*
             end
        else t2* := <map(!ErrT())> trm1*
      end
    ; t3 := t2 // workaround for backtracking issue in strj
    else if [] := t*
        then <report-Err> (cnstr, UnresolvedConstructor(<length> trm1*, t1))
        else id //<report-Warn> (cnstr, AmbiguousConstructorUse(<map(?ConstrType(_, <id>))> t*))
      end
    ; t3 := ErrT() // workaround for backtracking issue in strj
    ; t2* := <map(!ErrT())> trm1*
    ; st3 := st1
    end
  ; (trm2*, st4) := <thread-map(insertCasts-StMatchTerm-Type(|e1))> (<zip> (trm1*, t2*), st3)
  ; st5 := <current-type(|t3)> st4

insertCasts-StMatchTerm(|e1, st1) =
    otf(\OpQ(c, c*) -> Op(c, c*)\)
  ; insertCasts-StMatchTerm(|e1, st1)
  ; (otf(\Op(c, c*) -> OpQ(c, c*)\), id)

insertCasts-StMatchTerm-(|e1, st1):
  Explode(trm1, trm2) -> (Explode(trm3, trm4), st4)
  with
    // Note that constructors can be strings (in case of applications, strings and tuples)
    //  or the empty list (in case of a list), or an int (in case of an int), etc.
    (trm3, st2) := <insertCasts-StMatchTerm(|e1, <current-type(|DynT())> st1)> trm1
  ; (trm4, st3) := <insertCasts-StMatchTerm(|e1, <current-type(|DynT(ListT()))> st2)> trm2
  ; st4 := <current-type(|DynT())> st3

strategies // Terms in build position (core)

insertCasts-BuildTerm(|e1, st1, t1) =
    insertCasts-StBuildTerm(|e1, <stBuildTerm-from-st;current-type(|t1)> st1)
  ; (id, st-from-stBuildTerm)

insertCasts-BuildTerm(|e1, st1) = insertCasts-BuildTerm(|e1, st1, DynT())

insertCasts-StBuildTerm(|e1):
  (trm, st1) -> <insertCasts-StBuildTerm(|e1, st1)> trm

insertCasts-StBuildTerm-Type(|e1, t1):
  (trm, st1) -> <insertCasts-StBuildTerm(|e1, <current-type(|t1)> st1)> trm

insertCasts-StBuildTerm-Type(|e1):
  ((trm, t1), st1) -> <insertCasts-StBuildTerm(|e1, <current-type(|t1)> st1)> trm

insertCasts-StBuildTerm(|e1, st1) = otf12(insertCasts-StBuildTerm-(|e1, st1))

insertCasts-StBuildTerm-(|e1, st1):
  trm1@Var(v) -> (trm2, st4)
  with
    t1 := <current-type> st1
  ; if t2 := <term-lookup(|v{})> st1
      then st2 := st1
      else // We put the expected type here if the var is not found as this call may be in a
           //  top-level defined rule with a type. In that case we infer the types of local
           //  variables from the tld type before checking the whereclause(s).
           // This _does_ mean we cannot give a warning or error here when a variable is built
           //  but unbound.
        st2 := <term-put(|v{}, t1)> st1
      ; t2 := t1
    end
  ; (trm2, st3) := <insertCastApp(|t2, t1)> (trm1, st2)
  ; if DynT() := t2; not(DynT() := t1)
      then
        // Strengthen the type of a variable that was previously dynamic
        st4 := <term-put(|v{}, t1)> st3
      else
        st4 := st3
    end

insertCasts-StBuildTerm(|e1, st1):
  trm@Wld() -> (trm, <current-type(|ErrT())> st1)
  with
    <report-Err> (trm, WldInBuildTerm())

insertCasts-StBuildTerm-(|e1, st1):
  Anno(trm1, trm2) -> (trm6, st4)
  with
    (trm3, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; (trm4, st3) := <insertCasts-StBuildTerm(|e1, <current-type(|DynT(ListT()))> st2)> trm2
  ; st4 := <current-type(|<current-type> st2)> st3
  ; if App(c@Cast(_), trm5) := trm3
      then trm6 := App(c, Anno(trm5, trm4))
      else trm6 := Anno(trm3, trm4)
    end

insertCasts-StBuildTerm-(|e1, st1):
  trm1@As(Var(v), trm2) -> (As(Var(v), trm3), <current-type(|ErrT())> st2)
  with
    (trm3, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm2
  ; <report-Err> (trm1, AsInBuildTerm())

insertCasts-StBuildTerm-(|e1, st1):
  trm1@Int(_) -> <insertCasts-StBuildTerm-Lit(|st1, IntT())>

insertCasts-StBuildTerm(|e1, st1):
  trm@Real(_) -> <insertCasts-StBuildTerm-Lit(|st1, RealT())>

insertCasts-StBuildTerm(|e1, st1):
  trm@Str(_) -> <insertCasts-StBuildTerm-Lit(|st1, StringT())>

insertCasts-StBuildTerm-Lit(|st1, t1):
  trm1 -> (trm1, st2)
  with
    st2 := <current-type(|t1)> st1
  ; t2 := <current-type> st1
  ; _ := <computeCoercion(|trm1, st1)> (t1, t2)

signature constructors
  AllCanCoerce : OpTypeRelation
  SomeDyn      : OpTypeRelation
  Unrelated    : OpTypeRelation

strategies

insertCasts-StBuildTerm-(|e1, st1):
  trm1@Op(cnstr, trm1*) -> (trm2, st6)
  with
    t1 := <current-type> st1
  // In a top-level term e.g. in Build(Op(..., ...)) the current term type in DynT().
  ; t1* := <constr-lookup-to(|cnstr, <length> trm1*, <unDyn> t1, st1)> e1
  ; if [(ConstrType(t2*, t2), st2)] := t1*
    then
      t3* := t2*
    ; t3 := t2  // workaround for backtracking issue in strj
    ; st4 := st2
    else
      t* := <constr-lookup-to(|cnstr, <length> trm1*, t1, st1)> e1
    ; if [(ConstrType(t6*, t6), st3)] := t*
      then
        t3* := t6*
      ; t3 := t6  // workaround for backtracking issue in strj
      ; st4 := st3
      else
        if [] := t*
          then <report-Err> (cnstr, UnresolvedConstructor(<length> trm1*, t1))
          else id //<report-Warn> (cnstr, AmbiguousConstructorUse(<map(?ConstrType(_, <id>))> t*))
        end
      ; t3 := ErrT() // workaround for backtracking issue in strj
      ; st4 := st1
      ; t3* := <map(!ErrT())> trm1*
      end
    end
  ; b* := <zip> (trm1*, t3*)
  ; if DynT() := t1
    then
      let
        set-type(|t) = current-type(|DynT(t))
      in (trm2*, t4*, st5) := <map-st-LUB(StBuildTerm-Op-threader(set-type|e1))> (b*, st4)
      ; switch <StBuildTerm-Op-type-relation(|st5)> (t4*, t3*)
          case ?AllCanCoerce():
            st6 := <current-type(|t3)> st5
          ; trm2 := Op(cnstr, trm2*)
          case ?SomeDyn():
            // insertCastApp here only generates warnings, not casts, because DynT(_) := t1
            (trm2, st6) := <insertCastApp(|DynT(t3), t1)> (<otf(!Op(cnstr, trm2*))> trm1, st5)
          case ?Unrelated():
            st6 := <current-type(|IllFormedTermT(cnstr, t4*))> st5
          ; trm2 := Op(cnstr, trm2*)
        end
      end
    else
      let
        // defined to disambiguate between current-type/0/0 and current-type/0/1
        set-type(|t) = current-type(|t)
      in (trm2*, _, st5) := <map-st-LUB(StBuildTerm-Op-threader(set-type|e1))> (b*, st4)
      ; st6 := <current-type(|t3)> st5
      ; trm2 := Op(cnstr, trm2*)
      end
    end

StBuildTerm-Op-threader(set-type|e1):
  ((trm1, t), st1) -> (trm2, st2)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, <set-type(|t)> st1)> trm1

StBuildTerm-Op-type-relation(|st1): (t2*, t1*) -> result
  with
    zipped := <zip(!(<id>, st1); CanCoerce; !AllCanCoerce()
                <+ ?(DynT(), _);!SomeDyn()
                <+ !Unrelated())> (t2*, t1*)
  ; result := <foldl(one(?Unrelated());!Unrelated()
                  <+ one(?SomeDyn());!SomeDyn()
                  <+ !AllCanCoerce())> (zipped, AllCanCoerce())

insertCasts-StBuildTerm(|e1, st1) =
    otf(\OpQ(c, c*) -> Op(c, c*)\)
  ; insertCasts-StBuildTerm(|e1, st1)
  ; (otf(\Op(c, c*) -> OpQ(c, c*)\), id)

insertCasts-StBuildTerm-(|e1, st1):
  Explode(trm1, trm2) -> (Explode(trm3, trm4), st4)
  with
    (trm3, st2) := <insertCasts-StBuildTerm(|e1, <current-type(|DynT())> st1)> trm1
  ; (trm4, st3) := <insertCasts-StBuildTerm(|e1, <current-type(|DynT(ListT()))> st2)> trm2
  ; t1 := <current-type> st2
    // Note that constructors can be strings (in case of applications and tuples) or the empty list (in case of a list), or int for ints, real for reals, etc.
//  ; if DynT(t2) := t1
//    then if not(<CanCoerce> ((t2, StringT()), st3) + <CanCoerce> ((t2, ListT()), st3))
//      then <report-Warn> (trm1, NonStringOrListInExplodeConsPosition(<current-type> st2))
//    end
//    else if not(<CanCoerce> ((t1, StringT()), st3) + <CanCoerce> ((t1, ListT()), st3))
//      then <report-Err> (trm1, NonStringOrListInExplodeConsPosition(<current-type> st2))
//    end end
  ; st4 := <current-type(|DynT())> st3

strategies // Terms in match position (sugar)

insertCasts-StMatchTerm(|e1, st1):
  trm@BuildDefault(_) -> (trm, st1)
  with
    <report-Err> (trm, BuildDefaultInMatchTerm())

insertCasts-StMatchTerm-(|e1, st1):
  AnnoList(trm1, trm1*) -> (trm4, st4)
  with
    (trm2, st2) := <insertCasts-StMatchTerm(|e1, st1)> trm1
  ; (trm2*, st3) := <thread-map(insertCasts-StMatchTerm-Type(|e1, DynT()))> (trm1*, st2)
  ; st4 := <current-type(|<current-type> st2)> st3
  ; if App(c@Cast(_), trm3) := trm2
      then trm4 := App(c, AnnoList(trm3, trm2*))
      else trm4 := AnnoList(trm2, trm2*)
    end

insertCasts-StMatchTerm-(|e1, st1):
  NoAnnoList(trm1) -> (trm4, st2)
  with
    (trm2, st2) := <insertCasts-StMatchTerm(|e1, st1)> trm1
  ; if App(c@Cast(_), trm3) := trm2
      then trm4 := App(c, NoAnnoList(<try(?NoAnnoList(<id>))> trm3))
      else trm4 := NoAnnoList(<try(?NoAnnoList(<id>))> trm2)
    end

insertCasts-StMatchTerm-(|e1, st1):
  App(s1, trm1) -> (App(s2, trm2), st5)
  with
    !st1
  ; stMatchTerm-as-st(\st2 -> st4 where
        (trm2, st3) := <insertCasts-BuildTerm(|e1, st2)> trm1
      ; (s2, st4) := <insertCasts-Strategy(|e1, st3)> s1\
    | (s1, MultipleAppsInMatch()))
    => st5

insertCasts-StMatchTerm-(|e1, st1):
  RootApp(s1) -> (RootApp(s2), st4)
  with
    !st1
  ; stMatchTerm-as-st(\st2 -> st3 where
      (s2, st3) := <insertCasts-Strategy(|e1, st2)> s1\
    | (s1, MultipleAppsInMatch()))
    => st4

insertCasts-StMatchTerm(|e1, st1):
  Char(_) -> <insertCasts-StMatchTerm-Lit(|e1, st1, IntT())>

insertCasts-StMatchTerm-(|e1, st1):
  Tuple([trm1]) -> <insertCasts-StMatchTerm-(|e1, st1)> trm1

insertCasts-StMatchTerm-(|e1, st1):
  trm@Tuple(trm1*) -> (Tuple(trm2*), st4)
  with
    t1 := <current-type> st1
  ; t1* := <map(!DynT())> trm1*
  ; t2 := TupleT(t1*)
  ; (_, st2) := <computeCoercion(|trm, st1)> (t1, t2)
  ; if TupleT(t2*) := t1; <eq> (<length> t2*, <length> t1*)
      then t3* := t2*
      else t3* := t1*
    end
  ; (trm2*, st3) := <thread-map(insertCasts-StMatchTerm-Type(|e1))> (<zip> (trm1*, t3*), st2)
  ; st4 := <current-type(|t2)> st3

insertCasts-StMatchTerm-(|e1, st1):
  trm@List(trm1*) -> (List(trm2*), st4)
  with
    t1 := <current-type> st1
  ; t1* := <map(!DynT())> trm1*
  ; t2 := ListT()
  ; (_, st2) := <computeCoercion(|trm, st1)> (t1, t2)
  ; (trm2*, st3) := <thread-map(insertCasts-StMatchTerm-Type(|e1))> (<zip> (trm1*, t1*), st2)
  ; st4 := <current-type(|t2)> st3

insertCasts-StMatchTerm-(|e1, st1):
  trm@ListTail(trm1*, trm1) -> (ListTail(trm2*, trm2), st5)
  with
    t1 := <current-type> st1
  ; if ListT(t) := t1
      then t1* := <map(!t)> trm1*
      else t1* := <map(!DynT())> trm1*
    end
  ; t2 := ListT()
  ; (_, st2) := <computeCoercion(|trm, st1)> (t1, t2)
  ; (trm2*, st3) := <thread-map(insertCasts-StMatchTerm-Type(|e1))> (<zip> (trm1*, t1*), st2)
  ; (trm2, st4) := <insertCasts-StMatchTerm(|e1, <current-type(|t1)> st3)> trm1
  ; st5 := <current-type(|t2)> st4

insertCasts-StMatchTerm(|e1, st1):
  trm@BuildDefaultPT(_) -> (trm, st1)
  with
    <report-Err> (trm, BuildDefaultInMatchTerm())

strategies // Terms in build position (sugar)

insertCasts-StBuildTerm-(|e1, st1):
  trm@BuildDefault(trm1) -> (BuildDefault(trm2), st2)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; <report-Err> (trm, BuildDefaultInBuildTerm())

insertCasts-StBuildTerm-(|e1, st1):
  AnnoList(trm1, trm1*) -> (trm4, st4)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; (trm2*, st3) := <thread-map(insertCasts-StBuildTerm-Type(|e1, DynT()))> (trm1*, st2)
  ; st4 := <current-type(|<current-type> st2)> st3
  ; if App(c@Cast(_), trm3) := trm2
      then trm4 := App(c, AnnoList(trm3, trm2*))
      else trm4 := AnnoList(trm2, trm2*)
    end

insertCasts-StBuildTerm-(|e1, st1):
  NoAnnoList(trm1) -> (trm4, st2)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; if App(c@Cast(_), trm3) := trm2
      then trm4 := App(c, NoAnnoList(<try(?NoAnnoList(<id>))> trm3))
      else trm4 := NoAnnoList(<try(?NoAnnoList(<id>))> trm2)
    end

insertCasts-StBuildTerm-(|e1, st1):
  App(s1, trm1) -> (App(s2, trm2), st5)
  with
    !st1
  ; stBuildTerm-as-st(\st2 -> st4 where
      (trm2, st3) := <insertCasts-BuildTerm(|e1, st2)> trm1
    ; (s2, st4) := <insertCasts-Strategy(|e1, st3)> s1\)
  ; ?st5

insertCasts-StBuildTerm-(|e1, st1):
  RootApp(s1) -> (RootApp(s2), st4)
  with
    !st1
  ; stBuildTerm-as-st(\st2 -> st3 where
      (s2, st3) := <insertCasts-Strategy(|e1, st2)> s1\)
  ; ?st4

insertCasts-StBuildTerm(|e1, st1):
  trm@Char(_) -> <insertCasts-StBuildTerm-Lit(|st1, IntT())>

insertCasts-StBuildTerm-(|e1, st1):
  trm1@Tuple(trm1*) -> (Tuple(trm2*), st4)
  with
    t1 := <current-type> st1
  ; t1* := <tupleTypes(|<length> trm1*)> t1
  ; (trm2*, t*, st2) := <thread-map-LUB(insertCasts-StBuildTerm-Type(|e1))> (<zip> (trm1*, t1*), st1)
  ; t2 := TupleT(t*)
  ; (_, st3) := <computeCoercion(|trm1, st2)> (t2, t1)
  ; st4 := <current-type(|t2)> st3

insertCasts-StBuildTerm-(|e1, st1):
  trm1@List(trm1*) -> (List(trm2*), st4)
  with
    t := <current-type;listType> st1
  ; (trm2*, t*, st2) := <thread-map-LUB(insertCasts-StBuildTerm-ListVar(|e1, t))> (trm1*, st1)
  ; t1 := ListT(<foldr1(?[<id>], LUB <+ !DynT()) <+ !ErrT()> t*)
  ; (_, st3) := <computeCoercion(|trm1, st1)> (t1, <current-type> st1)
  ; st4 := <current-type(|t1)> st3

insertCasts-StBuildTerm-ListVar(|e1, t1):
  (Var(ListVar(_)), _) -> <insertCasts-StBuildTerm-Type(|e1, t2)>
  where
    t2 := DynT(ListT(<unDyn> t1))

insertCasts-StBuildTerm-ListVar(|e1, t) = insertCasts-StBuildTerm-Type(|e1, t)

insertCasts-StBuildTerm-(|e1, st1):
  ListTail(trm1*, trm1) -> (ListTail(trm2*, trm3), st4)
  with
    t := <current-type;listType> st1
  ; (trm2*, t*, st2) := <thread-map-LUB(insertCasts-StBuildTerm-ListVar(|e1, t))> (trm1*, st1)
  ; (trm2, st3) := <insertCasts-StBuildTerm(|e1, <current-type(|ListT())> st2)> trm1
  ; if ListT(t) := <current-type> st3 
      then
        t1 := <foldr1(?[<id>], LUB <+ !DynT())> [t*, t]
      ; st4 := <current-type(|ListT(t1))> st3
      ; trm3 := trm2
      else
        (trm3, st4) := <insertCastApp(|<current-type> st3, ListT())> (trm2, st3)
    end

insertCasts-StBuildTerm-(|e1, st1):
  trm@BuildDefaultPT(trm1) -> (BuildDefaultPT(trm2), st2)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, st1)> trm1
  ; <report-Err> (trm, BuildDefaultInBuildTerm())

strategies // Terms in match position (string quotations)

insertCasts-StMatchTerm-(|e1, st1):
  trm@StringQuotation1(p, sqp1*) -> (StringQuotation1(p, sqp2*), st2)
  with
    (sqp2*, st2) := <thread-map(insertCasts-Match-StringQuotedPart(|e1))> (sqp1*, st1)
  ; <report-Err> (trm, StringQuotationInMatchTerm())

insertCasts-StMatchTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation2(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StMatchTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation2(p, sqp*)\)

insertCasts-StMatchTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation3(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StMatchTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation3(p, sqp*)\)

insertCasts-StMatchTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation4(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StMatchTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation4(p, sqp*)\)

insertCasts-Match-StringQuotedPart(|e1) = otf22(insertCasts-Match-StringQuotedPart-(|e1))

insertCasts-Match-StringQuotedPart(|e1):
  (sqp@QStr(_), st1) -> (sqp, st1)

insertCasts-Match-StringQuotedPart(|e1):
  (sqp@QDollar(_), st1) -> (sqp, st1)

insertCasts-Match-StringQuotedPart(|e1):
  (sqp@QBr(_), st1) -> (sqp, st1)

insertCasts-Match-StringQuotedPart-(|e1):
  (StringEscape1(p, trm1), st1) -> (StringEscape1(p, trm2), st2)
  with
    (trm2, st2) := <insertCasts-StMatchTerm(|e1, <current-type(|StringT())> st1)> trm1

insertCasts-Match-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape2(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Match-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape2(p, sqp*)\)

insertCasts-Match-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape3(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Match-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape3(p, sqp*)\)

insertCasts-Match-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape4(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Match-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape4(p, sqp*)\)

strategies // Terms in build position (string quotations)

insertCasts-StBuildTerm-(|e1, st1):
  trm@StringQuotation1(p, sqp1*) -> (StringQuotation1(p, sqp2*), st3)
  with
    t1 := StringT()
  ; t2 := <current-type> st1
  ; (_, st2) := <computeCoercion(|trm, st1)> (t1, t2)
  ; (sqp2*, st3) := <thread-map(insertCasts-Build-StringQuotedPart(|e1))> (sqp1*, <current-type(|StringT())> st2)

insertCasts-StBuildTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation2(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StBuildTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation2(p, sqp*)\)

insertCasts-StBuildTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation3(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StBuildTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation3(p, sqp*)\)

insertCasts-StBuildTerm(|e1, st1) =
  otf12-sugar(
      \StringQuotation4(p, sqp*) -> StringQuotation1(p, sqp*)\
    , insertCasts-StBuildTerm(|e1, st1)
    , \StringQuotation1(p, sqp*) -> StringQuotation4(p, sqp*)\)

insertCasts-Build-StringQuotedPart(|e1) = otf22(insertCasts-Build-StringQuotedPart-(|e1))

insertCasts-Build-StringQuotedPart(|e1):
  (sqp@QStr(_), st1) -> (sqp, st1)

insertCasts-Build-StringQuotedPart(|e1):
  (sqp@QDollar(_), st1) -> (sqp, st1)

insertCasts-Build-StringQuotedPart(|e1):
  (sqp@QBr(_), st1) -> (sqp, st1)

insertCasts-Build-StringQuotedPart-(|e1):
  (StringEscape1(p, trm1), st1) -> (StringEscape1(p, trm2), st2)
  with
    (trm2, st2) := <insertCasts-StBuildTerm(|e1, <current-type(|StringT())> st1)> trm1

insertCasts-Build-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape2(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Build-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape2(p, sqp*)\)

insertCasts-Build-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape3(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Build-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape3(p, sqp*)\)

insertCasts-Build-StringQuotedPart(|e1) =
  otf22-sugar(
      \StringEscape4(p, sqp*) -> StringEscape1(p, sqp*)\
    , insertCasts-Build-StringQuotedPart(|e1)
    , \StringEscape1(p, sqp*) -> StringEscape4(p, sqp*)\)

strategies

insertCasts-StMatchTerm-(|e1, st1):
  ta@TypeAscription(trm1, t1) -> (trm3, st4)
  with
    t2 := <desugar-Type;instantiate-type-vars(|st1)> t1
  ; t3 := <current-type> st1
  ; (trm2, st2) := <insertCasts-StMatchTerm(|e1, <current-type(|t2)> st1)> trm1
  ; if ErrT() := <current-type> st2
    then trm3 := trm2; st3 := st2
    else
      (c, st3) := <computeCoercion(|ta, st2)> (t3, t2)
    ; if Id() := c
        then trm3 := trm2; st4 := st3
        else
          trm3 := <otf(!As(<otf(!Var(<otf(<newname> "typeAscribed")> ta))> ta, trm2))> ta
        ; st4 := <after-match(|<otf(!BA(<otf(!Cast(c{}))> ta, trm3))> ta)> st3
      end
    end

insertCasts-StBuildTerm-(|e1, st1):
  trm1@TypeAscription(trm2, t1) -> (trm3, st4)
  with
    t2 := <desugar-Type;instantiate-type-vars(|st1)> t1
  ; t3 := <current-type> st1
  ; (_, st2) := <computeCoercion(|trm1, st1)> (t3, t2)
  ; (trm3, st3) := <insertCasts-StBuildTerm(|e1, <current-type(|t2)> st2)> trm2
  ; st4 := <current-type(|t2)> st3

