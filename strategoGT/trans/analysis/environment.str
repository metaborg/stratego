module analysis/environment

imports

libstratego-lib

analysis/utils
analysis/signatures 
signatures/-
signatures/gradual-types/internal-sig
signatures/gradual-types/signatures-sig
signatures/core/signatures-sig
 
libspoofax/stratego/debug
immutable/-

signature constructors

//    strategies                        constructors
Env : Map/*(str * int * int, SType)*/ * Rel/*(str * int, OpType)*/ -> Environment
//   local variables     currentTermType type variables
St : Map/*(str, Type)*/ * Type         * Map/*(str, Type)*/ -> Store
//                    outputTermType strategiesAfterMatch
StMatchTerm : Store * Option(Type) * List/*(Strategy)*/ -> Store
//                    inputTermType // currentTermType in Store is the _expected_ current term type
StBuildTerm : Store * Type -> Store

strategies

new-env: (strats, constrs) -> Env(strats, constrs)
new-st = !St(<immap-new>, DynT(), <immap-new>)
stMatchTerm-from-st: st -> StMatchTerm(st, None(), [])
stBuildTerm-from-st: st -> StBuildTerm(<current-type(|DynT())> st, <current-type> st)
st-from-stMatchTerm: StMatchTerm(st, Some(t), s*) -> (<current-type(|t)> st, s*)
st-from-stMatchTerm: StMatchTerm(st, None(), s*) -> (st, s*)
st-from-stBuildTerm: StBuildTerm(st, _) -> st

stMatchTerm-as-st(s|msg): StMatchTerm(st1, ot1, s*) -> StMatchTerm(<current-type(|t2);type-var-env(!tv)> st1, ot2, s*)
  where
    St(_, t2, tv) := <s> st1
  ; if(None() := ot1)
      then ot2 := Some(t2)
      else ot2 := ot1; <report-Warn> msg
    end
stBuildTerm-as-st(s): StBuildTerm(st1, t1) -> StBuildTerm(st2, t1)
  where
    // note we're using the inputtype here, not the current type
    st2 := <current-type(|t1);s> st1

strat-env = ?Env(<id>, _)
strat-env(s) = Env(s, id)

// Note that this also tries to find a congruence if it fails to find a strategy
strat-lookup(|name, snum, tnum) =
  strat-env; immap-get(|(name, snum, tnum))
strat-lookup(|name, snum, tnum) =
  where(0 := tnum); constr-env; imrel-get(|(name, snum)); not(imset-empty); !FunTType(<range;map(!SDyn())> snum, [], DynT(Dyn()), DynT(Dyn()))
strat-lookup(|name, snum, tnum) =
  strat-env; immap-get(|(name, 0, 0)); ?SDyn()
strat-put(|name, snum, tnum, value) = strat-env(immap-put(|(name, snum, tnum), value))
strat-merge-env(s): (e, se) -> <strat-env(immap-union(s|se))> e
strat-copy-type(|name, snum, tnum, as) = strat-env(env-copy-type(|(name, snum, tnum), (as, snum, tnum)))
strat-zip-new-env: (names, types) -> <zip-new-env> (names-arities, types)
where if <map(is-string)> names
  then names-arities := <zip(name-type-to-arity)> (names, types)
  else names-arities := names
end

name-type-to-arity: (n, LocalDef(FunTType(st*, tt*, _))) -> (n, <length> st*, <length> tt*)
name-type-to-arity: (n, LocalDef(SDyn())) -> (n, 0, 0)

constr-env = ?Env(_, <id>)
constr-env(s) = Env(id, s)

// N.B. Use constr-lookup/3 from main.str to filter on sort of the constructor.
constr-lookup(|name, arity) = constr-env; imrel-get(|(name, arity)); imset-to-list
constr-put(|name, arity, value) = constr-env(imrel-insert(|(name, arity), value))
constr-merge-env: (e, ce) -> <constr-env(imrel-union(|ce))> e

type-var-lookup(|name) = type-var-env; ?env; immap-get(|name); try(recurse-type-var-lookup(|name, env))
type-var-put(|name, type) = type-var-env(immap-put(|name, type))
type-var-clear(|names) = type-var-env(\env -> <foldl(\(name, e) -> <immap-remove(|name)> e\)> (names, env)\)

recurse-type-var-lookup(|name1, env): SortVar(name2) -> <immap-get(|name2); try(recurse-type-var-lookup(|name2, env))> env
where <not(eq)> (name1, name2)

term-env = ?St(<id>, _, _)
term-env = ?StMatchTerm(<term-env>, _, _)
term-env = ?StBuildTerm(<term-env>, _)
term-env(s) = St(s, id, id)
term-env(s) = StMatchTerm(term-env(s), id, id)
term-env(s) = StBuildTerm(term-env(s), id)

term-lookup(|name) = term-env; immap-get(|name)
term-put(|name, value) = term-env(immap-put(|name, value))
term-merge-env(s): (e, te) -> <term-env(immap-union(s|te))> e
term-zip-new-env = zip-new-env

current-type = ?St(_, <id>, _)
current-type = ?StMatchTerm(<current-type>, _, _)
current-type = ?StBuildTerm(<current-type>, _)
current-type(|t) = St(id, !t, id)
current-type(|t) = StMatchTerm(current-type(|t), id, id)
current-type(|t) = StBuildTerm(current-type(|t), id)

type-var-env = ?St(_, _, <id>)
type-var-env = ?StMatchTerm(<type-var-env>, _, _)
type-var-env = ?StBuildTerm(<type-var-env>, _)
type-var-env(s) = St(id, id, s)
type-var-env(s) = StMatchTerm(type-var-env(s), id, id)
type-var-env(s) = StBuildTerm(type-var-env(s), id)

st-merge(s): (St(terms1, type1, tve1), St(terms2, type2, tve2)) -> St(terms3, type3, tve3)
  with
    terms3 := <immap-union(s|terms2)> terms1
  ; type3 := <s> (type1, type2)
  ; tve3 := <immap-union(s|tve2)> tve1

st-merge(s): (StBuildTerm(st1, input), StBuildTerm(st2, input)) -> StBuildTerm(st3, input)
  with st3 := <st-merge(s)> (st1, st2)

st-merge(s): (StMatchTerm(st1, output, after), StMatchTerm(st2, output, after)) -> StMatchTerm(st3, output, after)
  with st3 := <st-merge(s)> (st1, st2)

output-type(|t) = StMatchTerm(id, \None() -> Some(t)\, id)
after-match(|s) = StMatchTerm(id, id, ![s | <id>])
after-match = ?StMatchTerm(_, _, <id>)

strategies

/**
 * Copy type of `name` and bind it to the new name (`as`) as well. 
 */
env-copy-type(|name, as): env -> <immap-put(|as, <immap-get(|name)> env)> env

zip-new-env = zip;immap-from-list
zip-new-env = zip;immap-from-list

keep-left = Fst
keep-right = Snd
