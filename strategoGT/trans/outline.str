module outline

/**
 * This file was copied from the original Stratego editor project and needs to be refactored.
 */

imports
  signatures/strategoGT-sig
  libspoofax/editor/outline
  libspoofax/term/origin
  analysis

rules
  
  editor-outline:
    ast -> Node(label{icon}, children)
    where
      label := <get-module-name> ast;
      icon :=  <icon-module>;
      sections := <collect-om(is-outline-section, conc)> ast;
      children := <collect-om(get-outline-section); map(outline-section-to-node(|sections))> sections
  
  get-module-name: Module(name, _) -> name
  
signature constructors
  
  // outline sections
  Rules:           OutlineSection
  Signatures:      OutlineSection // TODO
  Overlays:        OutlineSection // TODO

  // rule signatures
  RuleSig: Id -> RuleSig
  RuleSig: Id * List(Typedid) -> RuleSig
  RuleSig: Id * List(Typedid) * List(Typedid) -> RuleSig
  
rules
  
  // icons
  icon-module = !"icons/module.png"
  icon-exports = !"icons/exports.png"
  icon-rule = !"icons/rule.png"

rules
  
  outline-section-to-node(|sections):
    outline-section -> Node(label{icon}, children)
    where
      sections' := <collect-om(has-outline-section(|outline-section), conc)> sections;    
      label := <literals-to-outline-label(|<Hd> sections')>
        <Hd; explode-term; ?(<id>, _);
        lower-case> sections';
      icon := <icon-exports>;
      children := <to-outline-nodes(|outline-section)> sections'

  get-outline-section: section -> Rules()
    where <?Rules(_) + ?Strategies(_)> section
    
  is-outline-section = ?section; get-outline-section; !section
  
  has-outline-section(|outline-section) = ?section; get-outline-section; ?outline-section; !section  

rules // rules and strategies
  
  to-outline-nodes(|outline-section):
    sections -> nodes
    where
      Rules() := outline-section;
      sigs := <collect-om(sig-of, conc); reverse; make-set; reverse> sections; // HACK => collect-om returns the last element in case of duplicates; we want the first, for its origin
      nodes := <map(sig-to-outline-node(|sections))> sigs
  
  sig-of = <?SDefNoArgs(x, s) + ?RDefNoArgs(x, s)> := <id>; !(<remove-quote> x, 0, 0)
  sig-of = <?SDef(x, s*, s) + ?RDef(x, s*, s)> := <id>; !(<remove-quote> x, <length> s*, 0)
  sig-of = <?SDefT(x, s*, t*, s) + ?RDefT(x, s*, t*, s)> := <id>; !(<remove-quote> x, <length> s*, <length> t*)
  sig-of = <?SDefP(x, s*, t*, s) + ?RDefP(x, s*, t*, s)> := <id>; !(<remove-quote> x, <length> s*, <length> t*)
  
  has-signature(|sig) = ?rule; sig-of; ?sig; !rule
  
  rule-to-label = <?SDefNoArgs(a, _) + ?RDefNoArgs(a, _)> := <id>; !a; origin-text 
  rule-to-label = <?SDef(a, b, _) + ?RDef(a, b, _)> := <id>; !(<origin-text> a, "(", <origin-text> b, ")"); conc-strings
  rule-to-label = <?SDefT(a, b, c, _) + ?RDefT(a, b, c, _)> := <id>; !(<origin-text> a, "(", <origin-text> b, " | ", <origin-text> c, ")"); conc-strings
  rule-to-label = <?SDefP(a, b, c, _) + ?RDefP(a, b, c, _)> := <id>; !(<origin-text> a, "(", <origin-text> b, " | ", <origin-text> c, ")"); conc-strings
  
  sig-to-outline-node(|sections):
    sig -> Node(label{icon}, children)
    where
      'rules := <collect-om(has-signature(|sig), conc)> sections;
      label := <Hd; ?rule; rule-to-label; fix-origin(|rule)> 'rules;
      icon := <icon-rule>;
      children := <add-indices; Tl; map(rule-to-outline-node)> 'rules 
  
  rule-to-outline-node:
    (index, rule) -> Node(label{icon}, [])
    where
      label := <conc-strings; fix-origin(|rule)> (<rule-to-label> rule, " (", <int-to-string> index, ")");
      icon := <icon-rule>
  
  fix-origin(|rule) =
    ?label;
    (a, b, c, d, e) := <origin-location-offset> rule;
    origin := <origin-text; string-as-chars(
      take-while(not(?':' + ?'='));
      rtrim(is-whitespace + ?'\n')
      )> rule; 
    origin' := <trim-trailing-whitespace> origin;
    !label;
    origin-location-offset-set(|(a, b, c, d, <add; dec> (d, <string-length> origin')))

strategies
//  remove-quote:
//    COMPLETION(s) -> COMPLETION(<remove-quote> s)

  remove-quote:
    s -> s'
    with
      if explode-string => ['\'' | s_tail] then
        s' := <implode-string> s_tail
      else
        s' := s
      end